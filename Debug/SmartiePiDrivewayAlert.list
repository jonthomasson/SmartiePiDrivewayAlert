
SmartiePiDrivewayAlert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001aec  08001aec  00011aec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001b3c  08001b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001b44  08001b44  00011b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001b48  08001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000090  20000004  08001b50  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000094  08001b50  00020094  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b632  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a34  00000000  00000000  0002b65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b77  00000000  00000000  0002d092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000538  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000640  00000000  00000000  00030148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000345d  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023e2  00000000  00000000  00033be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035fc7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d70  00000000  00000000  00036044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ad4 	.word	0x08001ad4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001ad4 	.word	0x08001ad4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	b083      	sub	sp, #12
 8000284:	000d      	movs	r5, r1
 8000286:	4692      	mov	sl, r2
 8000288:	4699      	mov	r9, r3
 800028a:	428b      	cmp	r3, r1
 800028c:	d82f      	bhi.n	80002ee <__udivmoddi4+0x7a>
 800028e:	d02c      	beq.n	80002ea <__udivmoddi4+0x76>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ae 	bl	80003f4 <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8a9 	bl	80003f4 <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d500      	bpl.n	80002ae <__udivmoddi4+0x3a>
 80002ac:	e074      	b.n	8000398 <__udivmoddi4+0x124>
 80002ae:	4653      	mov	r3, sl
 80002b0:	465a      	mov	r2, fp
 80002b2:	4093      	lsls	r3, r2
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4642      	mov	r2, r8
 80002ba:	4093      	lsls	r3, r2
 80002bc:	001e      	movs	r6, r3
 80002be:	42af      	cmp	r7, r5
 80002c0:	d829      	bhi.n	8000316 <__udivmoddi4+0xa2>
 80002c2:	d026      	beq.n	8000312 <__udivmoddi4+0x9e>
 80002c4:	465b      	mov	r3, fp
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	41bd      	sbcs	r5, r7
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	da00      	bge.n	80002d0 <__udivmoddi4+0x5c>
 80002ce:	e079      	b.n	80003c4 <__udivmoddi4+0x150>
 80002d0:	2200      	movs	r2, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	465a      	mov	r2, fp
 80002dc:	4093      	lsls	r3, r2
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2301      	movs	r3, #1
 80002e2:	4642      	mov	r2, r8
 80002e4:	4093      	lsls	r3, r2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	e019      	b.n	800031e <__udivmoddi4+0xaa>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	d9d0      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002ee:	2200      	movs	r2, #0
 80002f0:	2300      	movs	r3, #0
 80002f2:	9200      	str	r2, [sp, #0]
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <__udivmoddi4+0x8c>
 80002fc:	601c      	str	r4, [r3, #0]
 80002fe:	605d      	str	r5, [r3, #4]
 8000300:	9800      	ldr	r0, [sp, #0]
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	b003      	add	sp, #12
 8000306:	bc3c      	pop	{r2, r3, r4, r5}
 8000308:	4690      	mov	r8, r2
 800030a:	4699      	mov	r9, r3
 800030c:	46a2      	mov	sl, r4
 800030e:	46ab      	mov	fp, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	42a3      	cmp	r3, r4
 8000314:	d9d6      	bls.n	80002c4 <__udivmoddi4+0x50>
 8000316:	2200      	movs	r2, #0
 8000318:	2300      	movs	r3, #0
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	4643      	mov	r3, r8
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0e8      	beq.n	80002f6 <__udivmoddi4+0x82>
 8000324:	07fb      	lsls	r3, r7, #31
 8000326:	0872      	lsrs	r2, r6, #1
 8000328:	431a      	orrs	r2, r3
 800032a:	4646      	mov	r6, r8
 800032c:	087b      	lsrs	r3, r7, #1
 800032e:	e00e      	b.n	800034e <__udivmoddi4+0xda>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d101      	bne.n	8000338 <__udivmoddi4+0xc4>
 8000334:	42a2      	cmp	r2, r4
 8000336:	d80c      	bhi.n	8000352 <__udivmoddi4+0xde>
 8000338:	1aa4      	subs	r4, r4, r2
 800033a:	419d      	sbcs	r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	1924      	adds	r4, r4, r4
 8000340:	416d      	adcs	r5, r5
 8000342:	2100      	movs	r1, #0
 8000344:	3e01      	subs	r6, #1
 8000346:	1824      	adds	r4, r4, r0
 8000348:	414d      	adcs	r5, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d006      	beq.n	800035c <__udivmoddi4+0xe8>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d9ee      	bls.n	8000330 <__udivmoddi4+0xbc>
 8000352:	3e01      	subs	r6, #1
 8000354:	1924      	adds	r4, r4, r4
 8000356:	416d      	adcs	r5, r5
 8000358:	2e00      	cmp	r6, #0
 800035a:	d1f8      	bne.n	800034e <__udivmoddi4+0xda>
 800035c:	465b      	mov	r3, fp
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	1900      	adds	r0, r0, r4
 8000364:	4169      	adcs	r1, r5
 8000366:	2b00      	cmp	r3, #0
 8000368:	db22      	blt.n	80003b0 <__udivmoddi4+0x13c>
 800036a:	002b      	movs	r3, r5
 800036c:	465a      	mov	r2, fp
 800036e:	40d3      	lsrs	r3, r2
 8000370:	002a      	movs	r2, r5
 8000372:	4644      	mov	r4, r8
 8000374:	40e2      	lsrs	r2, r4
 8000376:	001c      	movs	r4, r3
 8000378:	465b      	mov	r3, fp
 800037a:	0015      	movs	r5, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	db2c      	blt.n	80003da <__udivmoddi4+0x166>
 8000380:	0026      	movs	r6, r4
 8000382:	409e      	lsls	r6, r3
 8000384:	0033      	movs	r3, r6
 8000386:	0026      	movs	r6, r4
 8000388:	4647      	mov	r7, r8
 800038a:	40be      	lsls	r6, r7
 800038c:	0032      	movs	r2, r6
 800038e:	1a80      	subs	r0, r0, r2
 8000390:	4199      	sbcs	r1, r3
 8000392:	9000      	str	r0, [sp, #0]
 8000394:	9101      	str	r1, [sp, #4]
 8000396:	e7ae      	b.n	80002f6 <__udivmoddi4+0x82>
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	431f      	orrs	r7, r3
 80003ae:	e782      	b.n	80002b6 <__udivmoddi4+0x42>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	002a      	movs	r2, r5
 80003b8:	4646      	mov	r6, r8
 80003ba:	409a      	lsls	r2, r3
 80003bc:	0023      	movs	r3, r4
 80003be:	40f3      	lsrs	r3, r6
 80003c0:	4313      	orrs	r3, r2
 80003c2:	e7d5      	b.n	8000370 <__udivmoddi4+0xfc>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	2100      	movs	r1, #0
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	9100      	str	r1, [sp, #0]
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2201      	movs	r2, #1
 80003d4:	40da      	lsrs	r2, r3
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	e782      	b.n	80002e0 <__udivmoddi4+0x6c>
 80003da:	4642      	mov	r2, r8
 80003dc:	2320      	movs	r3, #32
 80003de:	0026      	movs	r6, r4
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	40de      	lsrs	r6, r3
 80003e4:	002f      	movs	r7, r5
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4097      	lsls	r7, r2
 80003ea:	4666      	mov	r6, ip
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c9      	b.n	8000386 <__udivmoddi4+0x112>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000448:	21fa      	movs	r1, #250	; 0xfa
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_InitTick+0x24>)
{
 800044c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800044e:	0089      	lsls	r1, r1, #2
{
 8000450:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	f7ff fe62 	bl	800011c <__udivsi3>
 8000458:	f000 f862 	bl	8000520 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800045c:	2001      	movs	r0, #1
 800045e:	2200      	movs	r2, #0
 8000460:	0021      	movs	r1, r4
 8000462:	4240      	negs	r0, r0
 8000464:	f000 f822 	bl	80004ac <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000468:	2000      	movs	r0, #0
 800046a:	bd10      	pop	{r4, pc}
 800046c:	20000000 	.word	0x20000000

08000470 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000470:	2340      	movs	r3, #64	; 0x40
 8000472:	4a06      	ldr	r2, [pc, #24]	; (800048c <HAL_Init+0x1c>)
{
 8000474:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000476:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000478:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047a:	430b      	orrs	r3, r1
 800047c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800047e:	f7ff ffe3 	bl	8000448 <HAL_InitTick>
  HAL_MspInit();
 8000482:	f001 fa5b 	bl	800193c <HAL_MspInit>
}
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40022000 	.word	0x40022000

08000490 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000490:	4a02      	ldr	r2, [pc, #8]	; (800049c <HAL_IncTick+0xc>)
 8000492:	6813      	ldr	r3, [r2, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	20000020 	.word	0x20000020

080004a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <HAL_GetTick+0x8>)
 80004a2:	6818      	ldr	r0, [r3, #0]
}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000020 	.word	0x20000020

080004ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004b0:	2800      	cmp	r0, #0
 80004b2:	da14      	bge.n	80004de <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b4:	230f      	movs	r3, #15
 80004b6:	b2c0      	uxtb	r0, r0
 80004b8:	4003      	ands	r3, r0
 80004ba:	3b08      	subs	r3, #8
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <HAL_NVIC_SetPriority+0x58>)
 80004be:	089b      	lsrs	r3, r3, #2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	189b      	adds	r3, r3, r2
 80004c4:	2203      	movs	r2, #3
 80004c6:	4010      	ands	r0, r2
 80004c8:	4090      	lsls	r0, r2
 80004ca:	32fc      	adds	r2, #252	; 0xfc
 80004cc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ce:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d4:	69dc      	ldr	r4, [r3, #28]
 80004d6:	43ac      	bics	r4, r5
 80004d8:	4321      	orrs	r1, r4
 80004da:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004de:	2503      	movs	r5, #3
 80004e0:	0883      	lsrs	r3, r0, #2
 80004e2:	4028      	ands	r0, r5
 80004e4:	40a8      	lsls	r0, r5
 80004e6:	35fc      	adds	r5, #252	; 0xfc
 80004e8:	002e      	movs	r6, r5
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_NVIC_SetPriority+0x5c>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	189b      	adds	r3, r3, r2
 80004f0:	22c0      	movs	r2, #192	; 0xc0
 80004f2:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f4:	4029      	ands	r1, r5
 80004f6:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	589c      	ldr	r4, [r3, r2]
 80004fc:	43b4      	bics	r4, r6
 80004fe:	4321      	orrs	r1, r4
 8000500:	5099      	str	r1, [r3, r2]
 8000502:	e7eb      	b.n	80004dc <HAL_NVIC_SetPriority+0x30>
 8000504:	e000ed00 	.word	0xe000ed00
 8000508:	e000e100 	.word	0xe000e100

0800050c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800050c:	231f      	movs	r3, #31
 800050e:	4018      	ands	r0, r3
 8000510:	3b1e      	subs	r3, #30
 8000512:	4083      	lsls	r3, r0
 8000514:	4a01      	ldr	r2, [pc, #4]	; (800051c <HAL_NVIC_EnableIRQ+0x10>)
 8000516:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000518:	4770      	bx	lr
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	e000e100 	.word	0xe000e100

08000520 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <HAL_SYSTICK_Config+0x28>)
 8000522:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000524:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000526:	4293      	cmp	r3, r2
 8000528:	d80d      	bhi.n	8000546 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	4808      	ldr	r0, [pc, #32]	; (8000550 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000530:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	6a03      	ldr	r3, [r0, #32]
 8000534:	0609      	lsls	r1, r1, #24
 8000536:	021b      	lsls	r3, r3, #8
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	430b      	orrs	r3, r1
 800053c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800053e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000540:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000542:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000544:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000546:	4770      	bx	lr
 8000548:	00ffffff 	.word	0x00ffffff
 800054c:	e000e010 	.word	0xe000e010
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000556:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000558:	2804      	cmp	r0, #4
 800055a:	d102      	bne.n	8000562 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800055c:	4310      	orrs	r0, r2
 800055e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000560:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000562:	2104      	movs	r1, #4
 8000564:	438a      	bics	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	e7fa      	b.n	8000560 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	e000e010 	.word	0xe000e010

08000570 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000570:	4770      	bx	lr

08000572 <HAL_SYSTICK_IRQHandler>:
{
 8000572:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000574:	f7ff fffc 	bl	8000570 <HAL_SYSTICK_Callback>
}
 8000578:	bd10      	pop	{r4, pc}
	...

0800057c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800057e:	4a55      	ldr	r2, [pc, #340]	; (80006d4 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000580:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000582:	1882      	adds	r2, r0, r2
 8000584:	1e54      	subs	r4, r2, #1
 8000586:	41a2      	sbcs	r2, r4
{
 8000588:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800058a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800058c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800058e:	3205      	adds	r2, #5
 8000590:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000592:	9a01      	ldr	r2, [sp, #4]
 8000594:	40da      	lsrs	r2, r3
 8000596:	d101      	bne.n	800059c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000598:	b005      	add	sp, #20
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800059c:	2501      	movs	r5, #1
 800059e:	409d      	lsls	r5, r3
 80005a0:	9a01      	ldr	r2, [sp, #4]
 80005a2:	402a      	ands	r2, r5
 80005a4:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005a6:	d100      	bne.n	80005aa <HAL_GPIO_Init+0x2e>
 80005a8:	e091      	b.n	80006ce <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005aa:	684a      	ldr	r2, [r1, #4]
 80005ac:	4694      	mov	ip, r2
 80005ae:	2210      	movs	r2, #16
 80005b0:	4664      	mov	r4, ip
 80005b2:	4394      	bics	r4, r2
 80005b4:	0022      	movs	r2, r4
 80005b6:	3c01      	subs	r4, #1
 80005b8:	2a02      	cmp	r2, #2
 80005ba:	d11f      	bne.n	80005fc <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005bc:	2407      	movs	r4, #7
 80005be:	270f      	movs	r7, #15
 80005c0:	401c      	ands	r4, r3
 80005c2:	00a4      	lsls	r4, r4, #2
 80005c4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005c6:	08da      	lsrs	r2, r3, #3
 80005c8:	0092      	lsls	r2, r2, #2
 80005ca:	1882      	adds	r2, r0, r2
 80005cc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005ce:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005d0:	690f      	ldr	r7, [r1, #16]
 80005d2:	40a7      	lsls	r7, r4
 80005d4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005d6:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005d8:	2403      	movs	r4, #3
 80005da:	005e      	lsls	r6, r3, #1
 80005dc:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005de:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005e0:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005e2:	68cc      	ldr	r4, [r1, #12]
 80005e4:	40b4      	lsls	r4, r6
 80005e6:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005e8:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ea:	4662      	mov	r2, ip
 80005ec:	06d2      	lsls	r2, r2, #27
 80005ee:	0fd2      	lsrs	r2, r2, #31
 80005f0:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005f2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005f4:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005f6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005f8:	6042      	str	r2, [r0, #4]
 80005fa:	e001      	b.n	8000600 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005fc:	2c01      	cmp	r4, #1
 80005fe:	d9eb      	bls.n	80005d8 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000600:	2603      	movs	r6, #3
 8000602:	0034      	movs	r4, r6
 8000604:	005d      	lsls	r5, r3, #1
 8000606:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000608:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800060a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800060c:	4032      	ands	r2, r6
 800060e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000610:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000612:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000614:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000616:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000618:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800061a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800061c:	688a      	ldr	r2, [r1, #8]
 800061e:	40aa      	lsls	r2, r5
 8000620:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000622:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000624:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000626:	00d2      	lsls	r2, r2, #3
 8000628:	d551      	bpl.n	80006ce <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	2501      	movs	r5, #1
 800062c:	4c2a      	ldr	r4, [pc, #168]	; (80006d8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800062e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000632:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000634:	001d      	movs	r5, r3
 8000636:	4035      	ands	r5, r6
 8000638:	00ad      	lsls	r5, r5, #2
 800063a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063c:	6362      	str	r2, [r4, #52]	; 0x34
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000640:	089c      	lsrs	r4, r3, #2
 8000642:	00a4      	lsls	r4, r4, #2
 8000644:	18a4      	adds	r4, r4, r2
 8000646:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000648:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800064a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800064c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800064e:	05ff      	lsls	r7, r7, #23
 8000650:	2200      	movs	r2, #0
 8000652:	42b8      	cmp	r0, r7
 8000654:	d010      	beq.n	8000678 <HAL_GPIO_Init+0xfc>
 8000656:	4f22      	ldr	r7, [pc, #136]	; (80006e0 <HAL_GPIO_Init+0x164>)
 8000658:	3201      	adds	r2, #1
 800065a:	42b8      	cmp	r0, r7
 800065c:	d00c      	beq.n	8000678 <HAL_GPIO_Init+0xfc>
 800065e:	4f21      	ldr	r7, [pc, #132]	; (80006e4 <HAL_GPIO_Init+0x168>)
 8000660:	3201      	adds	r2, #1
 8000662:	42b8      	cmp	r0, r7
 8000664:	d008      	beq.n	8000678 <HAL_GPIO_Init+0xfc>
 8000666:	4f20      	ldr	r7, [pc, #128]	; (80006e8 <HAL_GPIO_Init+0x16c>)
 8000668:	0032      	movs	r2, r6
 800066a:	42b8      	cmp	r0, r7
 800066c:	d004      	beq.n	8000678 <HAL_GPIO_Init+0xfc>
 800066e:	4e1f      	ldr	r6, [pc, #124]	; (80006ec <HAL_GPIO_Init+0x170>)
 8000670:	3201      	adds	r2, #1
 8000672:	42b0      	cmp	r0, r6
 8000674:	d000      	beq.n	8000678 <HAL_GPIO_Init+0xfc>
 8000676:	9a03      	ldr	r2, [sp, #12]
 8000678:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800067a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800067c:	9d02      	ldr	r5, [sp, #8]
 800067e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000680:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000682:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000684:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000686:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000688:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800068a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800068c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800068e:	03ff      	lsls	r7, r7, #15
 8000690:	d401      	bmi.n	8000696 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000692:	0035      	movs	r5, r6
 8000694:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000696:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000698:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800069a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800069c:	9d00      	ldr	r5, [sp, #0]
 800069e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a0:	03bf      	lsls	r7, r7, #14
 80006a2:	d401      	bmi.n	80006a8 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80006a4:	0035      	movs	r5, r6
 80006a6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006a8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006aa:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006ac:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006ae:	9d00      	ldr	r5, [sp, #0]
 80006b0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b2:	02ff      	lsls	r7, r7, #11
 80006b4:	d401      	bmi.n	80006ba <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80006b6:	0035      	movs	r5, r6
 80006b8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ba:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006bc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006be:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006c0:	9e00      	ldr	r6, [sp, #0]
 80006c2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c4:	02bf      	lsls	r7, r7, #10
 80006c6:	d401      	bmi.n	80006cc <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80006c8:	4025      	ands	r5, r4
 80006ca:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006cc:	60d6      	str	r6, [r2, #12]
    position++;
 80006ce:	3301      	adds	r3, #1
 80006d0:	e75f      	b.n	8000592 <HAL_GPIO_Init+0x16>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	afffe400 	.word	0xafffe400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000
 80006e0:	50000400 	.word	0x50000400
 80006e4:	50000800 	.word	0x50000800
 80006e8:	50000c00 	.word	0x50000c00
 80006ec:	50001000 	.word	0x50001000
 80006f0:	40010400 	.word	0x40010400

080006f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d001      	beq.n	80006fc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006fa:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80006fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006fe:	e7fc      	b.n	80006fa <HAL_GPIO_WritePin+0x6>

08000700 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000700:	6943      	ldr	r3, [r0, #20]
 8000702:	4059      	eors	r1, r3
 8000704:	6141      	str	r1, [r0, #20]
}
 8000706:	4770      	bx	lr

08000708 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800070a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4210      	tst	r0, r2
 8000710:	d002      	beq.n	8000718 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000712:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000714:	f001 f8f8 	bl	8001908 <HAL_GPIO_EXTI_Callback>
  }
}
 8000718:	bd10      	pop	{r4, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40010400 	.word	0x40010400

08000720 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000720:	22f0      	movs	r2, #240	; 0xf0
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8000724:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000726:	68d9      	ldr	r1, [r3, #12]
 8000728:	4211      	tst	r1, r2
 800072a:	d00b      	beq.n	8000744 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800072c:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800072e:	2101      	movs	r1, #1
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8000732:	6802      	ldr	r2, [r0, #0]
 8000734:	438a      	bics	r2, r1
 8000736:	431a      	orrs	r2, r3
 8000738:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800073a:	6800      	ldr	r0, [r0, #0]
 800073c:	4008      	ands	r0, r1
 800073e:	4058      	eors	r0, r3
 8000740:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000742:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	22c0      	movs	r2, #192	; 0xc0
 8000748:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	4c0e      	ldr	r4, [pc, #56]	; (8000788 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800074e:	0152      	lsls	r2, r2, #5
 8000750:	420d      	tst	r5, r1
 8000752:	d00a      	beq.n	800076a <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	015b      	lsls	r3, r3, #5
 800075c:	429a      	cmp	r2, r3
 800075e:	d1e5      	bne.n	800072c <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8000762:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000764:	4243      	negs	r3, r0
 8000766:	4143      	adcs	r3, r0
 8000768:	e7e1      	b.n	800072e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800076c:	4329      	orrs	r1, r5
 800076e:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000770:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000772:	4c07      	ldr	r4, [pc, #28]	; (8000790 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000774:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 8000776:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000778:	4021      	ands	r1, r4
 800077a:	6399      	str	r1, [r3, #56]	; 0x38
 800077c:	e7ec      	b.n	8000758 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40021000 	.word	0x40021000
 8000784:	40022000 	.word	0x40022000
 8000788:	40007000 	.word	0x40007000
 800078c:	ffff4000 	.word	0xffff4000
 8000790:	efffffff 	.word	0xefffffff

08000794 <HAL_RCC_OscConfig>:
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	6803      	ldr	r3, [r0, #0]
{
 8000798:	b085      	sub	sp, #20
 800079a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079c:	07db      	lsls	r3, r3, #31
 800079e:	d44e      	bmi.n	800083e <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	079b      	lsls	r3, r3, #30
 80007a4:	d500      	bpl.n	80007a8 <HAL_RCC_OscConfig+0x14>
 80007a6:	e09f      	b.n	80008e8 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	06db      	lsls	r3, r3, #27
 80007ac:	d535      	bpl.n	800081a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80007ae:	230c      	movs	r3, #12
 80007b0:	4dbc      	ldr	r5, [pc, #752]	; (8000aa4 <HAL_RCC_OscConfig+0x310>)
 80007b2:	68ea      	ldr	r2, [r5, #12]
 80007b4:	421a      	tst	r2, r3
 80007b6:	d000      	beq.n	80007ba <HAL_RCC_OscConfig+0x26>
 80007b8:	e0e9      	b.n	800098e <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007ba:	682b      	ldr	r3, [r5, #0]
 80007bc:	059b      	lsls	r3, r3, #22
 80007be:	d502      	bpl.n	80007c6 <HAL_RCC_OscConfig+0x32>
 80007c0:	69e3      	ldr	r3, [r4, #28]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d050      	beq.n	8000868 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007c6:	22e0      	movs	r2, #224	; 0xe0
 80007c8:	686b      	ldr	r3, [r5, #4]
 80007ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007cc:	0212      	lsls	r2, r2, #8
 80007ce:	4013      	ands	r3, r2
 80007d0:	4298      	cmp	r0, r3
 80007d2:	d800      	bhi.n	80007d6 <HAL_RCC_OscConfig+0x42>
 80007d4:	e0c9      	b.n	800096a <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007d6:	f7ff ffa3 	bl	8000720 <RCC_SetFlashLatencyFromMSIRange>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d144      	bne.n	8000868 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007de:	686b      	ldr	r3, [r5, #4]
 80007e0:	4ab1      	ldr	r2, [pc, #708]	; (8000aa8 <HAL_RCC_OscConfig+0x314>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	4313      	orrs	r3, r2
 80007e8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007ea:	686a      	ldr	r2, [r5, #4]
 80007ec:	6a23      	ldr	r3, [r4, #32]
 80007ee:	0212      	lsls	r2, r2, #8
 80007f0:	061b      	lsls	r3, r3, #24
 80007f2:	0a12      	lsrs	r2, r2, #8
 80007f4:	4313      	orrs	r3, r2
 80007f6:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007fa:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007fc:	0b59      	lsrs	r1, r3, #13
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	3101      	adds	r1, #1
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000806:	0612      	lsls	r2, r2, #24
 8000808:	49a8      	ldr	r1, [pc, #672]	; (8000aac <HAL_RCC_OscConfig+0x318>)
 800080a:	0f12      	lsrs	r2, r2, #28
 800080c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800080e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000810:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000812:	4aa7      	ldr	r2, [pc, #668]	; (8000ab0 <HAL_RCC_OscConfig+0x31c>)
 8000814:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000816:	f7ff fe17 	bl	8000448 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	071b      	lsls	r3, r3, #28
 800081e:	d500      	bpl.n	8000822 <HAL_RCC_OscConfig+0x8e>
 8000820:	e0ec      	b.n	80009fc <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	075b      	lsls	r3, r3, #29
 8000826:	d500      	bpl.n	800082a <HAL_RCC_OscConfig+0x96>
 8000828:	e10f      	b.n	8000a4a <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	069b      	lsls	r3, r3, #26
 800082e:	d500      	bpl.n	8000832 <HAL_RCC_OscConfig+0x9e>
 8000830:	e190      	b.n	8000b54 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000832:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000834:	2900      	cmp	r1, #0
 8000836:	d000      	beq.n	800083a <HAL_RCC_OscConfig+0xa6>
 8000838:	e1c0      	b.n	8000bbc <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 800083a:	2000      	movs	r0, #0
 800083c:	e015      	b.n	800086a <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800083e:	210c      	movs	r1, #12
 8000840:	4d98      	ldr	r5, [pc, #608]	; (8000aa4 <HAL_RCC_OscConfig+0x310>)
 8000842:	68eb      	ldr	r3, [r5, #12]
 8000844:	400b      	ands	r3, r1
 8000846:	2b08      	cmp	r3, #8
 8000848:	d008      	beq.n	800085c <HAL_RCC_OscConfig+0xc8>
 800084a:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800084c:	68ea      	ldr	r2, [r5, #12]
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	400a      	ands	r2, r1
 8000852:	428a      	cmp	r2, r1
 8000854:	d10b      	bne.n	800086e <HAL_RCC_OscConfig+0xda>
 8000856:	68ea      	ldr	r2, [r5, #12]
 8000858:	421a      	tst	r2, r3
 800085a:	d008      	beq.n	800086e <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	039b      	lsls	r3, r3, #14
 8000860:	d59e      	bpl.n	80007a0 <HAL_RCC_OscConfig+0xc>
 8000862:	6863      	ldr	r3, [r4, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d19b      	bne.n	80007a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000868:	2001      	movs	r0, #1
}
 800086a:	b005      	add	sp, #20
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086e:	6862      	ldr	r2, [r4, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d112      	bne.n	800089a <HAL_RCC_OscConfig+0x106>
 8000874:	682a      	ldr	r2, [r5, #0]
 8000876:	4313      	orrs	r3, r2
 8000878:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800087a:	f7ff fe11 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000880:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000882:	02b6      	lsls	r6, r6, #10
 8000884:	682b      	ldr	r3, [r5, #0]
 8000886:	4233      	tst	r3, r6
 8000888:	d000      	beq.n	800088c <HAL_RCC_OscConfig+0xf8>
 800088a:	e789      	b.n	80007a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800088c:	f7ff fe08 	bl	80004a0 <HAL_GetTick>
 8000890:	1bc0      	subs	r0, r0, r7
 8000892:	2864      	cmp	r0, #100	; 0x64
 8000894:	d9f6      	bls.n	8000884 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 8000896:	2003      	movs	r0, #3
 8000898:	e7e7      	b.n	800086a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089a:	21a0      	movs	r1, #160	; 0xa0
 800089c:	02c9      	lsls	r1, r1, #11
 800089e:	428a      	cmp	r2, r1
 80008a0:	d105      	bne.n	80008ae <HAL_RCC_OscConfig+0x11a>
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	6829      	ldr	r1, [r5, #0]
 80008a6:	02d2      	lsls	r2, r2, #11
 80008a8:	430a      	orrs	r2, r1
 80008aa:	602a      	str	r2, [r5, #0]
 80008ac:	e7e2      	b.n	8000874 <HAL_RCC_OscConfig+0xe0>
 80008ae:	6829      	ldr	r1, [r5, #0]
 80008b0:	4880      	ldr	r0, [pc, #512]	; (8000ab4 <HAL_RCC_OscConfig+0x320>)
 80008b2:	4001      	ands	r1, r0
 80008b4:	6029      	str	r1, [r5, #0]
 80008b6:	6829      	ldr	r1, [r5, #0]
 80008b8:	400b      	ands	r3, r1
 80008ba:	9303      	str	r3, [sp, #12]
 80008bc:	9b03      	ldr	r3, [sp, #12]
 80008be:	497e      	ldr	r1, [pc, #504]	; (8000ab8 <HAL_RCC_OscConfig+0x324>)
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	400b      	ands	r3, r1
 80008c4:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d1d7      	bne.n	800087a <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80008ca:	f7ff fde9 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ce:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d2:	02b6      	lsls	r6, r6, #10
 80008d4:	682b      	ldr	r3, [r5, #0]
 80008d6:	4233      	tst	r3, r6
 80008d8:	d100      	bne.n	80008dc <HAL_RCC_OscConfig+0x148>
 80008da:	e761      	b.n	80007a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008dc:	f7ff fde0 	bl	80004a0 <HAL_GetTick>
 80008e0:	1bc0      	subs	r0, r0, r7
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d9f6      	bls.n	80008d4 <HAL_RCC_OscConfig+0x140>
 80008e6:	e7d6      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008e8:	210c      	movs	r1, #12
 80008ea:	4d6e      	ldr	r5, [pc, #440]	; (8000aa4 <HAL_RCC_OscConfig+0x310>)
 80008ec:	68ea      	ldr	r2, [r5, #12]
 80008ee:	400a      	ands	r2, r1
 80008f0:	2a04      	cmp	r2, #4
 80008f2:	d006      	beq.n	8000902 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008f4:	68eb      	ldr	r3, [r5, #12]
 80008f6:	400b      	ands	r3, r1
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d110      	bne.n	800091e <HAL_RCC_OscConfig+0x18a>
 80008fc:	68eb      	ldr	r3, [r5, #12]
 80008fe:	03db      	lsls	r3, r3, #15
 8000900:	d40d      	bmi.n	800091e <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	075b      	lsls	r3, r3, #29
 8000906:	d502      	bpl.n	800090e <HAL_RCC_OscConfig+0x17a>
 8000908:	68e3      	ldr	r3, [r4, #12]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d1ac      	bne.n	8000868 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090e:	686a      	ldr	r2, [r5, #4]
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	496a      	ldr	r1, [pc, #424]	; (8000abc <HAL_RCC_OscConfig+0x328>)
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	400a      	ands	r2, r1
 8000918:	4313      	orrs	r3, r2
 800091a:	606b      	str	r3, [r5, #4]
 800091c:	e744      	b.n	80007a8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800091e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000920:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000922:	2a00      	cmp	r2, #0
 8000924:	d010      	beq.n	8000948 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000926:	2109      	movs	r1, #9
 8000928:	438b      	bics	r3, r1
 800092a:	4313      	orrs	r3, r2
 800092c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800092e:	f7ff fdb7 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000934:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000936:	682b      	ldr	r3, [r5, #0]
 8000938:	4233      	tst	r3, r6
 800093a:	d1e8      	bne.n	800090e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fdb0 	bl	80004a0 <HAL_GetTick>
 8000940:	1bc0      	subs	r0, r0, r7
 8000942:	2802      	cmp	r0, #2
 8000944:	d9f7      	bls.n	8000936 <HAL_RCC_OscConfig+0x1a2>
 8000946:	e7a6      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8000948:	2201      	movs	r2, #1
 800094a:	4393      	bics	r3, r2
 800094c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094e:	f7ff fda7 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000952:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000954:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	4233      	tst	r3, r6
 800095a:	d100      	bne.n	800095e <HAL_RCC_OscConfig+0x1ca>
 800095c:	e724      	b.n	80007a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800095e:	f7ff fd9f 	bl	80004a0 <HAL_GetTick>
 8000962:	1bc0      	subs	r0, r0, r7
 8000964:	2802      	cmp	r0, #2
 8000966:	d9f6      	bls.n	8000956 <HAL_RCC_OscConfig+0x1c2>
 8000968:	e795      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800096a:	686b      	ldr	r3, [r5, #4]
 800096c:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <HAL_RCC_OscConfig+0x314>)
 800096e:	4013      	ands	r3, r2
 8000970:	4303      	orrs	r3, r0
 8000972:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000974:	686a      	ldr	r2, [r5, #4]
 8000976:	6a23      	ldr	r3, [r4, #32]
 8000978:	0212      	lsls	r2, r2, #8
 800097a:	061b      	lsls	r3, r3, #24
 800097c:	0a12      	lsrs	r2, r2, #8
 800097e:	4313      	orrs	r3, r2
 8000980:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000982:	f7ff fecd 	bl	8000720 <RCC_SetFlashLatencyFromMSIRange>
 8000986:	2800      	cmp	r0, #0
 8000988:	d100      	bne.n	800098c <HAL_RCC_OscConfig+0x1f8>
 800098a:	e735      	b.n	80007f8 <HAL_RCC_OscConfig+0x64>
 800098c:	e76c      	b.n	8000868 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800098e:	69e3      	ldr	r3, [r4, #28]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d020      	beq.n	80009d6 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	682a      	ldr	r2, [r5, #0]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4313      	orrs	r3, r2
 800099c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800099e:	f7ff fd7f 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009a2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009a6:	00b6      	lsls	r6, r6, #2
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	4233      	tst	r3, r6
 80009ac:	d00d      	beq.n	80009ca <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009ae:	686b      	ldr	r3, [r5, #4]
 80009b0:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <HAL_RCC_OscConfig+0x314>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009b6:	4313      	orrs	r3, r2
 80009b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009ba:	686a      	ldr	r2, [r5, #4]
 80009bc:	6a23      	ldr	r3, [r4, #32]
 80009be:	0212      	lsls	r2, r2, #8
 80009c0:	061b      	lsls	r3, r3, #24
 80009c2:	0a12      	lsrs	r2, r2, #8
 80009c4:	4313      	orrs	r3, r2
 80009c6:	606b      	str	r3, [r5, #4]
 80009c8:	e727      	b.n	800081a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009ca:	f7ff fd69 	bl	80004a0 <HAL_GetTick>
 80009ce:	1bc0      	subs	r0, r0, r7
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9e9      	bls.n	80009a8 <HAL_RCC_OscConfig+0x214>
 80009d4:	e75f      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	4a39      	ldr	r2, [pc, #228]	; (8000ac0 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009da:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80009dc:	4013      	ands	r3, r2
 80009de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009e0:	f7ff fd5e 	bl	80004a0 <HAL_GetTick>
 80009e4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009e6:	00b6      	lsls	r6, r6, #2
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	4233      	tst	r3, r6
 80009ec:	d100      	bne.n	80009f0 <HAL_RCC_OscConfig+0x25c>
 80009ee:	e714      	b.n	800081a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009f0:	f7ff fd56 	bl	80004a0 <HAL_GetTick>
 80009f4:	1bc0      	subs	r0, r0, r7
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f6      	bls.n	80009e8 <HAL_RCC_OscConfig+0x254>
 80009fa:	e74c      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009fc:	6962      	ldr	r2, [r4, #20]
 80009fe:	2301      	movs	r3, #1
 8000a00:	4d28      	ldr	r5, [pc, #160]	; (8000aa4 <HAL_RCC_OscConfig+0x310>)
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d010      	beq.n	8000a28 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 8000a06:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a08:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fd47 	bl	80004a0 <HAL_GetTick>
 8000a12:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a16:	4233      	tst	r3, r6
 8000a18:	d000      	beq.n	8000a1c <HAL_RCC_OscConfig+0x288>
 8000a1a:	e702      	b.n	8000822 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a1c:	f7ff fd40 	bl	80004a0 <HAL_GetTick>
 8000a20:	1bc0      	subs	r0, r0, r7
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9f6      	bls.n	8000a14 <HAL_RCC_OscConfig+0x280>
 8000a26:	e736      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000a28:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a2a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a2c:	439a      	bics	r2, r3
 8000a2e:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a30:	f7ff fd36 	bl	80004a0 <HAL_GetTick>
 8000a34:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a38:	4233      	tst	r3, r6
 8000a3a:	d100      	bne.n	8000a3e <HAL_RCC_OscConfig+0x2aa>
 8000a3c:	e6f1      	b.n	8000822 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fd2f 	bl	80004a0 <HAL_GetTick>
 8000a42:	1bc0      	subs	r0, r0, r7
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x2a2>
 8000a48:	e725      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a4c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4e:	4d15      	ldr	r5, [pc, #84]	; (8000aa4 <HAL_RCC_OscConfig+0x310>)
 8000a50:	055b      	lsls	r3, r3, #21
 8000a52:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000a54:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a56:	421a      	tst	r2, r3
 8000a58:	d104      	bne.n	8000a64 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000a60:	2301      	movs	r3, #1
 8000a62:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	2780      	movs	r7, #128	; 0x80
 8000a66:	4e17      	ldr	r6, [pc, #92]	; (8000ac4 <HAL_RCC_OscConfig+0x330>)
 8000a68:	007f      	lsls	r7, r7, #1
 8000a6a:	6833      	ldr	r3, [r6, #0]
 8000a6c:	423b      	tst	r3, r7
 8000a6e:	d008      	beq.n	8000a82 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	68a3      	ldr	r3, [r4, #8]
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d126      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x334>
 8000a7a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	652b      	str	r3, [r5, #80]	; 0x50
 8000a80:	e047      	b.n	8000b12 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a82:	6833      	ldr	r3, [r6, #0]
 8000a84:	433b      	orrs	r3, r7
 8000a86:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a88:	f7ff fd0a 	bl	80004a0 <HAL_GetTick>
 8000a8c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8e:	6833      	ldr	r3, [r6, #0]
 8000a90:	423b      	tst	r3, r7
 8000a92:	d1ed      	bne.n	8000a70 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a94:	f7ff fd04 	bl	80004a0 <HAL_GetTick>
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	1ac0      	subs	r0, r0, r3
 8000a9c:	2864      	cmp	r0, #100	; 0x64
 8000a9e:	d9f6      	bls.n	8000a8e <HAL_RCC_OscConfig+0x2fa>
 8000aa0:	e6f9      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	ffff1fff 	.word	0xffff1fff
 8000aac:	08001b19 	.word	0x08001b19
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	fffeffff 	.word	0xfffeffff
 8000ab8:	fffbffff 	.word	0xfffbffff
 8000abc:	ffffe0ff 	.word	0xffffe0ff
 8000ac0:	fffffeff 	.word	0xfffffeff
 8000ac4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d116      	bne.n	8000afa <HAL_RCC_OscConfig+0x366>
 8000acc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ace:	4a60      	ldr	r2, [pc, #384]	; (8000c50 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad0:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	652b      	str	r3, [r5, #80]	; 0x50
 8000ad6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ad8:	4a5e      	ldr	r2, [pc, #376]	; (8000c54 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ada:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000adc:	4013      	ands	r3, r2
 8000ade:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ae0:	f7ff fcde 	bl	80004a0 <HAL_GetTick>
 8000ae4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ae8:	423b      	tst	r3, r7
 8000aea:	d02a      	beq.n	8000b42 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aec:	f7ff fcd8 	bl	80004a0 <HAL_GetTick>
 8000af0:	4b59      	ldr	r3, [pc, #356]	; (8000c58 <HAL_RCC_OscConfig+0x4c4>)
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d9f6      	bls.n	8000ae6 <HAL_RCC_OscConfig+0x352>
 8000af8:	e6cd      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afa:	21a0      	movs	r1, #160	; 0xa0
 8000afc:	00c9      	lsls	r1, r1, #3
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d10d      	bne.n	8000b1e <HAL_RCC_OscConfig+0x38a>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	652b      	str	r3, [r5, #80]	; 0x50
 8000b0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b12:	f7ff fcc5 	bl	80004a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b16:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000b18:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1a:	00bf      	lsls	r7, r7, #2
 8000b1c:	e00e      	b.n	8000b3c <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b20:	4a4b      	ldr	r2, [pc, #300]	; (8000c50 <HAL_RCC_OscConfig+0x4bc>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	652b      	str	r3, [r5, #80]	; 0x50
 8000b26:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b28:	4a4a      	ldr	r2, [pc, #296]	; (8000c54 <HAL_RCC_OscConfig+0x4c0>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	e7a7      	b.n	8000a7e <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fcb7 	bl	80004a0 <HAL_GetTick>
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <HAL_RCC_OscConfig+0x4c4>)
 8000b34:	1b80      	subs	r0, r0, r6
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d900      	bls.n	8000b3c <HAL_RCC_OscConfig+0x3a8>
 8000b3a:	e6ac      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b3e:	423b      	tst	r3, r7
 8000b40:	d0f5      	beq.n	8000b2e <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000b42:	9b00      	ldr	r3, [sp, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d000      	beq.n	8000b4a <HAL_RCC_OscConfig+0x3b6>
 8000b48:	e66f      	b.n	800082a <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b4c:	4a43      	ldr	r2, [pc, #268]	; (8000c5c <HAL_RCC_OscConfig+0x4c8>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	63ab      	str	r3, [r5, #56]	; 0x38
 8000b52:	e66a      	b.n	800082a <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b54:	69a1      	ldr	r1, [r4, #24]
 8000b56:	2301      	movs	r3, #1
 8000b58:	4d41      	ldr	r5, [pc, #260]	; (8000c60 <HAL_RCC_OscConfig+0x4cc>)
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <HAL_RCC_OscConfig+0x4d0>)
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d018      	beq.n	8000b92 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000b60:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b62:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000b64:	4319      	orrs	r1, r3
 8000b66:	60a9      	str	r1, [r5, #8]
 8000b68:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	636b      	str	r3, [r5, #52]	; 0x34
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	6a11      	ldr	r1, [r2, #32]
 8000b72:	019b      	lsls	r3, r3, #6
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b78:	f7ff fc92 	bl	80004a0 <HAL_GetTick>
 8000b7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b7e:	68ab      	ldr	r3, [r5, #8]
 8000b80:	4233      	tst	r3, r6
 8000b82:	d000      	beq.n	8000b86 <HAL_RCC_OscConfig+0x3f2>
 8000b84:	e655      	b.n	8000832 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b86:	f7ff fc8b 	bl	80004a0 <HAL_GetTick>
 8000b8a:	1bc0      	subs	r0, r0, r7
 8000b8c:	2802      	cmp	r0, #2
 8000b8e:	d9f6      	bls.n	8000b7e <HAL_RCC_OscConfig+0x3ea>
 8000b90:	e681      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000b92:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b94:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000b96:	4399      	bics	r1, r3
 8000b98:	60a9      	str	r1, [r5, #8]
 8000b9a:	6a13      	ldr	r3, [r2, #32]
 8000b9c:	4932      	ldr	r1, [pc, #200]	; (8000c68 <HAL_RCC_OscConfig+0x4d4>)
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fc7d 	bl	80004a0 <HAL_GetTick>
 8000ba6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ba8:	68ab      	ldr	r3, [r5, #8]
 8000baa:	4233      	tst	r3, r6
 8000bac:	d100      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x41c>
 8000bae:	e640      	b.n	8000832 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bb0:	f7ff fc76 	bl	80004a0 <HAL_GetTick>
 8000bb4:	1bc0      	subs	r0, r0, r7
 8000bb6:	2802      	cmp	r0, #2
 8000bb8:	d9f6      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x414>
 8000bba:	e66c      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4d28      	ldr	r5, [pc, #160]	; (8000c60 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bc2:	68eb      	ldr	r3, [r5, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <HAL_RCC_OscConfig+0x438>
 8000bca:	e64e      	b.n	800086a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_RCC_OscConfig+0x4d8>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bd4:	2902      	cmp	r1, #2
 8000bd6:	d12b      	bne.n	8000c30 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fc62 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bdc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bde:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be0:	04b6      	lsls	r6, r6, #18
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	4233      	tst	r3, r6
 8000be6:	d11d      	bne.n	8000c24 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bec:	68ea      	ldr	r2, [r5, #12]
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	491f      	ldr	r1, [pc, #124]	; (8000c70 <HAL_RCC_OscConfig+0x4dc>)
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	682a      	ldr	r2, [r5, #0]
 8000c02:	045b      	lsls	r3, r3, #17
 8000c04:	4313      	orrs	r3, r2
 8000c06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c08:	f7ff fc4a 	bl	80004a0 <HAL_GetTick>
 8000c0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c0e:	04a4      	lsls	r4, r4, #18
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	4223      	tst	r3, r4
 8000c14:	d000      	beq.n	8000c18 <HAL_RCC_OscConfig+0x484>
 8000c16:	e610      	b.n	800083a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c18:	f7ff fc42 	bl	80004a0 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	2802      	cmp	r0, #2
 8000c20:	d9f6      	bls.n	8000c10 <HAL_RCC_OscConfig+0x47c>
 8000c22:	e638      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c24:	f7ff fc3c 	bl	80004a0 <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9d9      	bls.n	8000be2 <HAL_RCC_OscConfig+0x44e>
 8000c2e:	e632      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000c30:	f7ff fc36 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c34:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c36:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c38:	04a4      	lsls	r4, r4, #18
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	4223      	tst	r3, r4
 8000c3e:	d100      	bne.n	8000c42 <HAL_RCC_OscConfig+0x4ae>
 8000c40:	e5fb      	b.n	800083a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c42:	f7ff fc2d 	bl	80004a0 <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d9f6      	bls.n	8000c3a <HAL_RCC_OscConfig+0x4a6>
 8000c4c:	e623      	b.n	8000896 <HAL_RCC_OscConfig+0x102>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	fffffeff 	.word	0xfffffeff
 8000c54:	fffffbff 	.word	0xfffffbff
 8000c58:	00001388 	.word	0x00001388
 8000c5c:	efffffff 	.word	0xefffffff
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000
 8000c68:	ffffdfff 	.word	0xffffdfff
 8000c6c:	feffffff 	.word	0xfeffffff
 8000c70:	ff02ffff 	.word	0xff02ffff

08000c74 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000c74:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000c78:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000c7a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	2a08      	cmp	r2, #8
 8000c80:	d026      	beq.n	8000cd0 <HAL_RCC_GetSysClockFreq+0x5c>
 8000c82:	2a0c      	cmp	r2, #12
 8000c84:	d006      	beq.n	8000c94 <HAL_RCC_GetSysClockFreq+0x20>
 8000c86:	2a04      	cmp	r2, #4
 8000c88:	d11a      	bne.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	06db      	lsls	r3, r3, #27
 8000c8e:	d421      	bmi.n	8000cd4 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000c92:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c94:	028a      	lsls	r2, r1, #10
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c98:	0f12      	lsrs	r2, r2, #28
 8000c9a:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c9c:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c9e:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000ca0:	0f89      	lsrs	r1, r1, #30
 8000ca2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ca4:	03c0      	lsls	r0, r0, #15
 8000ca6:	d504      	bpl.n	8000cb2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000caa:	4350      	muls	r0, r2
 8000cac:	f7ff fa36 	bl	800011c <__udivsi3>
 8000cb0:	e7ef      	b.n	8000c92 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	06db      	lsls	r3, r3, #27
 8000cb6:	d501      	bpl.n	8000cbc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000cba:	e7f6      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x68>)
 8000cbe:	e7f4      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000cc0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000cc2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000cc4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4098      	lsls	r0, r3
 8000cce:	e7e0      	b.n	8000c92 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000cd2:	e7de      	b.n	8000c92 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000cd6:	e7dc      	b.n	8000c92 <HAL_RCC_GetSysClockFreq+0x1e>
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	00f42400 	.word	0x00f42400
 8000ce0:	08001b31 	.word	0x08001b31
 8000ce4:	007a1200 	.word	0x007a1200
 8000ce8:	003d0900 	.word	0x003d0900

08000cec <HAL_RCC_ClockConfig>:
{
 8000cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4c53      	ldr	r4, [pc, #332]	; (8000e40 <HAL_RCC_ClockConfig+0x154>)
{
 8000cf2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cf4:	6823      	ldr	r3, [r4, #0]
{
 8000cf6:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d328      	bcc.n	8000d50 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cfe:	6832      	ldr	r2, [r6, #0]
 8000d00:	0793      	lsls	r3, r2, #30
 8000d02:	d431      	bmi.n	8000d68 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d04:	07d3      	lsls	r3, r2, #31
 8000d06:	d437      	bmi.n	8000d78 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d08:	2301      	movs	r3, #1
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	9901      	ldr	r1, [sp, #4]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	4291      	cmp	r1, r2
 8000d12:	d200      	bcs.n	8000d16 <HAL_RCC_ClockConfig+0x2a>
 8000d14:	e085      	b.n	8000e22 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d16:	6832      	ldr	r2, [r6, #0]
 8000d18:	4c4a      	ldr	r4, [pc, #296]	; (8000e44 <HAL_RCC_ClockConfig+0x158>)
 8000d1a:	0753      	lsls	r3, r2, #29
 8000d1c:	d500      	bpl.n	8000d20 <HAL_RCC_ClockConfig+0x34>
 8000d1e:	e087      	b.n	8000e30 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d20:	0713      	lsls	r3, r2, #28
 8000d22:	d506      	bpl.n	8000d32 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d24:	68e2      	ldr	r2, [r4, #12]
 8000d26:	6933      	ldr	r3, [r6, #16]
 8000d28:	4947      	ldr	r1, [pc, #284]	; (8000e48 <HAL_RCC_ClockConfig+0x15c>)
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d32:	f7ff ff9f 	bl	8000c74 <HAL_RCC_GetSysClockFreq>
 8000d36:	68e3      	ldr	r3, [r4, #12]
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_RCC_ClockConfig+0x160>)
 8000d3a:	061b      	lsls	r3, r3, #24
 8000d3c:	0f1b      	lsrs	r3, r3, #28
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	40d8      	lsrs	r0, r3
 8000d42:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <HAL_RCC_ClockConfig+0x164>)
 8000d44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fb7e 	bl	8000448 <HAL_InitTick>
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e00a      	b.n	8000d66 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	9901      	ldr	r1, [sp, #4]
 8000d54:	4393      	bics	r3, r2
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	9a01      	ldr	r2, [sp, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d0cc      	beq.n	8000cfe <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
}
 8000d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d68:	20f0      	movs	r0, #240	; 0xf0
 8000d6a:	4936      	ldr	r1, [pc, #216]	; (8000e44 <HAL_RCC_ClockConfig+0x158>)
 8000d6c:	68cb      	ldr	r3, [r1, #12]
 8000d6e:	4383      	bics	r3, r0
 8000d70:	68b0      	ldr	r0, [r6, #8]
 8000d72:	4303      	orrs	r3, r0
 8000d74:	60cb      	str	r3, [r1, #12]
 8000d76:	e7c5      	b.n	8000d04 <HAL_RCC_ClockConfig+0x18>
 8000d78:	4d32      	ldr	r5, [pc, #200]	; (8000e44 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7e:	2a02      	cmp	r2, #2
 8000d80:	d119      	bne.n	8000db6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	039b      	lsls	r3, r3, #14
 8000d84:	d5ee      	bpl.n	8000d64 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d86:	2103      	movs	r1, #3
 8000d88:	68eb      	ldr	r3, [r5, #12]
 8000d8a:	438b      	bics	r3, r1
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d90:	f7ff fb86 	bl	80004a0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d94:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d96:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d119      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	68eb      	ldr	r3, [r5, #12]
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d0b0      	beq.n	8000d08 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da6:	f7ff fb7b 	bl	80004a0 <HAL_GetTick>
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_RCC_ClockConfig+0x168>)
 8000dac:	1bc0      	subs	r0, r0, r7
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d9f4      	bls.n	8000d9c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000db2:	2003      	movs	r0, #3
 8000db4:	e7d7      	b.n	8000d66 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db6:	2a03      	cmp	r2, #3
 8000db8:	d102      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dba:	019b      	lsls	r3, r3, #6
 8000dbc:	d4e3      	bmi.n	8000d86 <HAL_RCC_ClockConfig+0x9a>
 8000dbe:	e7d1      	b.n	8000d64 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000dc0:	2a01      	cmp	r2, #1
 8000dc2:	d102      	bne.n	8000dca <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	075b      	lsls	r3, r3, #29
 8000dc6:	d4de      	bmi.n	8000d86 <HAL_RCC_ClockConfig+0x9a>
 8000dc8:	e7cc      	b.n	8000d64 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000dca:	059b      	lsls	r3, r3, #22
 8000dcc:	d4db      	bmi.n	8000d86 <HAL_RCC_ClockConfig+0x9a>
 8000dce:	e7c9      	b.n	8000d64 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d10c      	bne.n	8000dee <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	68eb      	ldr	r3, [r5, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xf4>
 8000dde:	e793      	b.n	8000d08 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de0:	f7ff fb5e 	bl	80004a0 <HAL_GetTick>
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_RCC_ClockConfig+0x168>)
 8000de6:	1bc0      	subs	r0, r0, r7
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d9f3      	bls.n	8000dd4 <HAL_RCC_ClockConfig+0xe8>
 8000dec:	e7e1      	b.n	8000db2 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d011      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000df2:	220c      	movs	r2, #12
 8000df4:	68eb      	ldr	r3, [r5, #12]
 8000df6:	4213      	tst	r3, r2
 8000df8:	d100      	bne.n	8000dfc <HAL_RCC_ClockConfig+0x110>
 8000dfa:	e785      	b.n	8000d08 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfc:	f7ff fb50 	bl	80004a0 <HAL_GetTick>
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_RCC_ClockConfig+0x168>)
 8000e02:	1bc0      	subs	r0, r0, r7
 8000e04:	4298      	cmp	r0, r3
 8000e06:	d9f4      	bls.n	8000df2 <HAL_RCC_ClockConfig+0x106>
 8000e08:	e7d3      	b.n	8000db2 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0a:	f7ff fb49 	bl	80004a0 <HAL_GetTick>
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_RCC_ClockConfig+0x168>)
 8000e10:	1bc0      	subs	r0, r0, r7
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d8cd      	bhi.n	8000db2 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e16:	220c      	movs	r2, #12
 8000e18:	68eb      	ldr	r3, [r5, #12]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d1f4      	bne.n	8000e0a <HAL_RCC_ClockConfig+0x11e>
 8000e20:	e772      	b.n	8000d08 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	6822      	ldr	r2, [r4, #0]
 8000e24:	439a      	bics	r2, r3
 8000e26:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	421a      	tst	r2, r3
 8000e2c:	d19a      	bne.n	8000d64 <HAL_RCC_ClockConfig+0x78>
 8000e2e:	e772      	b.n	8000d16 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e30:	68e3      	ldr	r3, [r4, #12]
 8000e32:	4909      	ldr	r1, [pc, #36]	; (8000e58 <HAL_RCC_ClockConfig+0x16c>)
 8000e34:	400b      	ands	r3, r1
 8000e36:	68f1      	ldr	r1, [r6, #12]
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	60e3      	str	r3, [r4, #12]
 8000e3c:	e770      	b.n	8000d20 <HAL_RCC_ClockConfig+0x34>
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40022000 	.word	0x40022000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	ffffc7ff 	.word	0xffffc7ff
 8000e4c:	08001b19 	.word	0x08001b19
 8000e50:	20000000 	.word	0x20000000
 8000e54:	00001388 	.word	0x00001388
 8000e58:	fffff8ff 	.word	0xfffff8ff

08000e5c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000e5c:	4b01      	ldr	r3, [pc, #4]	; (8000e64 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
}
 8000e60:	4770      	bx	lr
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	055b      	lsls	r3, r3, #21
 8000e70:	0f5b      	lsrs	r3, r3, #29
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e76:	6810      	ldr	r0, [r2, #0]
 8000e78:	40d8      	lsrs	r0, r3
}    
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	08001b29 	.word	0x08001b29
 8000e84:	20000000 	.word	0x20000000

08000e88 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	049b      	lsls	r3, r3, #18
 8000e90:	0f5b      	lsrs	r3, r3, #29
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e96:	6810      	ldr	r0, [r2, #0]
 8000e98:	40d8      	lsrs	r0, r3
} 
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	08001b29 	.word	0x08001b29
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000ea8:	2382      	movs	r3, #130	; 0x82
{
 8000eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000eac:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000eae:	011b      	lsls	r3, r3, #4
{
 8000eb0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000eb2:	421a      	tst	r2, r3
 8000eb4:	d048      	beq.n	8000f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000eb8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	4c65      	ldr	r4, [pc, #404]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000ec0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec2:	421a      	tst	r2, r3
 8000ec4:	d104      	bne.n	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	2780      	movs	r7, #128	; 0x80
 8000ed2:	4e60      	ldr	r6, [pc, #384]	; (8001054 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000ed4:	007f      	lsls	r7, r7, #1
 8000ed6:	6833      	ldr	r3, [r6, #0]
 8000ed8:	423b      	tst	r3, r7
 8000eda:	d077      	beq.n	8000fcc <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000edc:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ede:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ee0:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	0392      	lsls	r2, r2, #14
 8000ee6:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ee8:	4010      	ands	r0, r2
 8000eea:	4283      	cmp	r3, r0
 8000eec:	d103      	bne.n	8000ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000eee:	68a8      	ldr	r0, [r5, #8]
 8000ef0:	4002      	ands	r2, r0
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d009      	beq.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ef6:	23c0      	movs	r3, #192	; 0xc0
 8000ef8:	000a      	movs	r2, r1
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	401a      	ands	r2, r3
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d103      	bne.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8000f02:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8000f04:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000f06:	039b      	lsls	r3, r3, #14
 8000f08:	d471      	bmi.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000f0a:	22c0      	movs	r2, #192	; 0xc0
 8000f0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f0e:	0292      	lsls	r2, r2, #10
 8000f10:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f12:	d000      	beq.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000f14:	e06c      	b.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f16:	6869      	ldr	r1, [r5, #4]
 8000f18:	23c0      	movs	r3, #192	; 0xc0
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	401a      	ands	r2, r3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d107      	bne.n	8000f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	484c      	ldr	r0, [pc, #304]	; (8001058 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8000f28:	4003      	ands	r3, r0
 8000f2a:	20c0      	movs	r0, #192	; 0xc0
 8000f2c:	0380      	lsls	r0, r0, #14
 8000f2e:	4001      	ands	r1, r0
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6023      	str	r3, [r4, #0]
 8000f34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f36:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f38:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f3a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d103      	bne.n	8000f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	07da      	lsls	r2, r3, #31
 8000f4c:	d506      	bpl.n	8000f5c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	493f      	ldr	r1, [pc, #252]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f52:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f54:	4382      	bics	r2, r0
 8000f56:	68e8      	ldr	r0, [r5, #12]
 8000f58:	4302      	orrs	r2, r0
 8000f5a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f5c:	079a      	lsls	r2, r3, #30
 8000f5e:	d506      	bpl.n	8000f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f60:	200c      	movs	r0, #12
 8000f62:	493b      	ldr	r1, [pc, #236]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f64:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f66:	4382      	bics	r2, r0
 8000f68:	6928      	ldr	r0, [r5, #16]
 8000f6a:	4302      	orrs	r2, r0
 8000f6c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f6e:	075a      	lsls	r2, r3, #29
 8000f70:	d506      	bpl.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f72:	4937      	ldr	r1, [pc, #220]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f74:	483a      	ldr	r0, [pc, #232]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000f76:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f78:	4002      	ands	r2, r0
 8000f7a:	6968      	ldr	r0, [r5, #20]
 8000f7c:	4302      	orrs	r2, r0
 8000f7e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f80:	071a      	lsls	r2, r3, #28
 8000f82:	d506      	bpl.n	8000f92 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f84:	4932      	ldr	r1, [pc, #200]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f86:	4837      	ldr	r0, [pc, #220]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8000f88:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f8a:	4002      	ands	r2, r0
 8000f8c:	69a8      	ldr	r0, [r5, #24]
 8000f8e:	4302      	orrs	r2, r0
 8000f90:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f92:	05da      	lsls	r2, r3, #23
 8000f94:	d506      	bpl.n	8000fa4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f96:	492e      	ldr	r1, [pc, #184]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f98:	4833      	ldr	r0, [pc, #204]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8000f9a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f9c:	4002      	ands	r2, r0
 8000f9e:	69e8      	ldr	r0, [r5, #28]
 8000fa0:	4302      	orrs	r2, r0
 8000fa2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000fa4:	065a      	lsls	r2, r3, #25
 8000fa6:	d506      	bpl.n	8000fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fa8:	4929      	ldr	r1, [pc, #164]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000faa:	4830      	ldr	r0, [pc, #192]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8000fac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000fae:	4002      	ands	r2, r0
 8000fb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000fb6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	d518      	bpl.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fbe:	492c      	ldr	r1, [pc, #176]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8000fc0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	6a29      	ldr	r1, [r5, #32]
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	e010      	b.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	433b      	orrs	r3, r7
 8000fd0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fa65 	bl	80004a0 <HAL_GetTick>
 8000fd6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	423b      	tst	r3, r7
 8000fdc:	d000      	beq.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8000fde:	e77d      	b.n	8000edc <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe0:	f7ff fa5e 	bl	80004a0 <HAL_GetTick>
 8000fe4:	9b01      	ldr	r3, [sp, #4]
 8000fe6:	1ac0      	subs	r0, r0, r3
 8000fe8:	2864      	cmp	r0, #100	; 0x64
 8000fea:	d9f5      	bls.n	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8000fec:	2003      	movs	r0, #3
}
 8000fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000ff0:	4011      	ands	r1, r2
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d002      	beq.n	8000ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ff6:	6829      	ldr	r1, [r5, #0]
 8000ff8:	0689      	lsls	r1, r1, #26
 8000ffa:	d408      	bmi.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000ffc:	68a9      	ldr	r1, [r5, #8]
 8000ffe:	400a      	ands	r2, r1
 8001000:	4293      	cmp	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001004:	e787      	b.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001006:	682b      	ldr	r3, [r5, #0]
 8001008:	051b      	lsls	r3, r3, #20
 800100a:	d400      	bmi.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800100c:	e783      	b.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 800100e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001010:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001012:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001014:	0312      	lsls	r2, r2, #12
 8001016:	4302      	orrs	r2, r0
 8001018:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800101a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800101e:	4815      	ldr	r0, [pc, #84]	; (8001074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001020:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001022:	4002      	ands	r2, r0
 8001024:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001026:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001028:	05cb      	lsls	r3, r1, #23
 800102a:	d400      	bmi.n	800102e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800102c:	e773      	b.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 800102e:	f7ff fa37 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001032:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001034:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001036:	00bf      	lsls	r7, r7, #2
 8001038:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800103a:	423b      	tst	r3, r7
 800103c:	d000      	beq.n	8001040 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800103e:	e76a      	b.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001040:	f7ff fa2e 	bl	80004a0 <HAL_GetTick>
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001046:	1b80      	subs	r0, r0, r6
 8001048:	4298      	cmp	r0, r3
 800104a:	d9f5      	bls.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800104c:	e7ce      	b.n	8000fec <HAL_RCCEx_PeriphCLKConfig+0x144>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40021000 	.word	0x40021000
 8001054:	40007000 	.word	0x40007000
 8001058:	ffcfffff 	.word	0xffcfffff
 800105c:	efffffff 	.word	0xefffffff
 8001060:	fffff3ff 	.word	0xfffff3ff
 8001064:	ffffcfff 	.word	0xffffcfff
 8001068:	fffcffff 	.word	0xfffcffff
 800106c:	fbffffff 	.word	0xfbffffff
 8001070:	fff3ffff 	.word	0xfff3ffff
 8001074:	fff7ffff 	.word	0xfff7ffff
 8001078:	00001388 	.word	0x00001388

0800107c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800107e:	2810      	cmp	r0, #16
 8001080:	d100      	bne.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8001082:	e0cd      	b.n	8001220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8001084:	d81e      	bhi.n	80010c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 8001086:	2802      	cmp	r0, #2
 8001088:	d100      	bne.n	800108c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800108a:	e09e      	b.n	80011ca <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 800108c:	d804      	bhi.n	8001098 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800108e:	2801      	cmp	r0, #1
 8001090:	d100      	bne.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001092:	e081      	b.n	8001198 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001094:	2000      	movs	r0, #0
 8001096:	e03b      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 8001098:	2804      	cmp	r0, #4
 800109a:	d100      	bne.n	800109e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 800109c:	e0a6      	b.n	80011ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800109e:	2808      	cmp	r0, #8
 80010a0:	d1f8      	bne.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80010a2:	21c0      	movs	r1, #192	; 0xc0
 80010a4:	4a6a      	ldr	r2, [pc, #424]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80010a6:	0189      	lsls	r1, r1, #6
 80010a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010aa:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80010ac:	d100      	bne.n	80010b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 80010ae:	e091      	b.n	80011d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0189      	lsls	r1, r1, #6
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d100      	bne.n	80010ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80010b8:	e078      	b.n	80011ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d1e8      	bne.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80010c2:	e079      	b.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  switch (PeriphClk)
 80010c4:	2840      	cmp	r0, #64	; 0x40
 80010c6:	d03f      	beq.n	8001148 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80010c8:	d80f      	bhi.n	80010ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80010ca:	2820      	cmp	r0, #32
 80010cc:	d1e2      	bne.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010ce:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010d0:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 80010d2:	495f      	ldr	r1, [pc, #380]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010d4:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 80010d6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010d8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010da:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010dc:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010de:	4282      	cmp	r2, r0
 80010e0:	d10d      	bne.n	80010fe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80010e2:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 80010e4:	0fc0      	lsrs	r0, r0, #31
 80010e6:	03c0      	lsls	r0, r0, #15
 80010e8:	e012      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d100      	bne.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80010f2:	e09d      	b.n	8001230 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4298      	cmp	r0, r3
 80010fa:	d0e8      	beq.n	80010ce <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80010fc:	e7ca      	b.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010fe:	2480      	movs	r4, #128	; 0x80
 8001100:	02a4      	lsls	r4, r4, #10
 8001102:	42a2      	cmp	r2, r4
 8001104:	d105      	bne.n	8001112 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8001106:	2002      	movs	r0, #2
 8001108:	4003      	ands	r3, r0
            frequency = 0U;
 800110a:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800110c:	d000      	beq.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 800110e:	4851      	ldr	r0, [pc, #324]	; (8001254 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
    {
      break;
    }
  }
  return(frequency);
}
 8001110:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8001112:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001114:	42aa      	cmp	r2, r5
 8001116:	d1fb      	bne.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001118:	680b      	ldr	r3, [r1, #0]
 800111a:	4223      	tst	r3, r4
 800111c:	d0f8      	beq.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 800111e:	22c0      	movs	r2, #192	; 0xc0
 8001120:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8001122:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001124:	0392      	lsls	r2, r2, #14
 8001126:	4013      	ands	r3, r2
        switch (clkprediv)
 8001128:	0389      	lsls	r1, r1, #14
 800112a:	428b      	cmp	r3, r1
 800112c:	d008      	beq.n	8001140 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800112e:	4293      	cmp	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001132:	e08a      	b.n	800124a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0352      	lsls	r2, r2, #13
 8001138:	4293      	cmp	r3, r2
 800113a:	d103      	bne.n	8001144 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = HSE_VALUE / 4U;
 800113c:	4846      	ldr	r0, [pc, #280]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            break;
 800113e:	e7e7      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 8U;
 8001140:	4846      	ldr	r0, [pc, #280]	; (800125c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8001142:	e7e5      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 2U;
 8001144:	4846      	ldr	r0, [pc, #280]	; (8001260 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
            break;
 8001146:	e7e3      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8001148:	2080      	movs	r0, #128	; 0x80
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800114c:	04c0      	lsls	r0, r0, #19
 800114e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001150:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8001152:	d11a      	bne.n	800118a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	0192      	lsls	r2, r2, #6
 8001158:	d5da      	bpl.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800115a:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800115c:	4841      	ldr	r0, [pc, #260]	; (8001264 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800115e:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001160:	0292      	lsls	r2, r2, #10
 8001162:	0f12      	lsrs	r2, r2, #28
 8001164:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8001166:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001168:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800116a:	0f89      	lsrs	r1, r1, #30
 800116c:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800116e:	03d2      	lsls	r2, r2, #15
 8001170:	d407      	bmi.n	8001182 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	06db      	lsls	r3, r3, #27
 8001176:	d406      	bmi.n	8001186 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
                    pllvco =  HSI_VALUE;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
            pllvco = (pllvco * pllmul);
 800117a:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800117c:	f7fe ffce 	bl	800011c <__udivsi3>
 8001180:	e7c6      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
                pllvco = HSE_VALUE;
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8001184:	e7f9      	b.n	800117a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
                    pllvco =  (HSI_VALUE >> 2U);
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8001188:	e7f7      	b.n	800117a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800118a:	2202      	movs	r2, #2
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4013      	ands	r3, r2
            frequency = 0U;
 8001190:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8001192:	d0bd      	beq.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSI48_VALUE;
 8001194:	4836      	ldr	r0, [pc, #216]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8001196:	e7bb      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8001198:	2103      	movs	r1, #3
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800119c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800119e:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80011a0:	d102      	bne.n	80011a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK2Freq();
 80011a2:	f7ff fe71 	bl	8000e88 <HAL_RCC_GetPCLK2Freq>
 80011a6:	e7b3      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d103      	bne.n	80011b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	e027      	b.n	8001204 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d102      	bne.n	80011be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = HAL_RCC_GetSysClockFreq();
 80011b8:	f7ff fd5c 	bl	8000c74 <HAL_RCC_GetSysClockFreq>
 80011bc:	e7a8      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = 0U;
 80011be:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d1a5      	bne.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80011c4:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80011c6:	0580      	lsls	r0, r0, #22
 80011c8:	e78c      	b.n	80010e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80011ca:	210c      	movs	r1, #12
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011d0:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80011d2:	d102      	bne.n	80011da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80011d4:	f7ff fe48 	bl	8000e68 <HAL_RCC_GetPCLK1Freq>
 80011d8:	e79a      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d0e6      	beq.n	80011ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d0ea      	beq.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 80011e2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d000      	beq.n	80011ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80011e8:	e792      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80011ea:	e7eb      	b.n	80011c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80011ec:	21c0      	movs	r1, #192	; 0xc0
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011f0:	0109      	lsls	r1, r1, #4
 80011f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011f4:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80011f6:	d0ed      	beq.n	80011d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011f8:	2480      	movs	r4, #128	; 0x80
 80011fa:	0124      	lsls	r4, r4, #4
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	d106      	bne.n	800120e <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	4003      	ands	r3, r0
            frequency = 0U;
 8001204:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001206:	d100      	bne.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8001208:	e782      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HSI_VALUE;
 800120a:	4817      	ldr	r0, [pc, #92]	; (8001268 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 800120c:	e780      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800120e:	2080      	movs	r0, #128	; 0x80
 8001210:	00c0      	lsls	r0, r0, #3
 8001212:	4283      	cmp	r3, r0
 8001214:	d0d0      	beq.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 8001216:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001218:	428b      	cmp	r3, r1
 800121a:	d000      	beq.n	800121e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800121c:	e778      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800121e:	e7d1      	b.n	80011c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001222:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	03db      	lsls	r3, r3, #15
 8001228:	4018      	ands	r0, r3
 800122a:	d100      	bne.n	800122e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800122c:	e770      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800122e:	e7d1      	b.n	80011d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8001230:	21c0      	movs	r1, #192	; 0xc0
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001234:	0289      	lsls	r1, r1, #10
 8001236:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001238:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800123a:	d0cb      	beq.n	80011d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0289      	lsls	r1, r1, #10
 8001240:	428b      	cmp	r3, r1
 8001242:	d0b3      	beq.n	80011ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	0252      	lsls	r2, r2, #9
 8001248:	e739      	b.n	80010be <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800124c:	e760      	b.n	8001110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40021000 	.word	0x40021000
 8001254:	00009088 	.word	0x00009088
 8001258:	001e8480 	.word	0x001e8480
 800125c:	000f4240 	.word	0x000f4240
 8001260:	003d0900 	.word	0x003d0900
 8001264:	08001b31 	.word	0x08001b31
 8001268:	00f42400 	.word	0x00f42400
 800126c:	007a1200 	.word	0x007a1200
 8001270:	02dc6c00 	.word	0x02dc6c00
 8001274:	0007a120 	.word	0x0007a120

08001278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800127c:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800127e:	6882      	ldr	r2, [r0, #8]
 8001280:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001282:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001284:	4302      	orrs	r2, r0
 8001286:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001288:	4e82      	ldr	r6, [pc, #520]	; (8001494 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800128a:	4302      	orrs	r2, r0
 800128c:	69e8      	ldr	r0, [r5, #28]
 800128e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001290:	4881      	ldr	r0, [pc, #516]	; (8001498 <UART_SetConfig+0x220>)
 8001292:	4001      	ands	r1, r0
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4980      	ldr	r1, [pc, #512]	; (800149c <UART_SetConfig+0x224>)
 800129c:	400a      	ands	r2, r1
 800129e:	68e9      	ldr	r1, [r5, #12]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80012a4:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80012a6:	42b3      	cmp	r3, r6
 80012a8:	d001      	beq.n	80012ae <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80012aa:	6a2a      	ldr	r2, [r5, #32]
 80012ac:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	487b      	ldr	r0, [pc, #492]	; (80014a0 <UART_SetConfig+0x228>)
 80012b2:	4002      	ands	r2, r0
 80012b4:	430a      	orrs	r2, r1
 80012b6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012b8:	4a7a      	ldr	r2, [pc, #488]	; (80014a4 <UART_SetConfig+0x22c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d117      	bne.n	80012ee <UART_SetConfig+0x76>
 80012be:	2203      	movs	r2, #3
 80012c0:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <UART_SetConfig+0x230>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4013      	ands	r3, r2
 80012c6:	4a79      	ldr	r2, [pc, #484]	; (80014ac <UART_SetConfig+0x234>)
 80012c8:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff fed6 	bl	800107c <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80012d0:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80012d2:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 80012d4:	42b7      	cmp	r7, r6
 80012d6:	d166      	bne.n	80013a6 <UART_SetConfig+0x12e>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 80012d8:	2c08      	cmp	r4, #8
 80012da:	d900      	bls.n	80012de <UART_SetConfig+0x66>
 80012dc:	e0d7      	b.n	800148e <UART_SetConfig+0x216>
 80012de:	0020      	movs	r0, r4
 80012e0:	f7fe ff12 	bl	8000108 <__gnu_thumb1_case_uqi>
 80012e4:	d539d531 	.word	0xd539d531
 80012e8:	d5d5d559 	.word	0xd5d5d559
 80012ec:	5c          	.byte	0x5c
 80012ed:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012ee:	4a70      	ldr	r2, [pc, #448]	; (80014b0 <UART_SetConfig+0x238>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d105      	bne.n	8001300 <UART_SetConfig+0x88>
 80012f4:	220c      	movs	r2, #12
 80012f6:	4b6c      	ldr	r3, [pc, #432]	; (80014a8 <UART_SetConfig+0x230>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4013      	ands	r3, r2
 80012fc:	4a6d      	ldr	r2, [pc, #436]	; (80014b4 <UART_SetConfig+0x23c>)
 80012fe:	e7e3      	b.n	80012c8 <UART_SetConfig+0x50>
 8001300:	4a6d      	ldr	r2, [pc, #436]	; (80014b8 <UART_SetConfig+0x240>)
 8001302:	2400      	movs	r4, #0
 8001304:	4293      	cmp	r3, r2
 8001306:	d0e0      	beq.n	80012ca <UART_SetConfig+0x52>
 8001308:	4a6c      	ldr	r2, [pc, #432]	; (80014bc <UART_SetConfig+0x244>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d0dd      	beq.n	80012ca <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800130e:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001310:	42b3      	cmp	r3, r6
 8001312:	d1da      	bne.n	80012ca <UART_SetConfig+0x52>
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <UART_SetConfig+0x230>)
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	00c9      	lsls	r1, r1, #3
 8001320:	4013      	ands	r3, r2
 8001322:	3c0c      	subs	r4, #12
 8001324:	428b      	cmp	r3, r1
 8001326:	d0d0      	beq.n	80012ca <UART_SetConfig+0x52>
 8001328:	d804      	bhi.n	8001334 <UART_SetConfig+0xbc>
 800132a:	2400      	movs	r4, #0
 800132c:	42a3      	cmp	r3, r4
 800132e:	d0cc      	beq.n	80012ca <UART_SetConfig+0x52>
 8001330:	2410      	movs	r4, #16
 8001332:	e7ca      	b.n	80012ca <UART_SetConfig+0x52>
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	2402      	movs	r4, #2
 8001338:	0109      	lsls	r1, r1, #4
 800133a:	428b      	cmp	r3, r1
 800133c:	d0c5      	beq.n	80012ca <UART_SetConfig+0x52>
 800133e:	3406      	adds	r4, #6
 8001340:	4293      	cmp	r3, r2
 8001342:	d0c2      	beq.n	80012ca <UART_SetConfig+0x52>
 8001344:	e7f4      	b.n	8001330 <UART_SetConfig+0xb8>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001346:	f7ff fd8f 	bl	8000e68 <HAL_RCC_GetPCLK1Freq>
 800134a:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800134c:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800134e:	42a0      	cmp	r0, r4
 8001350:	d106      	bne.n	8001360 <UART_SetConfig+0xe8>
    }
  }

  return ret;

}
 8001352:	0020      	movs	r0, r4
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <UART_SetConfig+0x230>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	06db      	lsls	r3, r3, #27
 800135c:	d421      	bmi.n	80013a2 <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 800135e:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001360:	2103      	movs	r1, #3
 8001362:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8001364:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001366:	4351      	muls	r1, r2
 8001368:	4299      	cmp	r1, r3
 800136a:	d8f2      	bhi.n	8001352 <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800136c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800136e:	4299      	cmp	r1, r3
 8001370:	d3ef      	bcc.n	8001352 <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8001372:	2700      	movs	r7, #0
 8001374:	0856      	lsrs	r6, r2, #1
 8001376:	0e19      	lsrs	r1, r3, #24
 8001378:	0218      	lsls	r0, r3, #8
 800137a:	1980      	adds	r0, r0, r6
 800137c:	4179      	adcs	r1, r7
 800137e:	003b      	movs	r3, r7
 8001380:	f7fe ff58 	bl	8000234 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <UART_SetConfig+0x24c>)
 8001386:	18c2      	adds	r2, r0, r3
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <UART_SetConfig+0x250>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d8e1      	bhi.n	8001352 <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001392:	2400      	movs	r4, #0
      break;
 8001394:	e7dd      	b.n	8001352 <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001396:	f7ff fc6d 	bl	8000c74 <HAL_RCC_GetSysClockFreq>
 800139a:	e7d6      	b.n	800134a <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	e7de      	b.n	8001360 <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <UART_SetConfig+0x254>)
 80013a4:	e7dc      	b.n	8001360 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	69e9      	ldr	r1, [r5, #28]
 80013aa:	0212      	lsls	r2, r2, #8
 80013ac:	4291      	cmp	r1, r2
 80013ae:	d13f      	bne.n	8001430 <UART_SetConfig+0x1b8>
    switch (clocksource)
 80013b0:	2c08      	cmp	r4, #8
 80013b2:	d83a      	bhi.n	800142a <UART_SetConfig+0x1b2>
 80013b4:	0020      	movs	r0, r4
 80013b6:	f7fe fea7 	bl	8000108 <__gnu_thumb1_case_uqi>
 80013ba:	0f05      	.short	0x0f05
 80013bc:	38303817 	.word	0x38303817
 80013c0:	3838      	.short	0x3838
 80013c2:	33          	.byte	0x33
 80013c3:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 80013c4:	686a      	ldr	r2, [r5, #4]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	0011      	movs	r1, r2
 80013ca:	0850      	lsrs	r0, r2, #1
 80013cc:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013ce:	f7fe fea5 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80013d2:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013d4:	b280      	uxth	r0, r0
      break;
 80013d6:	e016      	b.n	8001406 <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80013d8:	f7ff fd56 	bl	8000e88 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013dc:	686b      	ldr	r3, [r5, #4]
 80013de:	0040      	lsls	r0, r0, #1
 80013e0:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013e2:	18c0      	adds	r0, r0, r3
 80013e4:	6869      	ldr	r1, [r5, #4]
 80013e6:	e7f2      	b.n	80013ce <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <UART_SetConfig+0x230>)
 80013ea:	6869      	ldr	r1, [r5, #4]
 80013ec:	681c      	ldr	r4, [r3, #0]
 80013ee:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013f0:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013f2:	401c      	ands	r4, r3
 80013f4:	d002      	beq.n	80013fc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013f6:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <UART_SetConfig+0x258>)
 80013f8:	18c0      	adds	r0, r0, r3
 80013fa:	e7e8      	b.n	80013ce <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <UART_SetConfig+0x25c>)
 80013fe:	18c0      	adds	r0, r0, r3
 8001400:	f7fe fe8c 	bl	800011c <__udivsi3>
 8001404:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8001406:	230f      	movs	r3, #15
 8001408:	0002      	movs	r2, r0
 800140a:	439a      	bics	r2, r3
 800140c:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800140e:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8001410:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001412:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8001414:	4318      	orrs	r0, r3
 8001416:	60d0      	str	r0, [r2, #12]
 8001418:	e79b      	b.n	8001352 <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800141a:	f7ff fc2b 	bl	8000c74 <HAL_RCC_GetSysClockFreq>
 800141e:	e7dd      	b.n	80013dc <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001420:	686b      	ldr	r3, [r5, #4]
 8001422:	0858      	lsrs	r0, r3, #1
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	e7db      	b.n	80013e2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800142a:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 800142c:	2000      	movs	r0, #0
 800142e:	e7ea      	b.n	8001406 <UART_SetConfig+0x18e>
    switch (clocksource)
 8001430:	2c08      	cmp	r4, #8
 8001432:	d82c      	bhi.n	800148e <UART_SetConfig+0x216>
 8001434:	0020      	movs	r0, r4
 8001436:	f7fe fe67 	bl	8000108 <__gnu_thumb1_case_uqi>
 800143a:	0f05      	.short	0x0f05
 800143c:	2a222a12 	.word	0x2a222a12
 8001440:	2a2a      	.short	0x2a2a
 8001442:	25          	.byte	0x25
 8001443:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001444:	f7ff fd10 	bl	8000e68 <HAL_RCC_GetPCLK1Freq>
 8001448:	6869      	ldr	r1, [r5, #4]
 800144a:	084b      	lsrs	r3, r1, #1
 800144c:	1818      	adds	r0, r3, r0
 800144e:	f7fe fe65 	bl	800011c <__udivsi3>
 8001452:	b280      	uxth	r0, r0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	e79c      	b.n	8001392 <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001458:	f7ff fd16 	bl	8000e88 <HAL_RCC_GetPCLK2Freq>
 800145c:	e7f4      	b.n	8001448 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <UART_SetConfig+0x230>)
 8001460:	6869      	ldr	r1, [r5, #4]
 8001462:	681c      	ldr	r4, [r3, #0]
 8001464:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001466:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001468:	401c      	ands	r4, r3
 800146a:	d001      	beq.n	8001470 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <UART_SetConfig+0x254>)
 800146e:	e7ed      	b.n	800144c <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <UART_SetConfig+0x248>)
 8001472:	18c0      	adds	r0, r0, r3
 8001474:	f7fe fe52 	bl	800011c <__udivsi3>
 8001478:	b280      	uxth	r0, r0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	e769      	b.n	8001352 <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800147e:	f7ff fbf9 	bl	8000c74 <HAL_RCC_GetSysClockFreq>
 8001482:	e7e1      	b.n	8001448 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	6869      	ldr	r1, [r5, #4]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	0848      	lsrs	r0, r1, #1
 800148c:	e7de      	b.n	800144c <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 800148e:	2401      	movs	r4, #1
 8001490:	e75f      	b.n	8001352 <UART_SetConfig+0xda>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	40004800 	.word	0x40004800
 8001498:	efff69f3 	.word	0xefff69f3
 800149c:	ffffcfff 	.word	0xffffcfff
 80014a0:	fffff4ff 	.word	0xfffff4ff
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08001aec 	.word	0x08001aec
 80014b0:	40004400 	.word	0x40004400
 80014b4:	08001af0 	.word	0x08001af0
 80014b8:	40004c00 	.word	0x40004c00
 80014bc:	40005000 	.word	0x40005000
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	fffffd00 	.word	0xfffffd00
 80014c8:	000ffcff 	.word	0x000ffcff
 80014cc:	003d0900 	.word	0x003d0900
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	01e84800 	.word	0x01e84800

080014d8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80014da:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014dc:	07da      	lsls	r2, r3, #31
 80014de:	d506      	bpl.n	80014ee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014e0:	6801      	ldr	r1, [r0, #0]
 80014e2:	4c28      	ldr	r4, [pc, #160]	; (8001584 <UART_AdvFeatureConfig+0xac>)
 80014e4:	684a      	ldr	r2, [r1, #4]
 80014e6:	4022      	ands	r2, r4
 80014e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014ea:	4322      	orrs	r2, r4
 80014ec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80014ee:	079a      	lsls	r2, r3, #30
 80014f0:	d506      	bpl.n	8001500 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80014f2:	6801      	ldr	r1, [r0, #0]
 80014f4:	4c24      	ldr	r4, [pc, #144]	; (8001588 <UART_AdvFeatureConfig+0xb0>)
 80014f6:	684a      	ldr	r2, [r1, #4]
 80014f8:	4022      	ands	r2, r4
 80014fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80014fc:	4322      	orrs	r2, r4
 80014fe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001500:	075a      	lsls	r2, r3, #29
 8001502:	d506      	bpl.n	8001512 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001504:	6801      	ldr	r1, [r0, #0]
 8001506:	4c21      	ldr	r4, [pc, #132]	; (800158c <UART_AdvFeatureConfig+0xb4>)
 8001508:	684a      	ldr	r2, [r1, #4]
 800150a:	4022      	ands	r2, r4
 800150c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800150e:	4322      	orrs	r2, r4
 8001510:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001512:	071a      	lsls	r2, r3, #28
 8001514:	d506      	bpl.n	8001524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001516:	6801      	ldr	r1, [r0, #0]
 8001518:	4c1d      	ldr	r4, [pc, #116]	; (8001590 <UART_AdvFeatureConfig+0xb8>)
 800151a:	684a      	ldr	r2, [r1, #4]
 800151c:	4022      	ands	r2, r4
 800151e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001520:	4322      	orrs	r2, r4
 8001522:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001524:	06da      	lsls	r2, r3, #27
 8001526:	d506      	bpl.n	8001536 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001528:	6801      	ldr	r1, [r0, #0]
 800152a:	4c1a      	ldr	r4, [pc, #104]	; (8001594 <UART_AdvFeatureConfig+0xbc>)
 800152c:	688a      	ldr	r2, [r1, #8]
 800152e:	4022      	ands	r2, r4
 8001530:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001532:	4322      	orrs	r2, r4
 8001534:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001536:	069a      	lsls	r2, r3, #26
 8001538:	d506      	bpl.n	8001548 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800153a:	6801      	ldr	r1, [r0, #0]
 800153c:	4c16      	ldr	r4, [pc, #88]	; (8001598 <UART_AdvFeatureConfig+0xc0>)
 800153e:	688a      	ldr	r2, [r1, #8]
 8001540:	4022      	ands	r2, r4
 8001542:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001544:	4322      	orrs	r2, r4
 8001546:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001548:	065a      	lsls	r2, r3, #25
 800154a:	d510      	bpl.n	800156e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800154c:	6801      	ldr	r1, [r0, #0]
 800154e:	4d13      	ldr	r5, [pc, #76]	; (800159c <UART_AdvFeatureConfig+0xc4>)
 8001550:	684a      	ldr	r2, [r1, #4]
 8001552:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001554:	402a      	ands	r2, r5
 8001556:	4322      	orrs	r2, r4
 8001558:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0352      	lsls	r2, r2, #13
 800155e:	4294      	cmp	r4, r2
 8001560:	d105      	bne.n	800156e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001562:	684a      	ldr	r2, [r1, #4]
 8001564:	4c0e      	ldr	r4, [pc, #56]	; (80015a0 <UART_AdvFeatureConfig+0xc8>)
 8001566:	4022      	ands	r2, r4
 8001568:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800156a:	4322      	orrs	r2, r4
 800156c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	d506      	bpl.n	8001580 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001572:	6802      	ldr	r2, [r0, #0]
 8001574:	490b      	ldr	r1, [pc, #44]	; (80015a4 <UART_AdvFeatureConfig+0xcc>)
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	400b      	ands	r3, r1
 800157a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800157c:	430b      	orrs	r3, r1
 800157e:	6053      	str	r3, [r2, #4]
  }
}
 8001580:	bd30      	pop	{r4, r5, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	fffdffff 	.word	0xfffdffff
 8001588:	fffeffff 	.word	0xfffeffff
 800158c:	fffbffff 	.word	0xfffbffff
 8001590:	ffff7fff 	.word	0xffff7fff
 8001594:	ffffefff 	.word	0xffffefff
 8001598:	ffffdfff 	.word	0xffffdfff
 800159c:	ffefffff 	.word	0xffefffff
 80015a0:	ff9fffff 	.word	0xff9fffff
 80015a4:	fff7ffff 	.word	0xfff7ffff

080015a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	0004      	movs	r4, r0
 80015ac:	000e      	movs	r6, r1
 80015ae:	0015      	movs	r5, r2
 80015b0:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	69d3      	ldr	r3, [r2, #28]
 80015b6:	4033      	ands	r3, r6
 80015b8:	1b9b      	subs	r3, r3, r6
 80015ba:	4259      	negs	r1, r3
 80015bc:	414b      	adcs	r3, r1
 80015be:	42ab      	cmp	r3, r5
 80015c0:	d001      	beq.n	80015c6 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015c2:	2000      	movs	r0, #0
 80015c4:	e018      	b.n	80015f8 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80015c6:	9b06      	ldr	r3, [sp, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	d0f3      	beq.n	80015b4 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015cc:	9b06      	ldr	r3, [sp, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d113      	bne.n	80015fa <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <UART_WaitOnFlagUntilTimeout+0x60>)
 80015d6:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80015d8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	31a3      	adds	r1, #163	; 0xa3
 80015e2:	31ff      	adds	r1, #255	; 0xff
 80015e4:	438a      	bics	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80015e8:	0022      	movs	r2, r4
 80015ea:	2320      	movs	r3, #32
 80015ec:	3269      	adds	r2, #105	; 0x69
 80015ee:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80015f0:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80015f2:	2300      	movs	r3, #0
 80015f4:	3468      	adds	r4, #104	; 0x68
 80015f6:	7023      	strb	r3, [r4, #0]
}
 80015f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015fa:	f7fe ff51 	bl	80004a0 <HAL_GetTick>
 80015fe:	9b06      	ldr	r3, [sp, #24]
 8001600:	1bc0      	subs	r0, r0, r7
 8001602:	4283      	cmp	r3, r0
 8001604:	d2d5      	bcs.n	80015b2 <UART_WaitOnFlagUntilTimeout+0xa>
 8001606:	e7e4      	b.n	80015d2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001608:	fffffe5f 	.word	0xfffffe5f

0800160c <HAL_UART_Transmit>:
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800160e:	0007      	movs	r7, r0
{
 8001610:	b085      	sub	sp, #20
 8001612:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8001614:	3769      	adds	r7, #105	; 0x69
 8001616:	783b      	ldrb	r3, [r7, #0]
{
 8001618:	0004      	movs	r4, r0
 800161a:	000d      	movs	r5, r1
 800161c:	0016      	movs	r6, r2
    return HAL_BUSY;
 800161e:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001620:	2b20      	cmp	r3, #32
 8001622:	d146      	bne.n	80016b2 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8001624:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001626:	2900      	cmp	r1, #0
 8001628:	d043      	beq.n	80016b2 <HAL_UART_Transmit+0xa6>
 800162a:	2a00      	cmp	r2, #0
 800162c:	d041      	beq.n	80016b2 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	68a2      	ldr	r2, [r4, #8]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	429a      	cmp	r2, r3
 8001636:	d104      	bne.n	8001642 <HAL_UART_Transmit+0x36>
 8001638:	6923      	ldr	r3, [r4, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1) != 0)
 800163e:	4201      	tst	r1, r0
 8001640:	d137      	bne.n	80016b2 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001642:	0023      	movs	r3, r4
 8001644:	3368      	adds	r3, #104	; 0x68
 8001646:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001648:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800164a:	2a01      	cmp	r2, #1
 800164c:	d031      	beq.n	80016b2 <HAL_UART_Transmit+0xa6>
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001656:	3321      	adds	r3, #33	; 0x21
 8001658:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800165a:	f7fe ff21 	bl	80004a0 <HAL_GetTick>
    huart->TxXferSize = Size;
 800165e:	0023      	movs	r3, r4
 8001660:	3350      	adds	r3, #80	; 0x50
 8001662:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001664:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001666:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001668:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800166a:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0U)
 800166c:	0021      	movs	r1, r4
 800166e:	3152      	adds	r1, #82	; 0x52
 8001670:	880a      	ldrh	r2, [r1, #0]
 8001672:	b292      	uxth	r2, r2
 8001674:	2a00      	cmp	r2, #0
 8001676:	d10d      	bne.n	8001694 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001678:	9b03      	ldr	r3, [sp, #12]
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	0020      	movs	r0, r4
 8001680:	9b02      	ldr	r3, [sp, #8]
 8001682:	f7ff ff91 	bl	80015a8 <UART_WaitOnFlagUntilTimeout>
 8001686:	2800      	cmp	r0, #0
 8001688:	d112      	bne.n	80016b0 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 800168a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800168c:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800168e:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001690:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001692:	e00e      	b.n	80016b2 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001694:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001696:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169e:	9b03      	ldr	r3, [sp, #12]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	0020      	movs	r0, r4
 80016a6:	9b02      	ldr	r3, [sp, #8]
 80016a8:	f7ff ff7e 	bl	80015a8 <UART_WaitOnFlagUntilTimeout>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80016b0:	2003      	movs	r0, #3
}
 80016b2:	b005      	add	sp, #20
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	42b3      	cmp	r3, r6
 80016bc:	d108      	bne.n	80016d0 <HAL_UART_Transmit+0xc4>
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016c4:	882b      	ldrh	r3, [r5, #0]
        pData += 2U;
 80016c6:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	0ddb      	lsrs	r3, r3, #23
 80016cc:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 80016ce:	e7cd      	b.n	800166c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80016d0:	782b      	ldrb	r3, [r5, #0]
 80016d2:	3501      	adds	r5, #1
 80016d4:	6293      	str	r3, [r2, #40]	; 0x28
 80016d6:	e7c9      	b.n	800166c <HAL_UART_Transmit+0x60>

080016d8 <UART_CheckIdleState>:
{
 80016d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	2600      	movs	r6, #0
{
 80016dc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016de:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80016e0:	f7fe fede 	bl	80004a0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016e4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80016e6:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	071b      	lsls	r3, r3, #28
 80016ec:	d417      	bmi.n	800171e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	075b      	lsls	r3, r3, #29
 80016f4:	d50a      	bpl.n	800170c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <UART_CheckIdleState+0x60>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	03c9      	lsls	r1, r1, #15
 8001700:	002b      	movs	r3, r5
 8001702:	0020      	movs	r0, r4
 8001704:	f7ff ff50 	bl	80015a8 <UART_WaitOnFlagUntilTimeout>
 8001708:	2800      	cmp	r0, #0
 800170a:	d113      	bne.n	8001734 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 800170c:	0022      	movs	r2, r4
 800170e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001710:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001712:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001714:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001716:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001718:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 800171a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800171c:	e00b      	b.n	8001736 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <UART_CheckIdleState+0x60>)
 8001722:	0032      	movs	r2, r6
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	0389      	lsls	r1, r1, #14
 8001728:	0003      	movs	r3, r0
 800172a:	0020      	movs	r0, r4
 800172c:	f7ff ff3c 	bl	80015a8 <UART_WaitOnFlagUntilTimeout>
 8001730:	2800      	cmp	r0, #0
 8001732:	d0dc      	beq.n	80016ee <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
}
 8001736:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001738:	01ffffff 	.word	0x01ffffff

0800173c <HAL_UART_Init>:
{
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001740:	d101      	bne.n	8001746 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
}
 8001744:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001746:	0005      	movs	r5, r0
 8001748:	3569      	adds	r5, #105	; 0x69
 800174a:	782b      	ldrb	r3, [r5, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d104      	bne.n	800175c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001752:	0002      	movs	r2, r0
 8001754:	3268      	adds	r2, #104	; 0x68
 8001756:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001758:	f000 f910 	bl	800197c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800175c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800175e:	2101      	movs	r1, #1
 8001760:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001762:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	438b      	bics	r3, r1
 8001768:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800176a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8001770:	0020      	movs	r0, r4
 8001772:	f7ff feb1 	bl	80014d8 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001776:	0020      	movs	r0, r4
 8001778:	f7ff fd7e 	bl	8001278 <UART_SetConfig>
 800177c:	2801      	cmp	r0, #1
 800177e:	d0e0      	beq.n	8001742 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <HAL_UART_Init+0x68>)
 8001784:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001786:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001788:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800178a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	438a      	bics	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001794:	2201      	movs	r2, #1
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800179c:	f7ff ff9c 	bl	80016d8 <UART_CheckIdleState>
 80017a0:	e7d0      	b.n	8001744 <HAL_UART_Init+0x8>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	ffffb7ff 	.word	0xffffb7ff

080017a8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	4920      	ldr	r1, [pc, #128]	; (800182c <SystemClock_Config+0x84>)
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <SystemClock_Config+0x88>)
 80017ac:	680b      	ldr	r3, [r1, #0]
{
 80017ae:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	401a      	ands	r2, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017ba:	2310      	movs	r3, #16
{
 80017bc:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017c0:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017c2:	3b0f      	subs	r3, #15
 80017c4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017c6:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017c8:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017cc:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017ce:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d0:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d2:	f7fe ffdf 	bl	8000794 <HAL_RCC_OscConfig>
 80017d6:	1e01      	subs	r1, r0, #0
 80017d8:	d000      	beq.n	80017dc <SystemClock_Config+0x34>
 80017da:	e7fe      	b.n	80017da <SystemClock_Config+0x32>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017de:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e4:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ea:	f7ff fa7f 	bl	8000cec <HAL_RCC_ClockConfig>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d000      	beq.n	80017f4 <SystemClock_Config+0x4c>
 80017f2:	e7fe      	b.n	80017f2 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f4:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f6:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017fa:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f7ff fb54 	bl	8000ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	1e04      	subs	r4, r0, #0
 8001802:	d000      	beq.n	8001806 <SystemClock_Config+0x5e>
 8001804:	e7fe      	b.n	8001804 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001806:	f7ff fb29 	bl	8000e5c <HAL_RCC_GetHCLKFreq>
 800180a:	21fa      	movs	r1, #250	; 0xfa
 800180c:	0089      	lsls	r1, r1, #2
 800180e:	f7fe fc85 	bl	800011c <__udivsi3>
 8001812:	f7fe fe85 	bl	8000520 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001816:	2004      	movs	r0, #4
 8001818:	f7fe fe9c 	bl	8000554 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800181c:	2001      	movs	r0, #1
 800181e:	0022      	movs	r2, r4
 8001820:	0021      	movs	r1, r4
 8001822:	4240      	negs	r0, r0
 8001824:	f7fe fe42 	bl	80004ac <HAL_NVIC_SetPriority>
}
 8001828:	b01e      	add	sp, #120	; 0x78
 800182a:	bd10      	pop	{r4, pc}
 800182c:	40007000 	.word	0x40007000
 8001830:	ffffe7ff 	.word	0xffffe7ff

08001834 <main>:
{
 8001834:	b570      	push	{r4, r5, r6, lr}
 8001836:	b088      	sub	sp, #32
  HAL_Init();
 8001838:	f7fe fe1a 	bl	8000470 <HAL_Init>
  SystemClock_Config();
 800183c:	f7ff ffb4 	bl	80017a8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001840:	2004      	movs	r0, #4
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <main+0xc0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4301      	orrs	r1, r0
 800184c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001850:	4e29      	ldr	r6, [pc, #164]	; (80018f8 <main+0xc4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4002      	ands	r2, r0
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185a:	307c      	adds	r0, #124	; 0x7c
 800185c:	4301      	orrs	r1, r0
 800185e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001862:	2120      	movs	r1, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001864:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001866:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800186e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	432a      	orrs	r2, r5
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	402b      	ands	r3, r5
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800187e:	f7fe ff39 	bl	80006f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001882:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001884:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = B1_Pin;
 8001886:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	481c      	ldr	r0, [pc, #112]	; (80018fc <main+0xc8>)
  GPIO_InitStruct.Pin = B1_Pin;
 800188a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001890:	f7fe fe74 	bl	800057c <HAL_GPIO_Init>
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001894:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LD2_Pin;
 8001896:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001898:	a903      	add	r1, sp, #12
 800189a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin;
 800189c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f7fe fe6a 	bl	800057c <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR1_Pin */
  GPIO_InitStruct.Pin = PIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PIR1_GPIO_Port, &GPIO_InitStruct);
 80018a8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = PIR1_Pin;
 80018aa:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(PIR1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	a903      	add	r1, sp, #12
 80018ae:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PIR1_Pin;
 80018b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PIR1_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f7fe fe61 	bl	800057c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018ba:	0022      	movs	r2, r4
 80018bc:	0021      	movs	r1, r4
 80018be:	2007      	movs	r0, #7
 80018c0:	f7fe fdf4 	bl	80004ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018c4:	2007      	movs	r0, #7
 80018c6:	f7fe fe21 	bl	800050c <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <main+0xcc>)
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <main+0xd0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 80018d0:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	23e1      	movs	r3, #225	; 0xe1
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018da:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018dc:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018de:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e2:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e4:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e8:	f7ff ff28 	bl	800173c <HAL_UART_Init>
 80018ec:	42a0      	cmp	r0, r4
 80018ee:	d000      	beq.n	80018f2 <main+0xbe>
 80018f0:	e7fe      	b.n	80018f0 <main+0xbc>
 80018f2:	e7fe      	b.n	80018f2 <main+0xbe>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	10110000 	.word	0x10110000
 80018fc:	50000800 	.word	0x50000800
 8001900:	20000024 	.word	0x20000024
 8001904:	40004400 	.word	0x40004400

08001908 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == B1_Pin || GPIO_Pin == PIR1_Pin)
 8001908:	2380      	movs	r3, #128	; 0x80
{
 800190a:	b510      	push	{r4, lr}
  if (GPIO_Pin == B1_Pin || GPIO_Pin == PIR1_Pin)
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	4298      	cmp	r0, r3
 8001910:	d001      	beq.n	8001916 <HAL_GPIO_EXTI_Callback+0xe>
 8001912:	2840      	cmp	r0, #64	; 0x40
 8001914:	d10a      	bne.n	800192c <HAL_GPIO_EXTI_Callback+0x24>
  {
    /* Toggle LED2 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001916:	20a0      	movs	r0, #160	; 0xa0
 8001918:	2120      	movs	r1, #32
 800191a:	05c0      	lsls	r0, r0, #23
 800191c:	f7fe fef0 	bl	8000700 <HAL_GPIO_TogglePin>

	  char *msg = "Driveway Alarm Activated!\n\r";

	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GPIO_EXTI_Callback+0x28>)
 8001922:	221b      	movs	r2, #27
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <HAL_GPIO_EXTI_Callback+0x30>)
 8001928:	f7ff fe70 	bl	800160c <HAL_UART_Transmit>
  }
}
 800192c:	bd10      	pop	{r4, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	0000ffff 	.word	0x0000ffff
 8001934:	08001afd 	.word	0x08001afd
 8001938:	20000024 	.word	0x20000024

0800193c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193c:	2201      	movs	r2, #1
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_MspInit+0x3c>)
{
 8001940:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001944:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800194e:	0552      	lsls	r2, r2, #21
 8001950:	430a      	orrs	r2, r1
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	4240      	negs	r0, r0
 8001958:	0011      	movs	r1, r2
 800195a:	f7fe fda7 	bl	80004ac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2002      	movs	r0, #2
 8001962:	0011      	movs	r1, r2
 8001964:	4240      	negs	r0, r0
 8001966:	f7fe fda1 	bl	80004ac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2001      	movs	r0, #1
 800196e:	0011      	movs	r1, r2
 8001970:	4240      	negs	r0, r0
 8001972:	f7fe fd9b 	bl	80004ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bd10      	pop	{r4, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_UART_MspInit+0x38>)
 8001980:	6802      	ldr	r2, [r0, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d114      	bne.n	80019b0 <HAL_UART_MspInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_UART_MspInit+0x3c>)
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001990:	430b      	orrs	r3, r1
 8001992:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001994:	230c      	movs	r3, #12
 8001996:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	3b0a      	subs	r3, #10
 800199a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	3303      	adds	r3, #3
 80019a2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80019a6:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80019aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f7fe fde6 	bl	800057c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b0:	b007      	add	sp, #28
 80019b2:	bd00      	pop	{pc}
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40021000 	.word	0x40021000

080019bc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80019bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f7fe fd67 	bl	8000490 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80019c2:	f7fe fdd6 	bl	8000572 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 80019c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019ca:	2040      	movs	r0, #64	; 0x40
 80019cc:	f7fe fe9c 	bl	8000708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019d0:	2080      	movs	r0, #128	; 0x80
 80019d2:	0180      	lsls	r0, r0, #6
 80019d4:	f7fe fe98 	bl	8000708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019d8:	bd10      	pop	{r4, pc}
	...

080019dc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0x44>)
 80019e0:	0052      	lsls	r2, r2, #1
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <SystemInit+0x48>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	490d      	ldr	r1, [pc, #52]	; (8001a28 <SystemInit+0x4c>)
 80019f4:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019f6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80019f8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	438a      	bics	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <SystemInit+0x50>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	4909      	ldr	r1, [pc, #36]	; (8001a30 <SystemInit+0x54>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <SystemInit+0x58>)
 8001a18:	0512      	lsls	r2, r2, #20
 8001a1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a1c:	4770      	bx	lr
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	88ff400c 	.word	0x88ff400c
 8001a28:	fef6fff6 	.word	0xfef6fff6
 8001a2c:	fffbffff 	.word	0xfffbffff
 8001a30:	ff02ffff 	.word	0xff02ffff
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3e:	e003      	b.n	8001a48 <LoopCopyDataInit>

08001a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a46:	3104      	adds	r1, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LoopForever+0xe>)
  adds  r2, r0, r1
 8001a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a50:	d3f6      	bcc.n	8001a40 <CopyDataInit>
  ldr  r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001a54:	e002      	b.n	8001a5c <LoopFillZerobss>

08001a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001a56:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5a:	3204      	adds	r2, #4

08001a5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <LoopForever+0x16>)
  cmp  r2, r3
 8001a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a60:	d3f9      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a62:	f7ff ffbb 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f000 f811 	bl	8001a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7ff fee3 	bl	8001834 <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
   ldr   r0, =_estack
 8001a70:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001a74:	08001b4c 	.word	0x08001b4c
  ldr  r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a7c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001a80:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001a84:	20000094 	.word	0x20000094

08001a88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_COMP_IRQHandler>
	...

08001a8c <__libc_init_array>:
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	2600      	movs	r6, #0
 8001a90:	4d0c      	ldr	r5, [pc, #48]	; (8001ac4 <__libc_init_array+0x38>)
 8001a92:	4c0d      	ldr	r4, [pc, #52]	; (8001ac8 <__libc_init_array+0x3c>)
 8001a94:	1b64      	subs	r4, r4, r5
 8001a96:	10a4      	asrs	r4, r4, #2
 8001a98:	42a6      	cmp	r6, r4
 8001a9a:	d109      	bne.n	8001ab0 <__libc_init_array+0x24>
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	f000 f819 	bl	8001ad4 <_init>
 8001aa2:	4d0a      	ldr	r5, [pc, #40]	; (8001acc <__libc_init_array+0x40>)
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <__libc_init_array+0x44>)
 8001aa6:	1b64      	subs	r4, r4, r5
 8001aa8:	10a4      	asrs	r4, r4, #2
 8001aaa:	42a6      	cmp	r6, r4
 8001aac:	d105      	bne.n	8001aba <__libc_init_array+0x2e>
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	00b3      	lsls	r3, r6, #2
 8001ab2:	58eb      	ldr	r3, [r5, r3]
 8001ab4:	4798      	blx	r3
 8001ab6:	3601      	adds	r6, #1
 8001ab8:	e7ee      	b.n	8001a98 <__libc_init_array+0xc>
 8001aba:	00b3      	lsls	r3, r6, #2
 8001abc:	58eb      	ldr	r3, [r5, r3]
 8001abe:	4798      	blx	r3
 8001ac0:	3601      	adds	r6, #1
 8001ac2:	e7f2      	b.n	8001aaa <__libc_init_array+0x1e>
 8001ac4:	08001b44 	.word	0x08001b44
 8001ac8:	08001b44 	.word	0x08001b44
 8001acc:	08001b44 	.word	0x08001b44
 8001ad0:	08001b48 	.word	0x08001b48

08001ad4 <_init>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr

08001ae0 <_fini>:
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae6:	bc08      	pop	{r3}
 8001ae8:	469e      	mov	lr, r3
 8001aea:	4770      	bx	lr
