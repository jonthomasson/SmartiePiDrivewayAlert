
SmartiePiDrivewayAlert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002570  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002630  08002630  00012630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ec  20000004  080026ac  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f0  080026ac  000200f0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011638  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025a1  00000000  00000000  00031664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d99  00000000  00000000  00033c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000718  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000880  00000000  00000000  000380b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004ce1  00000000  00000000  00038938  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002aa6  00000000  00000000  0003d619  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000400bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000134c  00000000  00000000  0004013c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002618 	.word	0x08002618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002618 	.word	0x08002618

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	b083      	sub	sp, #12
 8000294:	000d      	movs	r5, r1
 8000296:	4692      	mov	sl, r2
 8000298:	4699      	mov	r9, r3
 800029a:	428b      	cmp	r3, r1
 800029c:	d82f      	bhi.n	80002fe <__udivmoddi4+0x7a>
 800029e:	d02c      	beq.n	80002fa <__udivmoddi4+0x76>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ae 	bl	8000404 <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8a9 	bl	8000404 <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	469b      	mov	fp, r3
 80002ba:	d500      	bpl.n	80002be <__udivmoddi4+0x3a>
 80002bc:	e074      	b.n	80003a8 <__udivmoddi4+0x124>
 80002be:	4653      	mov	r3, sl
 80002c0:	465a      	mov	r2, fp
 80002c2:	4093      	lsls	r3, r2
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4642      	mov	r2, r8
 80002ca:	4093      	lsls	r3, r2
 80002cc:	001e      	movs	r6, r3
 80002ce:	42af      	cmp	r7, r5
 80002d0:	d829      	bhi.n	8000326 <__udivmoddi4+0xa2>
 80002d2:	d026      	beq.n	8000322 <__udivmoddi4+0x9e>
 80002d4:	465b      	mov	r3, fp
 80002d6:	1ba4      	subs	r4, r4, r6
 80002d8:	41bd      	sbcs	r5, r7
 80002da:	2b00      	cmp	r3, #0
 80002dc:	da00      	bge.n	80002e0 <__udivmoddi4+0x5c>
 80002de:	e079      	b.n	80003d4 <__udivmoddi4+0x150>
 80002e0:	2200      	movs	r2, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	9200      	str	r2, [sp, #0]
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	465a      	mov	r2, fp
 80002ec:	4093      	lsls	r3, r2
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2301      	movs	r3, #1
 80002f2:	4642      	mov	r2, r8
 80002f4:	4093      	lsls	r3, r2
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	e019      	b.n	800032e <__udivmoddi4+0xaa>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	d9d0      	bls.n	80002a0 <__udivmoddi4+0x1c>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <__udivmoddi4+0x8c>
 800030c:	601c      	str	r4, [r3, #0]
 800030e:	605d      	str	r5, [r3, #4]
 8000310:	9800      	ldr	r0, [sp, #0]
 8000312:	9901      	ldr	r1, [sp, #4]
 8000314:	b003      	add	sp, #12
 8000316:	bc3c      	pop	{r2, r3, r4, r5}
 8000318:	4690      	mov	r8, r2
 800031a:	4699      	mov	r9, r3
 800031c:	46a2      	mov	sl, r4
 800031e:	46ab      	mov	fp, r5
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	42a3      	cmp	r3, r4
 8000324:	d9d6      	bls.n	80002d4 <__udivmoddi4+0x50>
 8000326:	2200      	movs	r2, #0
 8000328:	2300      	movs	r3, #0
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	4643      	mov	r3, r8
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0x82>
 8000334:	07fb      	lsls	r3, r7, #31
 8000336:	0872      	lsrs	r2, r6, #1
 8000338:	431a      	orrs	r2, r3
 800033a:	4646      	mov	r6, r8
 800033c:	087b      	lsrs	r3, r7, #1
 800033e:	e00e      	b.n	800035e <__udivmoddi4+0xda>
 8000340:	42ab      	cmp	r3, r5
 8000342:	d101      	bne.n	8000348 <__udivmoddi4+0xc4>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d80c      	bhi.n	8000362 <__udivmoddi4+0xde>
 8000348:	1aa4      	subs	r4, r4, r2
 800034a:	419d      	sbcs	r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	1924      	adds	r4, r4, r4
 8000350:	416d      	adcs	r5, r5
 8000352:	2100      	movs	r1, #0
 8000354:	3e01      	subs	r6, #1
 8000356:	1824      	adds	r4, r4, r0
 8000358:	414d      	adcs	r5, r1
 800035a:	2e00      	cmp	r6, #0
 800035c:	d006      	beq.n	800036c <__udivmoddi4+0xe8>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d9ee      	bls.n	8000340 <__udivmoddi4+0xbc>
 8000362:	3e01      	subs	r6, #1
 8000364:	1924      	adds	r4, r4, r4
 8000366:	416d      	adcs	r5, r5
 8000368:	2e00      	cmp	r6, #0
 800036a:	d1f8      	bne.n	800035e <__udivmoddi4+0xda>
 800036c:	465b      	mov	r3, fp
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	1900      	adds	r0, r0, r4
 8000374:	4169      	adcs	r1, r5
 8000376:	2b00      	cmp	r3, #0
 8000378:	db22      	blt.n	80003c0 <__udivmoddi4+0x13c>
 800037a:	002b      	movs	r3, r5
 800037c:	465a      	mov	r2, fp
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	4644      	mov	r4, r8
 8000384:	40e2      	lsrs	r2, r4
 8000386:	001c      	movs	r4, r3
 8000388:	465b      	mov	r3, fp
 800038a:	0015      	movs	r5, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	db2c      	blt.n	80003ea <__udivmoddi4+0x166>
 8000390:	0026      	movs	r6, r4
 8000392:	409e      	lsls	r6, r3
 8000394:	0033      	movs	r3, r6
 8000396:	0026      	movs	r6, r4
 8000398:	4647      	mov	r7, r8
 800039a:	40be      	lsls	r6, r7
 800039c:	0032      	movs	r2, r6
 800039e:	1a80      	subs	r0, r0, r2
 80003a0:	4199      	sbcs	r1, r3
 80003a2:	9000      	str	r0, [sp, #0]
 80003a4:	9101      	str	r1, [sp, #4]
 80003a6:	e7ae      	b.n	8000306 <__udivmoddi4+0x82>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	4652      	mov	r2, sl
 80003b0:	40da      	lsrs	r2, r3
 80003b2:	4641      	mov	r1, r8
 80003b4:	0013      	movs	r3, r2
 80003b6:	464a      	mov	r2, r9
 80003b8:	408a      	lsls	r2, r1
 80003ba:	0017      	movs	r7, r2
 80003bc:	431f      	orrs	r7, r3
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x42>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	002a      	movs	r2, r5
 80003c8:	4646      	mov	r6, r8
 80003ca:	409a      	lsls	r2, r3
 80003cc:	0023      	movs	r3, r4
 80003ce:	40f3      	lsrs	r3, r6
 80003d0:	4313      	orrs	r3, r2
 80003d2:	e7d5      	b.n	8000380 <__udivmoddi4+0xfc>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	9100      	str	r1, [sp, #0]
 80003e0:	9201      	str	r2, [sp, #4]
 80003e2:	2201      	movs	r2, #1
 80003e4:	40da      	lsrs	r2, r3
 80003e6:	9201      	str	r2, [sp, #4]
 80003e8:	e782      	b.n	80002f0 <__udivmoddi4+0x6c>
 80003ea:	4642      	mov	r2, r8
 80003ec:	2320      	movs	r3, #32
 80003ee:	0026      	movs	r6, r4
 80003f0:	1a9b      	subs	r3, r3, r2
 80003f2:	40de      	lsrs	r6, r3
 80003f4:	002f      	movs	r7, r5
 80003f6:	46b4      	mov	ip, r6
 80003f8:	4097      	lsls	r7, r2
 80003fa:	4666      	mov	r6, ip
 80003fc:	003b      	movs	r3, r7
 80003fe:	4333      	orrs	r3, r6
 8000400:	e7c9      	b.n	8000396 <__udivmoddi4+0x112>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__clzdi2>:
 8000404:	b510      	push	{r4, lr}
 8000406:	2900      	cmp	r1, #0
 8000408:	d103      	bne.n	8000412 <__clzdi2+0xe>
 800040a:	f000 f807 	bl	800041c <__clzsi2>
 800040e:	3020      	adds	r0, #32
 8000410:	e002      	b.n	8000418 <__clzdi2+0x14>
 8000412:	1c08      	adds	r0, r1, #0
 8000414:	f000 f802 	bl	800041c <__clzsi2>
 8000418:	bd10      	pop	{r4, pc}
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__clzsi2>:
 800041c:	211c      	movs	r1, #28
 800041e:	2301      	movs	r3, #1
 8000420:	041b      	lsls	r3, r3, #16
 8000422:	4298      	cmp	r0, r3
 8000424:	d301      	bcc.n	800042a <__clzsi2+0xe>
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	3910      	subs	r1, #16
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	4298      	cmp	r0, r3
 800042e:	d301      	bcc.n	8000434 <__clzsi2+0x18>
 8000430:	0a00      	lsrs	r0, r0, #8
 8000432:	3908      	subs	r1, #8
 8000434:	091b      	lsrs	r3, r3, #4
 8000436:	4298      	cmp	r0, r3
 8000438:	d301      	bcc.n	800043e <__clzsi2+0x22>
 800043a:	0900      	lsrs	r0, r0, #4
 800043c:	3904      	subs	r1, #4
 800043e:	a202      	add	r2, pc, #8	; (adr r2, 8000448 <__clzsi2+0x2c>)
 8000440:	5c10      	ldrb	r0, [r2, r0]
 8000442:	1840      	adds	r0, r0, r1
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	02020304 	.word	0x02020304
 800044c:	01010101 	.word	0x01010101
	...

08000458 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000458:	21fa      	movs	r1, #250	; 0xfa
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_InitTick+0x24>)
{
 800045c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800045e:	0089      	lsls	r1, r1, #2
{
 8000460:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000462:	6818      	ldr	r0, [r3, #0]
 8000464:	f7ff fe62 	bl	800012c <__udivsi3>
 8000468:	f000 f86e 	bl	8000548 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800046c:	2001      	movs	r0, #1
 800046e:	2200      	movs	r2, #0
 8000470:	0021      	movs	r1, r4
 8000472:	4240      	negs	r0, r0
 8000474:	f000 f82e 	bl	80004d4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000478:	2000      	movs	r0, #0
 800047a:	bd10      	pop	{r4, pc}
 800047c:	20000000 	.word	0x20000000

08000480 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <HAL_Init+0x1c>)
{
 8000484:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000486:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000488:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800048e:	f7ff ffe3 	bl	8000458 <HAL_InitTick>
  HAL_MspInit();
 8000492:	f001 ffc7 	bl	8002424 <HAL_MspInit>
}
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <HAL_IncTick+0xc>)
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000020 	.word	0x20000020

080004b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <HAL_GetTick+0x8>)
 80004b2:	6818      	ldr	r0, [r3, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000020 	.word	0x20000020

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80004bc:	b513      	push	{r0, r1, r4, lr}
 80004be:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80004c0:	f7ff fff6 	bl	80004b0 <HAL_GetTick>
 80004c4:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80004c6:	f7ff fff3 	bl	80004b0 <HAL_GetTick>
 80004ca:	9b01      	ldr	r3, [sp, #4]
 80004cc:	1b00      	subs	r0, r0, r4
 80004ce:	4298      	cmp	r0, r3
 80004d0:	d3f9      	bcc.n	80004c6 <HAL_Delay+0xa>
  {
  }
}
 80004d2:	bd13      	pop	{r0, r1, r4, pc}

080004d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004d8:	2800      	cmp	r0, #0
 80004da:	da14      	bge.n	8000506 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004dc:	230f      	movs	r3, #15
 80004de:	b2c0      	uxtb	r0, r0
 80004e0:	4003      	ands	r3, r0
 80004e2:	3b08      	subs	r3, #8
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <HAL_NVIC_SetPriority+0x58>)
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	189b      	adds	r3, r3, r2
 80004ec:	2203      	movs	r2, #3
 80004ee:	4010      	ands	r0, r2
 80004f0:	4090      	lsls	r0, r2
 80004f2:	32fc      	adds	r2, #252	; 0xfc
 80004f4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004fa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	69dc      	ldr	r4, [r3, #28]
 80004fe:	43ac      	bics	r4, r5
 8000500:	4321      	orrs	r1, r4
 8000502:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000504:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000506:	2503      	movs	r5, #3
 8000508:	0883      	lsrs	r3, r0, #2
 800050a:	4028      	ands	r0, r5
 800050c:	40a8      	lsls	r0, r5
 800050e:	35fc      	adds	r5, #252	; 0xfc
 8000510:	002e      	movs	r6, r5
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_NVIC_SetPriority+0x5c>)
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	189b      	adds	r3, r3, r2
 8000518:	22c0      	movs	r2, #192	; 0xc0
 800051a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800051c:	4029      	ands	r1, r5
 800051e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	589c      	ldr	r4, [r3, r2]
 8000524:	43b4      	bics	r4, r6
 8000526:	4321      	orrs	r1, r4
 8000528:	5099      	str	r1, [r3, r2]
 800052a:	e7eb      	b.n	8000504 <HAL_NVIC_SetPriority+0x30>
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	e000e100 	.word	0xe000e100

08000534 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000534:	231f      	movs	r3, #31
 8000536:	4018      	ands	r0, r3
 8000538:	3b1e      	subs	r3, #30
 800053a:	4083      	lsls	r3, r0
 800053c:	4a01      	ldr	r2, [pc, #4]	; (8000544 <HAL_NVIC_EnableIRQ+0x10>)
 800053e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e100 	.word	0xe000e100

08000548 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <HAL_SYSTICK_Config+0x28>)
 800054a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800054c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054e:	4293      	cmp	r3, r2
 8000550:	d80d      	bhi.n	800056e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000558:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055a:	6a03      	ldr	r3, [r0, #32]
 800055c:	0609      	lsls	r1, r1, #24
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	430b      	orrs	r3, r1
 8000564:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000566:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000568:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056e:	4770      	bx	lr
 8000570:	00ffffff 	.word	0x00ffffff
 8000574:	e000e010 	.word	0xe000e010
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800057e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000580:	2804      	cmp	r0, #4
 8000582:	d102      	bne.n	800058a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000584:	4310      	orrs	r0, r2
 8000586:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000588:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800058a:	2104      	movs	r1, #4
 800058c:	438a      	bics	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	e7fa      	b.n	8000588 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	e000e010 	.word	0xe000e010

08000598 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000598:	4770      	bx	lr

0800059a <HAL_SYSTICK_IRQHandler>:
{
 800059a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800059c:	f7ff fffc 	bl	8000598 <HAL_SYSTICK_Callback>
}
 80005a0:	bd10      	pop	{r4, pc}
	...

080005a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005a6:	4a55      	ldr	r2, [pc, #340]	; (80006fc <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005a8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005aa:	1882      	adds	r2, r0, r2
 80005ac:	1e54      	subs	r4, r2, #1
 80005ae:	41a2      	sbcs	r2, r4
{
 80005b0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005b2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005b4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005b6:	3205      	adds	r2, #5
 80005b8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005ba:	9a01      	ldr	r2, [sp, #4]
 80005bc:	40da      	lsrs	r2, r3
 80005be:	d101      	bne.n	80005c4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005c0:	b005      	add	sp, #20
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005c4:	2501      	movs	r5, #1
 80005c6:	409d      	lsls	r5, r3
 80005c8:	9a01      	ldr	r2, [sp, #4]
 80005ca:	402a      	ands	r2, r5
 80005cc:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005ce:	d100      	bne.n	80005d2 <HAL_GPIO_Init+0x2e>
 80005d0:	e091      	b.n	80006f6 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005d2:	684a      	ldr	r2, [r1, #4]
 80005d4:	4694      	mov	ip, r2
 80005d6:	2210      	movs	r2, #16
 80005d8:	4664      	mov	r4, ip
 80005da:	4394      	bics	r4, r2
 80005dc:	0022      	movs	r2, r4
 80005de:	3c01      	subs	r4, #1
 80005e0:	2a02      	cmp	r2, #2
 80005e2:	d11f      	bne.n	8000624 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005e4:	2407      	movs	r4, #7
 80005e6:	270f      	movs	r7, #15
 80005e8:	401c      	ands	r4, r3
 80005ea:	00a4      	lsls	r4, r4, #2
 80005ec:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005ee:	08da      	lsrs	r2, r3, #3
 80005f0:	0092      	lsls	r2, r2, #2
 80005f2:	1882      	adds	r2, r0, r2
 80005f4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005f6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005f8:	690f      	ldr	r7, [r1, #16]
 80005fa:	40a7      	lsls	r7, r4
 80005fc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005fe:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000600:	2403      	movs	r4, #3
 8000602:	005e      	lsls	r6, r3, #1
 8000604:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000606:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000608:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800060a:	68cc      	ldr	r4, [r1, #12]
 800060c:	40b4      	lsls	r4, r6
 800060e:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000610:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000612:	4662      	mov	r2, ip
 8000614:	06d2      	lsls	r2, r2, #27
 8000616:	0fd2      	lsrs	r2, r2, #31
 8000618:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800061a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800061c:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800061e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000620:	6042      	str	r2, [r0, #4]
 8000622:	e001      	b.n	8000628 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000624:	2c01      	cmp	r4, #1
 8000626:	d9eb      	bls.n	8000600 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000628:	2603      	movs	r6, #3
 800062a:	0034      	movs	r4, r6
 800062c:	005d      	lsls	r5, r3, #1
 800062e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000630:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000632:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000634:	4032      	ands	r2, r6
 8000636:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000638:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800063a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800063e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000640:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000642:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000644:	688a      	ldr	r2, [r1, #8]
 8000646:	40aa      	lsls	r2, r5
 8000648:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800064a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800064c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800064e:	00d2      	lsls	r2, r2, #3
 8000650:	d551      	bpl.n	80006f6 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	2501      	movs	r5, #1
 8000654:	4c2a      	ldr	r4, [pc, #168]	; (8000700 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000656:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800065a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800065c:	001d      	movs	r5, r3
 800065e:	4035      	ands	r5, r6
 8000660:	00ad      	lsls	r5, r5, #2
 8000662:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000664:	6362      	str	r2, [r4, #52]	; 0x34
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000668:	089c      	lsrs	r4, r3, #2
 800066a:	00a4      	lsls	r4, r4, #2
 800066c:	18a4      	adds	r4, r4, r2
 800066e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000670:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000672:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000674:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000676:	05ff      	lsls	r7, r7, #23
 8000678:	2200      	movs	r2, #0
 800067a:	42b8      	cmp	r0, r7
 800067c:	d010      	beq.n	80006a0 <HAL_GPIO_Init+0xfc>
 800067e:	4f22      	ldr	r7, [pc, #136]	; (8000708 <HAL_GPIO_Init+0x164>)
 8000680:	3201      	adds	r2, #1
 8000682:	42b8      	cmp	r0, r7
 8000684:	d00c      	beq.n	80006a0 <HAL_GPIO_Init+0xfc>
 8000686:	4f21      	ldr	r7, [pc, #132]	; (800070c <HAL_GPIO_Init+0x168>)
 8000688:	3201      	adds	r2, #1
 800068a:	42b8      	cmp	r0, r7
 800068c:	d008      	beq.n	80006a0 <HAL_GPIO_Init+0xfc>
 800068e:	4f20      	ldr	r7, [pc, #128]	; (8000710 <HAL_GPIO_Init+0x16c>)
 8000690:	0032      	movs	r2, r6
 8000692:	42b8      	cmp	r0, r7
 8000694:	d004      	beq.n	80006a0 <HAL_GPIO_Init+0xfc>
 8000696:	4e1f      	ldr	r6, [pc, #124]	; (8000714 <HAL_GPIO_Init+0x170>)
 8000698:	3201      	adds	r2, #1
 800069a:	42b0      	cmp	r0, r6
 800069c:	d000      	beq.n	80006a0 <HAL_GPIO_Init+0xfc>
 800069e:	9a03      	ldr	r2, [sp, #12]
 80006a0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006a2:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006a4:	9d02      	ldr	r5, [sp, #8]
 80006a6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006a8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 80006ac:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006ae:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006b0:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006b2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006b4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b6:	03ff      	lsls	r7, r7, #15
 80006b8:	d401      	bmi.n	80006be <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 80006ba:	0035      	movs	r5, r6
 80006bc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006be:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006c0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006c2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006c4:	9d00      	ldr	r5, [sp, #0]
 80006c6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c8:	03bf      	lsls	r7, r7, #14
 80006ca:	d401      	bmi.n	80006d0 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80006cc:	0035      	movs	r5, r6
 80006ce:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006d2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006d4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006d6:	9d00      	ldr	r5, [sp, #0]
 80006d8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006da:	02ff      	lsls	r7, r7, #11
 80006dc:	d401      	bmi.n	80006e2 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80006de:	0035      	movs	r5, r6
 80006e0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e2:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006e4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006e6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006e8:	9e00      	ldr	r6, [sp, #0]
 80006ea:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ec:	02bf      	lsls	r7, r7, #10
 80006ee:	d401      	bmi.n	80006f4 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80006f0:	4025      	ands	r5, r4
 80006f2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006f4:	60d6      	str	r6, [r2, #12]
    position++;
 80006f6:	3301      	adds	r3, #1
 80006f8:	e75f      	b.n	80005ba <HAL_GPIO_Init+0x16>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	afffe400 	.word	0xafffe400
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000
 8000708:	50000400 	.word	0x50000400
 800070c:	50000800 	.word	0x50000800
 8000710:	50000c00 	.word	0x50000c00
 8000714:	50001000 	.word	0x50001000
 8000718:	40010400 	.word	0x40010400

0800071c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800071c:	2a00      	cmp	r2, #0
 800071e:	d001      	beq.n	8000724 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000720:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000722:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000724:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000726:	e7fc      	b.n	8000722 <HAL_GPIO_WritePin+0x6>

08000728 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800072a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	4210      	tst	r0, r2
 8000730:	d002      	beq.n	8000738 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000732:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000734:	f001 fe04 	bl	8002340 <HAL_GPIO_EXTI_Callback>
  }
}
 8000738:	bd10      	pop	{r4, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40010400 	.word	0x40010400

08000740 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000740:	22f0      	movs	r2, #240	; 0xf0
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8000744:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000746:	68d9      	ldr	r1, [r3, #12]
 8000748:	4211      	tst	r1, r2
 800074a:	d00b      	beq.n	8000764 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800074c:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800074e:	2101      	movs	r1, #1
 8000750:	4814      	ldr	r0, [pc, #80]	; (80007a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8000752:	6802      	ldr	r2, [r0, #0]
 8000754:	438a      	bics	r2, r1
 8000756:	431a      	orrs	r2, r3
 8000758:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800075a:	6800      	ldr	r0, [r0, #0]
 800075c:	4008      	ands	r0, r1
 800075e:	4058      	eors	r0, r3
 8000760:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000762:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	22c0      	movs	r2, #192	; 0xc0
 8000768:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800076a:	0549      	lsls	r1, r1, #21
 800076c:	4c0e      	ldr	r4, [pc, #56]	; (80007a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800076e:	0152      	lsls	r2, r2, #5
 8000770:	420d      	tst	r5, r1
 8000772:	d00a      	beq.n	800078a <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	015b      	lsls	r3, r3, #5
 800077c:	429a      	cmp	r2, r3
 800077e:	d1e5      	bne.n	800074c <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8000782:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000784:	4243      	negs	r3, r0
 8000786:	4143      	adcs	r3, r0
 8000788:	e7e1      	b.n	800074e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800078c:	4329      	orrs	r1, r5
 800078e:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000790:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000792:	4c07      	ldr	r4, [pc, #28]	; (80007b0 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000794:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 8000796:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000798:	4021      	ands	r1, r4
 800079a:	6399      	str	r1, [r3, #56]	; 0x38
 800079c:	e7ec      	b.n	8000778 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40022000 	.word	0x40022000
 80007a8:	40007000 	.word	0x40007000
 80007ac:	ffff4000 	.word	0xffff4000
 80007b0:	efffffff 	.word	0xefffffff

080007b4 <HAL_RCC_OscConfig>:
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007b6:	6803      	ldr	r3, [r0, #0]
{
 80007b8:	b085      	sub	sp, #20
 80007ba:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007bc:	07db      	lsls	r3, r3, #31
 80007be:	d44e      	bmi.n	800085e <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	079b      	lsls	r3, r3, #30
 80007c4:	d500      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x14>
 80007c6:	e09f      	b.n	8000908 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	06db      	lsls	r3, r3, #27
 80007cc:	d535      	bpl.n	800083a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80007ce:	230c      	movs	r3, #12
 80007d0:	4dbc      	ldr	r5, [pc, #752]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 80007d2:	68ea      	ldr	r2, [r5, #12]
 80007d4:	421a      	tst	r2, r3
 80007d6:	d000      	beq.n	80007da <HAL_RCC_OscConfig+0x26>
 80007d8:	e0e9      	b.n	80009ae <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	059b      	lsls	r3, r3, #22
 80007de:	d502      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x32>
 80007e0:	69e3      	ldr	r3, [r4, #28]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d050      	beq.n	8000888 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007e6:	22e0      	movs	r2, #224	; 0xe0
 80007e8:	686b      	ldr	r3, [r5, #4]
 80007ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007ec:	0212      	lsls	r2, r2, #8
 80007ee:	4013      	ands	r3, r2
 80007f0:	4298      	cmp	r0, r3
 80007f2:	d800      	bhi.n	80007f6 <HAL_RCC_OscConfig+0x42>
 80007f4:	e0c9      	b.n	800098a <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007f6:	f7ff ffa3 	bl	8000740 <RCC_SetFlashLatencyFromMSIRange>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d144      	bne.n	8000888 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007fe:	686b      	ldr	r3, [r5, #4]
 8000800:	4ab1      	ldr	r2, [pc, #708]	; (8000ac8 <HAL_RCC_OscConfig+0x314>)
 8000802:	4013      	ands	r3, r2
 8000804:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000806:	4313      	orrs	r3, r2
 8000808:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800080a:	686a      	ldr	r2, [r5, #4]
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	0212      	lsls	r2, r2, #8
 8000810:	061b      	lsls	r3, r3, #24
 8000812:	0a12      	lsrs	r2, r2, #8
 8000814:	4313      	orrs	r3, r2
 8000816:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000818:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800081a:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800081c:	0b59      	lsrs	r1, r3, #13
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	3101      	adds	r1, #1
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000826:	0612      	lsls	r2, r2, #24
 8000828:	49a8      	ldr	r1, [pc, #672]	; (8000acc <HAL_RCC_OscConfig+0x318>)
 800082a:	0f12      	lsrs	r2, r2, #28
 800082c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000830:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000832:	4aa7      	ldr	r2, [pc, #668]	; (8000ad0 <HAL_RCC_OscConfig+0x31c>)
 8000834:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000836:	f7ff fe0f 	bl	8000458 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	071b      	lsls	r3, r3, #28
 800083e:	d500      	bpl.n	8000842 <HAL_RCC_OscConfig+0x8e>
 8000840:	e0ec      	b.n	8000a1c <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	075b      	lsls	r3, r3, #29
 8000846:	d500      	bpl.n	800084a <HAL_RCC_OscConfig+0x96>
 8000848:	e10f      	b.n	8000a6a <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	069b      	lsls	r3, r3, #26
 800084e:	d500      	bpl.n	8000852 <HAL_RCC_OscConfig+0x9e>
 8000850:	e190      	b.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000852:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000854:	2900      	cmp	r1, #0
 8000856:	d000      	beq.n	800085a <HAL_RCC_OscConfig+0xa6>
 8000858:	e1c0      	b.n	8000bdc <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 800085a:	2000      	movs	r0, #0
 800085c:	e015      	b.n	800088a <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800085e:	210c      	movs	r1, #12
 8000860:	4d98      	ldr	r5, [pc, #608]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 8000862:	68eb      	ldr	r3, [r5, #12]
 8000864:	400b      	ands	r3, r1
 8000866:	2b08      	cmp	r3, #8
 8000868:	d008      	beq.n	800087c <HAL_RCC_OscConfig+0xc8>
 800086a:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086c:	68ea      	ldr	r2, [r5, #12]
 800086e:	025b      	lsls	r3, r3, #9
 8000870:	400a      	ands	r2, r1
 8000872:	428a      	cmp	r2, r1
 8000874:	d10b      	bne.n	800088e <HAL_RCC_OscConfig+0xda>
 8000876:	68ea      	ldr	r2, [r5, #12]
 8000878:	421a      	tst	r2, r3
 800087a:	d008      	beq.n	800088e <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	039b      	lsls	r3, r3, #14
 8000880:	d59e      	bpl.n	80007c0 <HAL_RCC_OscConfig+0xc>
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d19b      	bne.n	80007c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000888:	2001      	movs	r0, #1
}
 800088a:	b005      	add	sp, #20
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088e:	6862      	ldr	r2, [r4, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d112      	bne.n	80008ba <HAL_RCC_OscConfig+0x106>
 8000894:	682a      	ldr	r2, [r5, #0]
 8000896:	4313      	orrs	r3, r2
 8000898:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800089a:	f7ff fe09 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a2:	02b6      	lsls	r6, r6, #10
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	4233      	tst	r3, r6
 80008a8:	d000      	beq.n	80008ac <HAL_RCC_OscConfig+0xf8>
 80008aa:	e789      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fe00 	bl	80004b0 <HAL_GetTick>
 80008b0:	1bc0      	subs	r0, r0, r7
 80008b2:	2864      	cmp	r0, #100	; 0x64
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e7e7      	b.n	800088a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	21a0      	movs	r1, #160	; 0xa0
 80008bc:	02c9      	lsls	r1, r1, #11
 80008be:	428a      	cmp	r2, r1
 80008c0:	d105      	bne.n	80008ce <HAL_RCC_OscConfig+0x11a>
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	6829      	ldr	r1, [r5, #0]
 80008c6:	02d2      	lsls	r2, r2, #11
 80008c8:	430a      	orrs	r2, r1
 80008ca:	602a      	str	r2, [r5, #0]
 80008cc:	e7e2      	b.n	8000894 <HAL_RCC_OscConfig+0xe0>
 80008ce:	6829      	ldr	r1, [r5, #0]
 80008d0:	4880      	ldr	r0, [pc, #512]	; (8000ad4 <HAL_RCC_OscConfig+0x320>)
 80008d2:	4001      	ands	r1, r0
 80008d4:	6029      	str	r1, [r5, #0]
 80008d6:	6829      	ldr	r1, [r5, #0]
 80008d8:	400b      	ands	r3, r1
 80008da:	9303      	str	r3, [sp, #12]
 80008dc:	9b03      	ldr	r3, [sp, #12]
 80008de:	497e      	ldr	r1, [pc, #504]	; (8000ad8 <HAL_RCC_OscConfig+0x324>)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	400b      	ands	r3, r1
 80008e4:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d1d7      	bne.n	800089a <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80008ea:	f7ff fde1 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ee:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f2:	02b6      	lsls	r6, r6, #10
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	4233      	tst	r3, r6
 80008f8:	d100      	bne.n	80008fc <HAL_RCC_OscConfig+0x148>
 80008fa:	e761      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fc:	f7ff fdd8 	bl	80004b0 <HAL_GetTick>
 8000900:	1bc0      	subs	r0, r0, r7
 8000902:	2864      	cmp	r0, #100	; 0x64
 8000904:	d9f6      	bls.n	80008f4 <HAL_RCC_OscConfig+0x140>
 8000906:	e7d6      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000908:	210c      	movs	r1, #12
 800090a:	4d6e      	ldr	r5, [pc, #440]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 800090c:	68ea      	ldr	r2, [r5, #12]
 800090e:	400a      	ands	r2, r1
 8000910:	2a04      	cmp	r2, #4
 8000912:	d006      	beq.n	8000922 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000914:	68eb      	ldr	r3, [r5, #12]
 8000916:	400b      	ands	r3, r1
 8000918:	428b      	cmp	r3, r1
 800091a:	d110      	bne.n	800093e <HAL_RCC_OscConfig+0x18a>
 800091c:	68eb      	ldr	r3, [r5, #12]
 800091e:	03db      	lsls	r3, r3, #15
 8000920:	d40d      	bmi.n	800093e <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000922:	682b      	ldr	r3, [r5, #0]
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	d502      	bpl.n	800092e <HAL_RCC_OscConfig+0x17a>
 8000928:	68e3      	ldr	r3, [r4, #12]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d1ac      	bne.n	8000888 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092e:	686a      	ldr	r2, [r5, #4]
 8000930:	6923      	ldr	r3, [r4, #16]
 8000932:	496a      	ldr	r1, [pc, #424]	; (8000adc <HAL_RCC_OscConfig+0x328>)
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	400a      	ands	r2, r1
 8000938:	4313      	orrs	r3, r2
 800093a:	606b      	str	r3, [r5, #4]
 800093c:	e744      	b.n	80007c8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800093e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000940:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000942:	2a00      	cmp	r2, #0
 8000944:	d010      	beq.n	8000968 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000946:	2109      	movs	r1, #9
 8000948:	438b      	bics	r3, r1
 800094a:	4313      	orrs	r3, r2
 800094c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094e:	f7ff fdaf 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000952:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000954:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	4233      	tst	r3, r6
 800095a:	d1e8      	bne.n	800092e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800095c:	f7ff fda8 	bl	80004b0 <HAL_GetTick>
 8000960:	1bc0      	subs	r0, r0, r7
 8000962:	2802      	cmp	r0, #2
 8000964:	d9f7      	bls.n	8000956 <HAL_RCC_OscConfig+0x1a2>
 8000966:	e7a6      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8000968:	2201      	movs	r2, #1
 800096a:	4393      	bics	r3, r2
 800096c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800096e:	f7ff fd9f 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000972:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000974:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	4233      	tst	r3, r6
 800097a:	d100      	bne.n	800097e <HAL_RCC_OscConfig+0x1ca>
 800097c:	e724      	b.n	80007c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097e:	f7ff fd97 	bl	80004b0 <HAL_GetTick>
 8000982:	1bc0      	subs	r0, r0, r7
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x1c2>
 8000988:	e795      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800098a:	686b      	ldr	r3, [r5, #4]
 800098c:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <HAL_RCC_OscConfig+0x314>)
 800098e:	4013      	ands	r3, r2
 8000990:	4303      	orrs	r3, r0
 8000992:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000994:	686a      	ldr	r2, [r5, #4]
 8000996:	6a23      	ldr	r3, [r4, #32]
 8000998:	0212      	lsls	r2, r2, #8
 800099a:	061b      	lsls	r3, r3, #24
 800099c:	0a12      	lsrs	r2, r2, #8
 800099e:	4313      	orrs	r3, r2
 80009a0:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009a2:	f7ff fecd 	bl	8000740 <RCC_SetFlashLatencyFromMSIRange>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d100      	bne.n	80009ac <HAL_RCC_OscConfig+0x1f8>
 80009aa:	e735      	b.n	8000818 <HAL_RCC_OscConfig+0x64>
 80009ac:	e76c      	b.n	8000888 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009ae:	69e3      	ldr	r3, [r4, #28]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d020      	beq.n	80009f6 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4313      	orrs	r3, r2
 80009bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009be:	f7ff fd77 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009c2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009c6:	00b6      	lsls	r6, r6, #2
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	4233      	tst	r3, r6
 80009cc:	d00d      	beq.n	80009ea <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009ce:	686b      	ldr	r3, [r5, #4]
 80009d0:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <HAL_RCC_OscConfig+0x314>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d6:	4313      	orrs	r3, r2
 80009d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009da:	686a      	ldr	r2, [r5, #4]
 80009dc:	6a23      	ldr	r3, [r4, #32]
 80009de:	0212      	lsls	r2, r2, #8
 80009e0:	061b      	lsls	r3, r3, #24
 80009e2:	0a12      	lsrs	r2, r2, #8
 80009e4:	4313      	orrs	r3, r2
 80009e6:	606b      	str	r3, [r5, #4]
 80009e8:	e727      	b.n	800083a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009ea:	f7ff fd61 	bl	80004b0 <HAL_GetTick>
 80009ee:	1bc0      	subs	r0, r0, r7
 80009f0:	2802      	cmp	r0, #2
 80009f2:	d9e9      	bls.n	80009c8 <HAL_RCC_OscConfig+0x214>
 80009f4:	e75f      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009fa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80009fc:	4013      	ands	r3, r2
 80009fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fd56 	bl	80004b0 <HAL_GetTick>
 8000a04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000a06:	00b6      	lsls	r6, r6, #2
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	4233      	tst	r3, r6
 8000a0c:	d100      	bne.n	8000a10 <HAL_RCC_OscConfig+0x25c>
 8000a0e:	e714      	b.n	800083a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a10:	f7ff fd4e 	bl	80004b0 <HAL_GetTick>
 8000a14:	1bc0      	subs	r0, r0, r7
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9f6      	bls.n	8000a08 <HAL_RCC_OscConfig+0x254>
 8000a1a:	e74c      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a1c:	6962      	ldr	r2, [r4, #20]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	4d28      	ldr	r5, [pc, #160]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d010      	beq.n	8000a48 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 8000a26:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a28:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fd3f 	bl	80004b0 <HAL_GetTick>
 8000a32:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a34:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a36:	4233      	tst	r3, r6
 8000a38:	d000      	beq.n	8000a3c <HAL_RCC_OscConfig+0x288>
 8000a3a:	e702      	b.n	8000842 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fd38 	bl	80004b0 <HAL_GetTick>
 8000a40:	1bc0      	subs	r0, r0, r7
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x280>
 8000a46:	e736      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000a48:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a4a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a4c:	439a      	bics	r2, r3
 8000a4e:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a50:	f7ff fd2e 	bl	80004b0 <HAL_GetTick>
 8000a54:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a56:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a58:	4233      	tst	r3, r6
 8000a5a:	d100      	bne.n	8000a5e <HAL_RCC_OscConfig+0x2aa>
 8000a5c:	e6f1      	b.n	8000842 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fd27 	bl	80004b0 <HAL_GetTick>
 8000a62:	1bc0      	subs	r0, r0, r7
 8000a64:	2802      	cmp	r0, #2
 8000a66:	d9f6      	bls.n	8000a56 <HAL_RCC_OscConfig+0x2a2>
 8000a68:	e725      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a6a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a6c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a6e:	4d15      	ldr	r5, [pc, #84]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 8000a70:	055b      	lsls	r3, r3, #21
 8000a72:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000a74:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a76:	421a      	tst	r2, r3
 8000a78:	d104      	bne.n	8000a84 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	2780      	movs	r7, #128	; 0x80
 8000a86:	4e17      	ldr	r6, [pc, #92]	; (8000ae4 <HAL_RCC_OscConfig+0x330>)
 8000a88:	007f      	lsls	r7, r7, #1
 8000a8a:	6833      	ldr	r3, [r6, #0]
 8000a8c:	423b      	tst	r3, r7
 8000a8e:	d008      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	68a3      	ldr	r3, [r4, #8]
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d126      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x334>
 8000a9a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	652b      	str	r3, [r5, #80]	; 0x50
 8000aa0:	e047      	b.n	8000b32 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa2:	6833      	ldr	r3, [r6, #0]
 8000aa4:	433b      	orrs	r3, r7
 8000aa6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fd02 	bl	80004b0 <HAL_GetTick>
 8000aac:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	423b      	tst	r3, r7
 8000ab2:	d1ed      	bne.n	8000a90 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab4:	f7ff fcfc 	bl	80004b0 <HAL_GetTick>
 8000ab8:	9b01      	ldr	r3, [sp, #4]
 8000aba:	1ac0      	subs	r0, r0, r3
 8000abc:	2864      	cmp	r0, #100	; 0x64
 8000abe:	d9f6      	bls.n	8000aae <HAL_RCC_OscConfig+0x2fa>
 8000ac0:	e6f9      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	ffff1fff 	.word	0xffff1fff
 8000acc:	08002668 	.word	0x08002668
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	fffeffff 	.word	0xfffeffff
 8000ad8:	fffbffff 	.word	0xfffbffff
 8000adc:	ffffe0ff 	.word	0xffffe0ff
 8000ae0:	fffffeff 	.word	0xfffffeff
 8000ae4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d116      	bne.n	8000b1a <HAL_RCC_OscConfig+0x366>
 8000aec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000aee:	4a60      	ldr	r2, [pc, #384]	; (8000c70 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af0:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af2:	4013      	ands	r3, r2
 8000af4:	652b      	str	r3, [r5, #80]	; 0x50
 8000af6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000af8:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afa:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afc:	4013      	ands	r3, r2
 8000afe:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b00:	f7ff fcd6 	bl	80004b0 <HAL_GetTick>
 8000b04:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b06:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b08:	423b      	tst	r3, r7
 8000b0a:	d02a      	beq.n	8000b62 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fcd0 	bl	80004b0 <HAL_GetTick>
 8000b10:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b12:	1b80      	subs	r0, r0, r6
 8000b14:	4298      	cmp	r0, r3
 8000b16:	d9f6      	bls.n	8000b06 <HAL_RCC_OscConfig+0x352>
 8000b18:	e6cd      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1a:	21a0      	movs	r1, #160	; 0xa0
 8000b1c:	00c9      	lsls	r1, r1, #3
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d10d      	bne.n	8000b3e <HAL_RCC_OscConfig+0x38a>
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	652b      	str	r3, [r5, #80]	; 0x50
 8000b2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b32:	f7ff fcbd 	bl	80004b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b36:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000b38:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3a:	00bf      	lsls	r7, r7, #2
 8000b3c:	e00e      	b.n	8000b5c <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b40:	4a4b      	ldr	r2, [pc, #300]	; (8000c70 <HAL_RCC_OscConfig+0x4bc>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	652b      	str	r3, [r5, #80]	; 0x50
 8000b46:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b48:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <HAL_RCC_OscConfig+0x4c0>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	e7a7      	b.n	8000a9e <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4e:	f7ff fcaf 	bl	80004b0 <HAL_GetTick>
 8000b52:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <HAL_RCC_OscConfig+0x4c4>)
 8000b54:	1b80      	subs	r0, r0, r6
 8000b56:	4298      	cmp	r0, r3
 8000b58:	d900      	bls.n	8000b5c <HAL_RCC_OscConfig+0x3a8>
 8000b5a:	e6ac      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b5c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b5e:	423b      	tst	r3, r7
 8000b60:	d0f5      	beq.n	8000b4e <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000b62:	9b00      	ldr	r3, [sp, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d000      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3b6>
 8000b68:	e66f      	b.n	800084a <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b6c:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <HAL_RCC_OscConfig+0x4c8>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	63ab      	str	r3, [r5, #56]	; 0x38
 8000b72:	e66a      	b.n	800084a <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b74:	69a1      	ldr	r1, [r4, #24]
 8000b76:	2301      	movs	r3, #1
 8000b78:	4d41      	ldr	r5, [pc, #260]	; (8000c80 <HAL_RCC_OscConfig+0x4cc>)
 8000b7a:	4a42      	ldr	r2, [pc, #264]	; (8000c84 <HAL_RCC_OscConfig+0x4d0>)
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d018      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000b80:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b82:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000b84:	4319      	orrs	r1, r3
 8000b86:	60a9      	str	r1, [r5, #8]
 8000b88:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	636b      	str	r3, [r5, #52]	; 0x34
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	6a11      	ldr	r1, [r2, #32]
 8000b92:	019b      	lsls	r3, r3, #6
 8000b94:	430b      	orrs	r3, r1
 8000b96:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b98:	f7ff fc8a 	bl	80004b0 <HAL_GetTick>
 8000b9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b9e:	68ab      	ldr	r3, [r5, #8]
 8000ba0:	4233      	tst	r3, r6
 8000ba2:	d000      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x3f2>
 8000ba4:	e655      	b.n	8000852 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ba6:	f7ff fc83 	bl	80004b0 <HAL_GetTick>
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	2802      	cmp	r0, #2
 8000bae:	d9f6      	bls.n	8000b9e <HAL_RCC_OscConfig+0x3ea>
 8000bb0:	e681      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000bb2:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000bb4:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000bb6:	4399      	bics	r1, r3
 8000bb8:	60a9      	str	r1, [r5, #8]
 8000bba:	6a13      	ldr	r3, [r2, #32]
 8000bbc:	4932      	ldr	r1, [pc, #200]	; (8000c88 <HAL_RCC_OscConfig+0x4d4>)
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fc75 	bl	80004b0 <HAL_GetTick>
 8000bc6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000bc8:	68ab      	ldr	r3, [r5, #8]
 8000bca:	4233      	tst	r3, r6
 8000bcc:	d100      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x41c>
 8000bce:	e640      	b.n	8000852 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bd0:	f7ff fc6e 	bl	80004b0 <HAL_GetTick>
 8000bd4:	1bc0      	subs	r0, r0, r7
 8000bd6:	2802      	cmp	r0, #2
 8000bd8:	d9f6      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x414>
 8000bda:	e66c      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bdc:	220c      	movs	r2, #12
 8000bde:	4d28      	ldr	r5, [pc, #160]	; (8000c80 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be2:	68eb      	ldr	r3, [r5, #12]
 8000be4:	4013      	ands	r3, r2
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d100      	bne.n	8000bec <HAL_RCC_OscConfig+0x438>
 8000bea:	e64e      	b.n	800088a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_RCC_OscConfig+0x4d8>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bf4:	2902      	cmp	r1, #2
 8000bf6:	d12b      	bne.n	8000c50 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fc5a 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bfe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c00:	04b6      	lsls	r6, r6, #18
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	4233      	tst	r3, r6
 8000c06:	d11d      	bne.n	8000c44 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c0c:	68ea      	ldr	r2, [r5, #12]
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	491f      	ldr	r1, [pc, #124]	; (8000c90 <HAL_RCC_OscConfig+0x4dc>)
 8000c12:	400a      	ands	r2, r1
 8000c14:	4313      	orrs	r3, r2
 8000c16:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c18:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	682a      	ldr	r2, [r5, #0]
 8000c22:	045b      	lsls	r3, r3, #17
 8000c24:	4313      	orrs	r3, r2
 8000c26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c28:	f7ff fc42 	bl	80004b0 <HAL_GetTick>
 8000c2c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c2e:	04a4      	lsls	r4, r4, #18
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	4223      	tst	r3, r4
 8000c34:	d000      	beq.n	8000c38 <HAL_RCC_OscConfig+0x484>
 8000c36:	e610      	b.n	800085a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c38:	f7ff fc3a 	bl	80004b0 <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	2802      	cmp	r0, #2
 8000c40:	d9f6      	bls.n	8000c30 <HAL_RCC_OscConfig+0x47c>
 8000c42:	e638      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c44:	f7ff fc34 	bl	80004b0 <HAL_GetTick>
 8000c48:	1bc0      	subs	r0, r0, r7
 8000c4a:	2802      	cmp	r0, #2
 8000c4c:	d9d9      	bls.n	8000c02 <HAL_RCC_OscConfig+0x44e>
 8000c4e:	e632      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000c50:	f7ff fc2e 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c54:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c58:	04a4      	lsls	r4, r4, #18
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	4223      	tst	r3, r4
 8000c5e:	d100      	bne.n	8000c62 <HAL_RCC_OscConfig+0x4ae>
 8000c60:	e5fb      	b.n	800085a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c62:	f7ff fc25 	bl	80004b0 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9f6      	bls.n	8000c5a <HAL_RCC_OscConfig+0x4a6>
 8000c6c:	e623      	b.n	80008b6 <HAL_RCC_OscConfig+0x102>
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	fffffeff 	.word	0xfffffeff
 8000c74:	fffffbff 	.word	0xfffffbff
 8000c78:	00001388 	.word	0x00001388
 8000c7c:	efffffff 	.word	0xefffffff
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	ffffdfff 	.word	0xffffdfff
 8000c8c:	feffffff 	.word	0xfeffffff
 8000c90:	ff02ffff 	.word	0xff02ffff

08000c94 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000c94:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000c98:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000c9a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	2a08      	cmp	r2, #8
 8000ca0:	d026      	beq.n	8000cf0 <HAL_RCC_GetSysClockFreq+0x5c>
 8000ca2:	2a0c      	cmp	r2, #12
 8000ca4:	d006      	beq.n	8000cb4 <HAL_RCC_GetSysClockFreq+0x20>
 8000ca6:	2a04      	cmp	r2, #4
 8000ca8:	d11a      	bne.n	8000ce0 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	06db      	lsls	r3, r3, #27
 8000cae:	d421      	bmi.n	8000cf4 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000cb2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000cb4:	028a      	lsls	r2, r1, #10
 8000cb6:	4812      	ldr	r0, [pc, #72]	; (8000d00 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000cb8:	0f12      	lsrs	r2, r2, #28
 8000cba:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000cbc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cbe:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000cc0:	0f89      	lsrs	r1, r1, #30
 8000cc2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cc4:	03c0      	lsls	r0, r0, #15
 8000cc6:	d504      	bpl.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cca:	4350      	muls	r0, r2
 8000ccc:	f7ff fa2e 	bl	800012c <__udivsi3>
 8000cd0:	e7ef      	b.n	8000cb2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	06db      	lsls	r3, r3, #27
 8000cd6:	d501      	bpl.n	8000cdc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <HAL_RCC_GetSysClockFreq+0x74>)
 8000cda:	e7f6      	b.n	8000cca <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <HAL_RCC_GetSysClockFreq+0x68>)
 8000cde:	e7f4      	b.n	8000cca <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000ce0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000ce2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000ce4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000cea:	3301      	adds	r3, #1
 8000cec:	4098      	lsls	r0, r3
 8000cee:	e7e0      	b.n	8000cb2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <HAL_RCC_GetSysClockFreq+0x70>)
 8000cf2:	e7de      	b.n	8000cb2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000cf6:	e7dc      	b.n	8000cb2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	00f42400 	.word	0x00f42400
 8000d00:	08002680 	.word	0x08002680
 8000d04:	007a1200 	.word	0x007a1200
 8000d08:	003d0900 	.word	0x003d0900

08000d0c <HAL_RCC_ClockConfig>:
{
 8000d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4c53      	ldr	r4, [pc, #332]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
{
 8000d12:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d14:	6823      	ldr	r3, [r4, #0]
{
 8000d16:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d18:	4013      	ands	r3, r2
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d328      	bcc.n	8000d70 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d1e:	6832      	ldr	r2, [r6, #0]
 8000d20:	0793      	lsls	r3, r2, #30
 8000d22:	d431      	bmi.n	8000d88 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d24:	07d3      	lsls	r3, r2, #31
 8000d26:	d437      	bmi.n	8000d98 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d28:	2301      	movs	r3, #1
 8000d2a:	6822      	ldr	r2, [r4, #0]
 8000d2c:	9901      	ldr	r1, [sp, #4]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d200      	bcs.n	8000d36 <HAL_RCC_ClockConfig+0x2a>
 8000d34:	e085      	b.n	8000e42 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d36:	6832      	ldr	r2, [r6, #0]
 8000d38:	4c4a      	ldr	r4, [pc, #296]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
 8000d3a:	0753      	lsls	r3, r2, #29
 8000d3c:	d500      	bpl.n	8000d40 <HAL_RCC_ClockConfig+0x34>
 8000d3e:	e087      	b.n	8000e50 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d40:	0713      	lsls	r3, r2, #28
 8000d42:	d506      	bpl.n	8000d52 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d44:	68e2      	ldr	r2, [r4, #12]
 8000d46:	6933      	ldr	r3, [r6, #16]
 8000d48:	4947      	ldr	r1, [pc, #284]	; (8000e68 <HAL_RCC_ClockConfig+0x15c>)
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d52:	f7ff ff9f 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8000d56:	68e3      	ldr	r3, [r4, #12]
 8000d58:	4a44      	ldr	r2, [pc, #272]	; (8000e6c <HAL_RCC_ClockConfig+0x160>)
 8000d5a:	061b      	lsls	r3, r3, #24
 8000d5c:	0f1b      	lsrs	r3, r3, #28
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	40d8      	lsrs	r0, r3
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_RCC_ClockConfig+0x164>)
 8000d64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fb76 	bl	8000458 <HAL_InitTick>
  return HAL_OK;
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e00a      	b.n	8000d86 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	9901      	ldr	r1, [sp, #4]
 8000d74:	4393      	bics	r3, r2
 8000d76:	430b      	orrs	r3, r1
 8000d78:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	9a01      	ldr	r2, [sp, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d0cc      	beq.n	8000d1e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d88:	20f0      	movs	r0, #240	; 0xf0
 8000d8a:	4936      	ldr	r1, [pc, #216]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
 8000d8c:	68cb      	ldr	r3, [r1, #12]
 8000d8e:	4383      	bics	r3, r0
 8000d90:	68b0      	ldr	r0, [r6, #8]
 8000d92:	4303      	orrs	r3, r0
 8000d94:	60cb      	str	r3, [r1, #12]
 8000d96:	e7c5      	b.n	8000d24 <HAL_RCC_ClockConfig+0x18>
 8000d98:	4d32      	ldr	r5, [pc, #200]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9e:	2a02      	cmp	r2, #2
 8000da0:	d119      	bne.n	8000dd6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	d5ee      	bpl.n	8000d84 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da6:	2103      	movs	r1, #3
 8000da8:	68eb      	ldr	r3, [r5, #12]
 8000daa:	438b      	bics	r3, r1
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000db0:	f7ff fb7e 	bl	80004b0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000db6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d119      	bne.n	8000df0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	68eb      	ldr	r3, [r5, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d0b0      	beq.n	8000d28 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc6:	f7ff fb73 	bl	80004b0 <HAL_GetTick>
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_RCC_ClockConfig+0x168>)
 8000dcc:	1bc0      	subs	r0, r0, r7
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d9f4      	bls.n	8000dbc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	e7d7      	b.n	8000d86 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd6:	2a03      	cmp	r2, #3
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	d4e3      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9a>
 8000dde:	e7d1      	b.n	8000d84 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000de0:	2a01      	cmp	r2, #1
 8000de2:	d102      	bne.n	8000dea <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	d4de      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9a>
 8000de8:	e7cc      	b.n	8000d84 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000dea:	059b      	lsls	r3, r3, #22
 8000dec:	d4db      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x9a>
 8000dee:	e7c9      	b.n	8000d84 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d10c      	bne.n	8000e0e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df4:	220c      	movs	r2, #12
 8000df6:	68eb      	ldr	r3, [r5, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xf4>
 8000dfe:	e793      	b.n	8000d28 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e00:	f7ff fb56 	bl	80004b0 <HAL_GetTick>
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_RCC_ClockConfig+0x168>)
 8000e06:	1bc0      	subs	r0, r0, r7
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	d9f3      	bls.n	8000df4 <HAL_RCC_ClockConfig+0xe8>
 8000e0c:	e7e1      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d011      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e12:	220c      	movs	r2, #12
 8000e14:	68eb      	ldr	r3, [r5, #12]
 8000e16:	4213      	tst	r3, r2
 8000e18:	d100      	bne.n	8000e1c <HAL_RCC_ClockConfig+0x110>
 8000e1a:	e785      	b.n	8000d28 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1c:	f7ff fb48 	bl	80004b0 <HAL_GetTick>
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_RCC_ClockConfig+0x168>)
 8000e22:	1bc0      	subs	r0, r0, r7
 8000e24:	4298      	cmp	r0, r3
 8000e26:	d9f4      	bls.n	8000e12 <HAL_RCC_ClockConfig+0x106>
 8000e28:	e7d3      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2a:	f7ff fb41 	bl	80004b0 <HAL_GetTick>
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_RCC_ClockConfig+0x168>)
 8000e30:	1bc0      	subs	r0, r0, r7
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d8cd      	bhi.n	8000dd2 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e36:	220c      	movs	r2, #12
 8000e38:	68eb      	ldr	r3, [r5, #12]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d1f4      	bne.n	8000e2a <HAL_RCC_ClockConfig+0x11e>
 8000e40:	e772      	b.n	8000d28 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	439a      	bics	r2, r3
 8000e46:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e48:	6822      	ldr	r2, [r4, #0]
 8000e4a:	421a      	tst	r2, r3
 8000e4c:	d19a      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x78>
 8000e4e:	e772      	b.n	8000d36 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e50:	68e3      	ldr	r3, [r4, #12]
 8000e52:	4909      	ldr	r1, [pc, #36]	; (8000e78 <HAL_RCC_ClockConfig+0x16c>)
 8000e54:	400b      	ands	r3, r1
 8000e56:	68f1      	ldr	r1, [r6, #12]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	60e3      	str	r3, [r4, #12]
 8000e5c:	e770      	b.n	8000d40 <HAL_RCC_ClockConfig+0x34>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	ffffc7ff 	.word	0xffffc7ff
 8000e6c:	08002668 	.word	0x08002668
 8000e70:	20000000 	.word	0x20000000
 8000e74:	00001388 	.word	0x00001388
 8000e78:	fffff8ff 	.word	0xfffff8ff

08000e7c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
}
 8000e80:	4770      	bx	lr
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000000 	.word	0x20000000

08000e88 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	055b      	lsls	r3, r3, #21
 8000e90:	0f5b      	lsrs	r3, r3, #29
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e96:	6810      	ldr	r0, [r2, #0]
 8000e98:	40d8      	lsrs	r0, r3
}    
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	08002678 	.word	0x08002678
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	049b      	lsls	r3, r3, #18
 8000eb0:	0f5b      	lsrs	r3, r3, #29
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000eb6:	6810      	ldr	r0, [r2, #0]
 8000eb8:	40d8      	lsrs	r0, r3
} 
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	08002678 	.word	0x08002678
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000ec8:	2382      	movs	r3, #130	; 0x82
{
 8000eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000ecc:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000ece:	011b      	lsls	r3, r3, #4
{
 8000ed0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000ed2:	421a      	tst	r2, r3
 8000ed4:	d048      	beq.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ed8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4c65      	ldr	r4, [pc, #404]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000edc:	055b      	lsls	r3, r3, #21
 8000ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000ee0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	421a      	tst	r2, r3
 8000ee4:	d104      	bne.n	8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000eec:	2301      	movs	r3, #1
 8000eee:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	2780      	movs	r7, #128	; 0x80
 8000ef2:	4e60      	ldr	r6, [pc, #384]	; (8001074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000ef4:	007f      	lsls	r7, r7, #1
 8000ef6:	6833      	ldr	r3, [r6, #0]
 8000ef8:	423b      	tst	r3, r7
 8000efa:	d077      	beq.n	8000fec <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000efc:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000efe:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000f00:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	0392      	lsls	r2, r2, #14
 8000f06:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000f08:	4010      	ands	r0, r2
 8000f0a:	4283      	cmp	r3, r0
 8000f0c:	d103      	bne.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000f0e:	68a8      	ldr	r0, [r5, #8]
 8000f10:	4002      	ands	r2, r0
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d009      	beq.n	8000f2a <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000f16:	23c0      	movs	r3, #192	; 0xc0
 8000f18:	000a      	movs	r2, r1
 8000f1a:	029b      	lsls	r3, r3, #10
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d103      	bne.n	8000f2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8000f22:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8000f24:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000f26:	039b      	lsls	r3, r3, #14
 8000f28:	d471      	bmi.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f2e:	0292      	lsls	r2, r2, #10
 8000f30:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f32:	d000      	beq.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000f34:	e06c      	b.n	8001010 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f36:	6869      	ldr	r1, [r5, #4]
 8000f38:	23c0      	movs	r3, #192	; 0xc0
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	401a      	ands	r2, r3
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d107      	bne.n	8000f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	484c      	ldr	r0, [pc, #304]	; (8001078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8000f48:	4003      	ands	r3, r0
 8000f4a:	20c0      	movs	r0, #192	; 0xc0
 8000f4c:	0380      	lsls	r0, r0, #14
 8000f4e:	4001      	ands	r1, r0
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f56:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f58:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f5a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d103      	bne.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f62:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	07da      	lsls	r2, r3, #31
 8000f6c:	d506      	bpl.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	493f      	ldr	r1, [pc, #252]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f72:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f74:	4382      	bics	r2, r0
 8000f76:	68e8      	ldr	r0, [r5, #12]
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f7c:	079a      	lsls	r2, r3, #30
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f80:	200c      	movs	r0, #12
 8000f82:	493b      	ldr	r1, [pc, #236]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f84:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f86:	4382      	bics	r2, r0
 8000f88:	6928      	ldr	r0, [r5, #16]
 8000f8a:	4302      	orrs	r2, r0
 8000f8c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f8e:	075a      	lsls	r2, r3, #29
 8000f90:	d506      	bpl.n	8000fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f92:	4937      	ldr	r1, [pc, #220]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f94:	483a      	ldr	r0, [pc, #232]	; (8001080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000f96:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f98:	4002      	ands	r2, r0
 8000f9a:	6968      	ldr	r0, [r5, #20]
 8000f9c:	4302      	orrs	r2, r0
 8000f9e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000fa0:	071a      	lsls	r2, r3, #28
 8000fa2:	d506      	bpl.n	8000fb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000fa4:	4932      	ldr	r1, [pc, #200]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fa6:	4837      	ldr	r0, [pc, #220]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8000fa8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000faa:	4002      	ands	r2, r0
 8000fac:	69a8      	ldr	r0, [r5, #24]
 8000fae:	4302      	orrs	r2, r0
 8000fb0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000fb2:	05da      	lsls	r2, r3, #23
 8000fb4:	d506      	bpl.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000fb6:	492e      	ldr	r1, [pc, #184]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fb8:	4833      	ldr	r0, [pc, #204]	; (8001088 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8000fba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000fbc:	4002      	ands	r2, r0
 8000fbe:	69e8      	ldr	r0, [r5, #28]
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000fc4:	065a      	lsls	r2, r3, #25
 8000fc6:	d506      	bpl.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fc8:	4929      	ldr	r1, [pc, #164]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8000fcc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000fce:	4002      	ands	r2, r0
 8000fd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000fd6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	d518      	bpl.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fde:	492c      	ldr	r1, [pc, #176]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8000fe0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	6a29      	ldr	r1, [r5, #32]
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	e010      	b.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	433b      	orrs	r3, r7
 8000ff0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fa5d 	bl	80004b0 <HAL_GetTick>
 8000ff6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	423b      	tst	r3, r7
 8000ffc:	d000      	beq.n	8001000 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8000ffe:	e77d      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001000:	f7ff fa56 	bl	80004b0 <HAL_GetTick>
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	1ac0      	subs	r0, r0, r3
 8001008:	2864      	cmp	r0, #100	; 0x64
 800100a:	d9f5      	bls.n	8000ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 800100c:	2003      	movs	r0, #3
}
 800100e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001010:	4011      	ands	r1, r2
 8001012:	428b      	cmp	r3, r1
 8001014:	d002      	beq.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001016:	6829      	ldr	r1, [r5, #0]
 8001018:	0689      	lsls	r1, r1, #26
 800101a:	d408      	bmi.n	800102e <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800101c:	68a9      	ldr	r1, [r5, #8]
 800101e:	400a      	ands	r2, r1
 8001020:	4293      	cmp	r3, r2
 8001022:	d100      	bne.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001024:	e787      	b.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	d400      	bmi.n	800102e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800102c:	e783      	b.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 800102e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001030:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001032:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001034:	0312      	lsls	r2, r2, #12
 8001036:	4302      	orrs	r2, r0
 8001038:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800103a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001040:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001042:	4002      	ands	r2, r0
 8001044:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001046:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001048:	05cb      	lsls	r3, r1, #23
 800104a:	d400      	bmi.n	800104e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800104c:	e773      	b.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 800104e:	f7ff fa2f 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001052:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001054:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	00bf      	lsls	r7, r7, #2
 8001058:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800105a:	423b      	tst	r3, r7
 800105c:	d000      	beq.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800105e:	e76a      	b.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001060:	f7ff fa26 	bl	80004b0 <HAL_GetTick>
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	4298      	cmp	r0, r3
 800106a:	d9f5      	bls.n	8001058 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800106c:	e7ce      	b.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x144>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	40007000 	.word	0x40007000
 8001078:	ffcfffff 	.word	0xffcfffff
 800107c:	efffffff 	.word	0xefffffff
 8001080:	fffff3ff 	.word	0xfffff3ff
 8001084:	ffffcfff 	.word	0xffffcfff
 8001088:	fffcffff 	.word	0xfffcffff
 800108c:	fbffffff 	.word	0xfbffffff
 8001090:	fff3ffff 	.word	0xfff3ffff
 8001094:	fff7ffff 	.word	0xfff7ffff
 8001098:	00001388 	.word	0x00001388

0800109c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800109c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800109e:	2810      	cmp	r0, #16
 80010a0:	d100      	bne.n	80010a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 80010a2:	e0cd      	b.n	8001240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80010a4:	d81e      	bhi.n	80010e4 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d100      	bne.n	80010ac <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80010aa:	e09e      	b.n	80011ea <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 80010ac:	d804      	bhi.n	80010b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 80010ae:	2801      	cmp	r0, #1
 80010b0:	d100      	bne.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80010b2:	e081      	b.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 80010b4:	2000      	movs	r0, #0
 80010b6:	e03b      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 80010b8:	2804      	cmp	r0, #4
 80010ba:	d100      	bne.n	80010be <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80010bc:	e0a6      	b.n	800120c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80010be:	2808      	cmp	r0, #8
 80010c0:	d1f8      	bne.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80010c2:	21c0      	movs	r1, #192	; 0xc0
 80010c4:	4a6a      	ldr	r2, [pc, #424]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80010c6:	0189      	lsls	r1, r1, #6
 80010c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010ca:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80010cc:	d100      	bne.n	80010d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 80010ce:	e091      	b.n	80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0189      	lsls	r1, r1, #6
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d100      	bne.n	80010da <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80010d8:	e078      	b.n	80011cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d1e8      	bne.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80010e2:	e079      	b.n	80011d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  switch (PeriphClk)
 80010e4:	2840      	cmp	r0, #64	; 0x40
 80010e6:	d03f      	beq.n	8001168 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80010e8:	d80f      	bhi.n	800110a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80010ea:	2820      	cmp	r0, #32
 80010ec:	d1e2      	bne.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010ee:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010f0:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 80010f2:	495f      	ldr	r1, [pc, #380]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010f4:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 80010f6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010f8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010fa:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010fc:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010fe:	4282      	cmp	r2, r0
 8001100:	d10d      	bne.n	800111e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8001102:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 8001104:	0fc0      	lsrs	r0, r0, #31
 8001106:	03c0      	lsls	r0, r0, #15
 8001108:	e012      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4298      	cmp	r0, r3
 8001110:	d100      	bne.n	8001114 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8001112:	e09d      	b.n	8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4298      	cmp	r0, r3
 800111a:	d0e8      	beq.n	80010ee <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800111c:	e7ca      	b.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800111e:	2480      	movs	r4, #128	; 0x80
 8001120:	02a4      	lsls	r4, r4, #10
 8001122:	42a2      	cmp	r2, r4
 8001124:	d105      	bne.n	8001132 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8001126:	2002      	movs	r0, #2
 8001128:	4003      	ands	r3, r0
            frequency = 0U;
 800112a:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800112c:	d000      	beq.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 800112e:	4851      	ldr	r0, [pc, #324]	; (8001274 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
    {
      break;
    }
  }
  return(frequency);
}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8001132:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001134:	42aa      	cmp	r2, r5
 8001136:	d1fb      	bne.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001138:	680b      	ldr	r3, [r1, #0]
 800113a:	4223      	tst	r3, r4
 800113c:	d0f8      	beq.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 800113e:	22c0      	movs	r2, #192	; 0xc0
 8001140:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8001142:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001144:	0392      	lsls	r2, r2, #14
 8001146:	4013      	ands	r3, r2
        switch (clkprediv)
 8001148:	0389      	lsls	r1, r1, #14
 800114a:	428b      	cmp	r3, r1
 800114c:	d008      	beq.n	8001160 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800114e:	4293      	cmp	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001152:	e08a      	b.n	800126a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0352      	lsls	r2, r2, #13
 8001158:	4293      	cmp	r3, r2
 800115a:	d103      	bne.n	8001164 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = HSE_VALUE / 4U;
 800115c:	4846      	ldr	r0, [pc, #280]	; (8001278 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            break;
 800115e:	e7e7      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 8U;
 8001160:	4846      	ldr	r0, [pc, #280]	; (800127c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8001162:	e7e5      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 2U;
 8001164:	4846      	ldr	r0, [pc, #280]	; (8001280 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
            break;
 8001166:	e7e3      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8001168:	2080      	movs	r0, #128	; 0x80
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800116c:	04c0      	lsls	r0, r0, #19
 800116e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001170:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8001172:	d11a      	bne.n	80011aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	0192      	lsls	r2, r2, #6
 8001178:	d5da      	bpl.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800117a:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800117c:	4841      	ldr	r0, [pc, #260]	; (8001284 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800117e:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001180:	0292      	lsls	r2, r2, #10
 8001182:	0f12      	lsrs	r2, r2, #28
 8001184:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8001186:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001188:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800118a:	0f89      	lsrs	r1, r1, #30
 800118c:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800118e:	03d2      	lsls	r2, r2, #15
 8001190:	d407      	bmi.n	80011a2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	06db      	lsls	r3, r3, #27
 8001196:	d406      	bmi.n	80011a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
                    pllvco =  HSI_VALUE;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
            pllvco = (pllvco * pllmul);
 800119a:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800119c:	f7fe ffc6 	bl	800012c <__udivsi3>
 80011a0:	e7c6      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
                pllvco = HSE_VALUE;
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 80011a4:	e7f9      	b.n	800119a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
                    pllvco =  (HSI_VALUE >> 2U);
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80011a8:	e7f7      	b.n	800119a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 80011aa:	2202      	movs	r2, #2
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4013      	ands	r3, r2
            frequency = 0U;
 80011b0:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 80011b2:	d0bd      	beq.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSI48_VALUE;
 80011b4:	4836      	ldr	r0, [pc, #216]	; (8001290 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80011b6:	e7bb      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80011b8:	2103      	movs	r1, #3
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011be:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80011c0:	d102      	bne.n	80011c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK2Freq();
 80011c2:	f7ff fe71 	bl	8000ea8 <HAL_RCC_GetPCLK2Freq>
 80011c6:	e7b3      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d103      	bne.n	80011d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	2204      	movs	r2, #4
 80011d0:	4013      	ands	r3, r2
 80011d2:	e027      	b.n	8001224 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = HAL_RCC_GetSysClockFreq();
 80011d8:	f7ff fd5c 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 80011dc:	e7a8      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = 0U;
 80011de:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d1a5      	bne.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80011e4:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80011e6:	0580      	lsls	r0, r0, #22
 80011e8:	e78c      	b.n	8001104 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80011ea:	210c      	movs	r1, #12
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011f0:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80011f2:	d102      	bne.n	80011fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80011f4:	f7ff fe48 	bl	8000e88 <HAL_RCC_GetPCLK1Freq>
 80011f8:	e79a      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d0e6      	beq.n	80011cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d0ea      	beq.n	80011d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 8001202:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d000      	beq.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8001208:	e792      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800120a:	e7eb      	b.n	80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800120c:	21c0      	movs	r1, #192	; 0xc0
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001210:	0109      	lsls	r1, r1, #4
 8001212:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001214:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8001216:	d0ed      	beq.n	80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001218:	2480      	movs	r4, #128	; 0x80
 800121a:	0124      	lsls	r4, r4, #4
 800121c:	42a3      	cmp	r3, r4
 800121e:	d106      	bne.n	800122e <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	4003      	ands	r3, r0
            frequency = 0U;
 8001224:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001226:	d100      	bne.n	800122a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8001228:	e782      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HSI_VALUE;
 800122a:	4817      	ldr	r0, [pc, #92]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 800122c:	e780      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800122e:	2080      	movs	r0, #128	; 0x80
 8001230:	00c0      	lsls	r0, r0, #3
 8001232:	4283      	cmp	r3, r0
 8001234:	d0d0      	beq.n	80011d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 8001236:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001238:	428b      	cmp	r3, r1
 800123a:	d000      	beq.n	800123e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800123c:	e778      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800123e:	e7d1      	b.n	80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001242:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	03db      	lsls	r3, r3, #15
 8001248:	4018      	ands	r0, r3
 800124a:	d100      	bne.n	800124e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800124c:	e770      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800124e:	e7d1      	b.n	80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8001250:	21c0      	movs	r1, #192	; 0xc0
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001254:	0289      	lsls	r1, r1, #10
 8001256:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001258:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800125a:	d0cb      	beq.n	80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0289      	lsls	r1, r1, #10
 8001260:	428b      	cmp	r3, r1
 8001262:	d0b3      	beq.n	80011cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0252      	lsls	r2, r2, #9
 8001268:	e739      	b.n	80010de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800126c:	e760      	b.n	8001130 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40021000 	.word	0x40021000
 8001274:	00009088 	.word	0x00009088
 8001278:	001e8480 	.word	0x001e8480
 800127c:	000f4240 	.word	0x000f4240
 8001280:	003d0900 	.word	0x003d0900
 8001284:	08002680 	.word	0x08002680
 8001288:	00f42400 	.word	0x00f42400
 800128c:	007a1200 	.word	0x007a1200
 8001290:	02dc6c00 	.word	0x02dc6c00
 8001294:	0007a120 	.word	0x0007a120

08001298 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8001298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800129a:	001d      	movs	r5, r3
 800129c:	0004      	movs	r4, r0
 800129e:	000e      	movs	r6, r1
 80012a0:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012a2:	f7ff f905 	bl	80004b0 <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 80012a6:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80012a8:	0007      	movs	r7, r0
  if(Status == RESET)
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d035      	beq.n	800131a <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	6893      	ldr	r3, [r2, #8]
 80012b2:	4033      	ands	r3, r6
 80012b4:	429e      	cmp	r6, r3
 80012b6:	d135      	bne.n	8001324 <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 80012b8:	1c6b      	adds	r3, r5, #1
 80012ba:	d0f9      	beq.n	80012b0 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012bc:	2d00      	cmp	r5, #0
 80012be:	d009      	beq.n	80012d4 <SPI_WaitOnFlagUntilTimeout+0x3c>
 80012c0:	f7ff f8f6 	bl	80004b0 <HAL_GetTick>
 80012c4:	1bc0      	subs	r0, r0, r7
 80012c6:	4285      	cmp	r5, r0
 80012c8:	d2f1      	bcs.n	80012ae <SPI_WaitOnFlagUntilTimeout+0x16>
 80012ca:	e003      	b.n	80012d4 <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 80012cc:	1c6b      	adds	r3, r5, #1
 80012ce:	d025      	beq.n	800131c <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d11d      	bne.n	8001310 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012d4:	21e0      	movs	r1, #224	; 0xe0
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	438a      	bics	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	39a0      	subs	r1, #160	; 0xa0
 80012e2:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012e4:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 80012e6:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012ea:	0189      	lsls	r1, r1, #6
 80012ec:	428a      	cmp	r2, r1
 80012ee:	d106      	bne.n	80012fe <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <SPI_WaitOnFlagUntilTimeout+0x90>)
 80012f4:	4001      	ands	r1, r0
 80012f6:	6019      	str	r1, [r3, #0]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80012fe:	0023      	movs	r3, r4
 8001300:	2201      	movs	r2, #1
 8001302:	3351      	adds	r3, #81	; 0x51
 8001304:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8001306:	2300      	movs	r3, #0
 8001308:	3450      	adds	r4, #80	; 0x50
 800130a:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 800130c:	2003      	movs	r0, #3
 800130e:	e00a      	b.n	8001326 <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001310:	f7ff f8ce 	bl	80004b0 <HAL_GetTick>
 8001314:	1bc0      	subs	r0, r0, r7
 8001316:	4285      	cmp	r5, r0
 8001318:	d3dc      	bcc.n	80012d4 <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800131a:	6822      	ldr	r2, [r4, #0]
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	4033      	ands	r3, r6
 8001320:	429e      	cmp	r6, r3
 8001322:	d1d3      	bne.n	80012cc <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8001324:	2000      	movs	r0, #0
}
 8001326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001328:	ffffdfff 	.word	0xffffdfff

0800132c <HAL_SPI_Init>:
{
 800132c:	b570      	push	{r4, r5, r6, lr}
 800132e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
  if(hspi == NULL)
 8001332:	2c00      	cmp	r4, #0
 8001334:	d037      	beq.n	80013a6 <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001336:	0025      	movs	r5, r4
 8001338:	3551      	adds	r5, #81	; 0x51
 800133a:	782b      	ldrb	r3, [r5, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 8001342:	0022      	movs	r2, r4
 8001344:	3250      	adds	r2, #80	; 0x50
 8001346:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001348:	0020      	movs	r0, r4
 800134a:	f001 f83d 	bl	80023c8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800134e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001350:	2240      	movs	r2, #64	; 0x40
 8001352:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001354:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001356:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001358:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800135a:	4393      	bics	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	69a2      	ldr	r2, [r4, #24]
 8001362:	4303      	orrs	r3, r0
 8001364:	68e0      	ldr	r0, [r4, #12]
 8001366:	4303      	orrs	r3, r0
 8001368:	6920      	ldr	r0, [r4, #16]
 800136a:	4303      	orrs	r3, r0
 800136c:	6960      	ldr	r0, [r4, #20]
 800136e:	4303      	orrs	r3, r0
 8001370:	69e0      	ldr	r0, [r4, #28]
 8001372:	4303      	orrs	r3, r0
 8001374:	6a20      	ldr	r0, [r4, #32]
 8001376:	4303      	orrs	r3, r0
 8001378:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800137a:	4303      	orrs	r3, r0
 800137c:	2080      	movs	r0, #128	; 0x80
 800137e:	0080      	lsls	r0, r0, #2
 8001380:	4010      	ands	r0, r2
 8001382:	4303      	orrs	r3, r0
 8001384:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001386:	2304      	movs	r3, #4
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	401a      	ands	r2, r3
 800138c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800138e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001390:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001394:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001396:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001398:	69cb      	ldr	r3, [r1, #28]
 800139a:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_SPI_Init+0x7c>)
 800139c:	4013      	ands	r3, r2
 800139e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80013a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80013a4:	702b      	strb	r3, [r5, #0]
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	fffff7ff 	.word	0xfffff7ff

080013ac <HAL_SPI_Transmit>:
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->State == HAL_SPI_STATE_READY)
 80013ae:	0007      	movs	r7, r0
 80013b0:	3751      	adds	r7, #81	; 0x51
{
 80013b2:	001d      	movs	r5, r3
  if(hspi->State == HAL_SPI_STATE_READY)
 80013b4:	783b      	ldrb	r3, [r7, #0]
{
 80013b6:	0004      	movs	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 80013b8:	b2db      	uxtb	r3, r3
{
 80013ba:	b085      	sub	sp, #20
    return HAL_BUSY;
 80013bc:	2002      	movs	r0, #2
  if(hspi->State == HAL_SPI_STATE_READY)
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d16e      	bne.n	80014a0 <HAL_SPI_Transmit+0xf4>
      return  HAL_ERROR;
 80013c2:	0018      	movs	r0, r3
    if((pData == NULL ) || (Size == 0U)) 
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d06b      	beq.n	80014a0 <HAL_SPI_Transmit+0xf4>
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d069      	beq.n	80014a0 <HAL_SPI_Transmit+0xf4>
    __HAL_LOCK(hspi);
 80013cc:	0026      	movs	r6, r4
 80013ce:	3650      	adds	r6, #80	; 0x50
 80013d0:	9601      	str	r6, [sp, #4]
 80013d2:	7830      	ldrb	r0, [r6, #0]
 80013d4:	4684      	mov	ip, r0
 80013d6:	4666      	mov	r6, ip
    return HAL_BUSY;
 80013d8:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 80013da:	2e01      	cmp	r6, #1
 80013dc:	d060      	beq.n	80014a0 <HAL_SPI_Transmit+0xf4>
 80013de:	9801      	ldr	r0, [sp, #4]
 80013e0:	7003      	strb	r3, [r0, #0]
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 80013e2:	3311      	adds	r3, #17
 80013e4:	703b      	strb	r3, [r7, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013e6:	2300      	movs	r3, #0
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013e8:	2080      	movs	r0, #128	; 0x80
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013ea:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size;
 80013ec:	86a2      	strh	r2, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 80013ee:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->TxISR = 0U;
 80013f2:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->RxISR = 0U;
 80013f4:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 80013f6:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0U;
 80013f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0U;
 80013fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pData;
 80013fc:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013fe:	0180      	lsls	r0, r0, #6
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	4282      	cmp	r2, r0
 8001404:	d106      	bne.n	8001414 <HAL_SPI_Transmit+0x68>
      SPI_RESET_CRC(hspi);
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	4e45      	ldr	r6, [pc, #276]	; (8001520 <HAL_SPI_Transmit+0x174>)
 800140a:	4030      	ands	r0, r6
 800140c:	6018      	str	r0, [r3, #0]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	4302      	orrs	r2, r0
 8001412:	601a      	str	r2, [r3, #0]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	68a0      	ldr	r0, [r4, #8]
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	4290      	cmp	r0, r2
 800141c:	d104      	bne.n	8001428 <HAL_SPI_Transmit+0x7c>
      SPI_1LINE_TX(hspi);
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	01d2      	lsls	r2, r2, #7
 8001424:	4302      	orrs	r2, r0
 8001426:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001428:	2240      	movs	r2, #64	; 0x40
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	4210      	tst	r0, r2
 800142e:	d102      	bne.n	8001436 <HAL_SPI_Transmit+0x8a>
      __HAL_SPI_ENABLE(hspi);
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	4302      	orrs	r2, r0
 8001434:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001436:	68e0      	ldr	r0, [r4, #12]
 8001438:	6862      	ldr	r2, [r4, #4]
 800143a:	2800      	cmp	r0, #0
 800143c:	d139      	bne.n	80014b2 <HAL_SPI_Transmit+0x106>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01U))
 800143e:	2a00      	cmp	r2, #0
 8001440:	d002      	beq.n	8001448 <HAL_SPI_Transmit+0x9c>
 8001442:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001444:	2a01      	cmp	r2, #1
 8001446:	d107      	bne.n	8001458 <HAL_SPI_Transmit+0xac>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001448:	1c4a      	adds	r2, r1, #1
 800144a:	6322      	str	r2, [r4, #48]	; 0x30
 800144c:	780a      	ldrb	r2, [r1, #0]
 800144e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001450:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001452:	3b01      	subs	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8001458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800145a:	2b00      	cmp	r3, #0
 800145c:	d117      	bne.n	800148e <HAL_SPI_Transmit+0xe2>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001462:	019b      	lsls	r3, r3, #6
 8001464:	429a      	cmp	r2, r3
 8001466:	d105      	bne.n	8001474 <HAL_SPI_Transmit+0xc8>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	6811      	ldr	r1, [r2, #0]
 8001470:	430b      	orrs	r3, r1
 8001472:	6013      	str	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001474:	002b      	movs	r3, r5
 8001476:	2200      	movs	r2, #0
 8001478:	2102      	movs	r1, #2
 800147a:	0020      	movs	r0, r4
 800147c:	f7ff ff0c 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001480:	2800      	cmp	r0, #0
 8001482:	d035      	beq.n	80014f0 <HAL_SPI_Transmit+0x144>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001484:	2320      	movs	r3, #32
 8001486:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001488:	4313      	orrs	r3, r2
 800148a:	6563      	str	r3, [r4, #84]	; 0x54
 800148c:	e007      	b.n	800149e <HAL_SPI_Transmit+0xf2>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800148e:	002b      	movs	r3, r5
 8001490:	2200      	movs	r2, #0
 8001492:	2102      	movs	r1, #2
 8001494:	0020      	movs	r0, r4
 8001496:	f7ff feff 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 800149a:	2800      	cmp	r0, #0
 800149c:	d002      	beq.n	80014a4 <HAL_SPI_Transmit+0xf8>
      return HAL_TIMEOUT;
 800149e:	2003      	movs	r0, #3
}
 80014a0:	b005      	add	sp, #20
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80014a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	6321      	str	r1, [r4, #48]	; 0x30
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	60d3      	str	r3, [r2, #12]
 80014b0:	e7ce      	b.n	8001450 <HAL_SPI_Transmit+0xa4>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d002      	beq.n	80014bc <HAL_SPI_Transmit+0x110>
 80014b6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d107      	bne.n	80014cc <HAL_SPI_Transmit+0x120>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80014bc:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 80014be:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80014c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80014c2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80014c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 80014cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0c5      	beq.n	800145e <HAL_SPI_Transmit+0xb2>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80014d2:	002b      	movs	r3, r5
 80014d4:	2200      	movs	r2, #0
 80014d6:	2102      	movs	r1, #2
 80014d8:	0020      	movs	r0, r4
 80014da:	f7ff fedd 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d1dd      	bne.n	800149e <HAL_SPI_Transmit+0xf2>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80014e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr+=2U;
 80014e8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80014ea:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2U;
 80014ec:	6323      	str	r3, [r4, #48]	; 0x30
 80014ee:	e7e9      	b.n	80014c4 <HAL_SPI_Transmit+0x118>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80014f0:	002b      	movs	r3, r5
 80014f2:	2201      	movs	r2, #1
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7ff fece 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1c1      	bne.n	8001484 <HAL_SPI_Transmit+0xd8>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001500:	68a3      	ldr	r3, [r4, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_SPI_Transmit+0x166>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	9203      	str	r2, [sp, #12]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	9303      	str	r3, [sp, #12]
 8001510:	9b03      	ldr	r3, [sp, #12]
    hspi->State = HAL_SPI_STATE_READY; 
 8001512:	2301      	movs	r3, #1
 8001514:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hspi);
 8001516:	2300      	movs	r3, #0
 8001518:	9a01      	ldr	r2, [sp, #4]
 800151a:	7013      	strb	r3, [r2, #0]
    return HAL_OK;
 800151c:	e7c0      	b.n	80014a0 <HAL_SPI_Transmit+0xf4>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	ffffdfff 	.word	0xffffdfff

08001524 <HAL_SPI_TransmitReceive>:
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 800152a:	a802      	add	r0, sp, #8
 800152c:	3006      	adds	r0, #6
 800152e:	9001      	str	r0, [sp, #4]
 8001530:	2000      	movs	r0, #0
 8001532:	9d01      	ldr	r5, [sp, #4]
 8001534:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001536:	0025      	movs	r5, r4
 8001538:	3551      	adds	r5, #81	; 0x51
 800153a:	7828      	ldrb	r0, [r5, #0]
 800153c:	2801      	cmp	r0, #1
 800153e:	d004      	beq.n	800154a <HAL_SPI_TransmitReceive+0x26>
 8001540:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8001542:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001544:	2e22      	cmp	r6, #34	; 0x22
 8001546:	d000      	beq.n	800154a <HAL_SPI_TransmitReceive+0x26>
 8001548:	e083      	b.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 800154a:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 800154c:	2900      	cmp	r1, #0
 800154e:	d100      	bne.n	8001552 <HAL_SPI_TransmitReceive+0x2e>
 8001550:	e07f      	b.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d100      	bne.n	8001558 <HAL_SPI_TransmitReceive+0x34>
 8001556:	e07c      	b.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d07a      	beq.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 800155c:	0026      	movs	r6, r4
 800155e:	3650      	adds	r6, #80	; 0x50
 8001560:	7830      	ldrb	r0, [r6, #0]
 8001562:	4684      	mov	ip, r0
 8001564:	4667      	mov	r7, ip
    return HAL_BUSY;
 8001566:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 8001568:	2f01      	cmp	r7, #1
 800156a:	d072      	beq.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
 800156c:	3801      	subs	r0, #1
 800156e:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 8001570:	7828      	ldrb	r0, [r5, #0]
 8001572:	2801      	cmp	r0, #1
 8001574:	d101      	bne.n	800157a <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001576:	3031      	adds	r0, #49	; 0x31
 8001578:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800157a:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 800157c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800157e:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 8001580:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 8001582:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 8001584:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001586:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 8001588:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800158a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800158c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800158e:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 8001590:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001592:	019b      	lsls	r3, r3, #6
 8001594:	4298      	cmp	r0, r3
 8001596:	d107      	bne.n	80015a8 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	4f9d      	ldr	r7, [pc, #628]	; (8001810 <HAL_SPI_TransmitReceive+0x2ec>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	403a      	ands	r2, r7
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4302      	orrs	r2, r0
 80015a6:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4694      	mov	ip, r2
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	4667      	mov	r7, ip
 80015b2:	4217      	tst	r7, r2
 80015b4:	d102      	bne.n	80015bc <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 80015b6:	681f      	ldr	r7, [r3, #0]
 80015b8:	433a      	orrs	r2, r7
 80015ba:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	4694      	mov	ip, r2
 80015c2:	68e7      	ldr	r7, [r4, #12]
 80015c4:	6862      	ldr	r2, [r4, #4]
 80015c6:	4567      	cmp	r7, ip
 80015c8:	d000      	beq.n	80015cc <HAL_SPI_TransmitReceive+0xa8>
 80015ca:	e07e      	b.n	80016ca <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d006      	beq.n	80015de <HAL_SPI_TransmitReceive+0xba>
 80015d0:	2782      	movs	r7, #130	; 0x82
 80015d2:	007f      	lsls	r7, r7, #1
 80015d4:	42ba      	cmp	r2, r7
 80015d6:	d10a      	bne.n	80015ee <HAL_SPI_TransmitReceive+0xca>
 80015d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d107      	bne.n	80015ee <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80015de:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 80015e0:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80015e2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80015e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 80015e6:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80015e8:	3a01      	subs	r2, #1
 80015ea:	b292      	uxth	r2, r2
 80015ec:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80015ee:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d162      	bne.n	80016ba <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	0192      	lsls	r2, r2, #6
 80015f8:	4290      	cmp	r0, r2
 80015fa:	d104      	bne.n	8001606 <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	0152      	lsls	r2, r2, #5
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001606:	2200      	movs	r2, #0
 8001608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800160a:	2101      	movs	r1, #1
 800160c:	0020      	movs	r0, r4
 800160e:	f7ff fe43 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001612:	2800      	cmp	r0, #0
 8001614:	d11c      	bne.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161a:	68d2      	ldr	r2, [r2, #12]
 800161c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800161e:	3302      	adds	r3, #2
 8001620:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8001622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001624:	3b01      	subs	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	429a      	cmp	r2, r3
 8001632:	d000      	beq.n	8001636 <HAL_SPI_TransmitReceive+0x112>
 8001634:	e0c4      	b.n	80017c0 <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001638:	2200      	movs	r2, #0
 800163a:	2101      	movs	r1, #1
 800163c:	0020      	movs	r0, r4
 800163e:	f7ff fe2b 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001642:	2800      	cmp	r0, #0
 8001644:	d100      	bne.n	8001648 <HAL_SPI_TransmitReceive+0x124>
 8001646:	e0b4      	b.n	80017b2 <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001648:	2302      	movs	r3, #2
 800164a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800164c:	4313      	orrs	r3, r2
 800164e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001650:	2003      	movs	r0, #3
}
 8001652:	b005      	add	sp, #20
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	0020      	movs	r0, r4
 800165e:	f7ff fe1b 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001662:	2800      	cmp	r0, #0
 8001664:	d1f4      	bne.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 800166c:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800166e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 8001670:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8001672:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001674:	3b01      	subs	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800167a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <HAL_SPI_TransmitReceive+0x172>
 8001680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001682:	0019      	movs	r1, r3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	4299      	cmp	r1, r3
 800168a:	d104      	bne.n	8001696 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	0149      	lsls	r1, r1, #5
 8001692:	430b      	orrs	r3, r1
 8001694:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	0020      	movs	r0, r4
 800169e:	f7ff fdfb 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d1d4      	bne.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016aa:	68d2      	ldr	r2, [r2, #12]
 80016ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80016ae:	3302      	adds	r3, #2
 80016b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80016b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80016ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ca      	bne.n	8001656 <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80016c0:	6862      	ldr	r2, [r4, #4]
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d1b1      	bne.n	800162a <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80016c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c8:	e79f      	b.n	800160a <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d006      	beq.n	80016dc <HAL_SPI_TransmitReceive+0x1b8>
 80016ce:	2782      	movs	r7, #130	; 0x82
 80016d0:	007f      	lsls	r7, r7, #1
 80016d2:	42ba      	cmp	r2, r7
 80016d4:	d10a      	bne.n	80016ec <HAL_SPI_TransmitReceive+0x1c8>
 80016d6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d107      	bne.n	80016ec <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80016dc:	1c4a      	adds	r2, r1, #1
 80016de:	6322      	str	r2, [r4, #48]	; 0x30
 80016e0:	780a      	ldrb	r2, [r1, #0]
 80016e2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80016e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80016e6:	3a01      	subs	r2, #1
 80016e8:	b292      	uxth	r2, r2
 80016ea:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80016ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d149      	bne.n	8001786 <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0192      	lsls	r2, r2, #6
 80016f6:	4290      	cmp	r0, r2
 80016f8:	d104      	bne.n	8001704 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	0152      	lsls	r2, r2, #5
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	2101      	movs	r1, #1
 800170a:	0020      	movs	r0, r4
 800170c:	f7ff fdc4 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001710:	2800      	cmp	r0, #0
 8001712:	d19d      	bne.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	7013      	strb	r3, [r2, #0]
 800171c:	e781      	b.n	8001622 <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800171e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	0020      	movs	r0, r4
 8001726:	f7ff fdb7 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 800172a:	2800      	cmp	r0, #0
 800172c:	d000      	beq.n	8001730 <HAL_SPI_TransmitReceive+0x20c>
 800172e:	e78f      	b.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	1c59      	adds	r1, r3, #1
 8001736:	6321      	str	r1, [r4, #48]	; 0x30
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 800173c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800173e:	3b01      	subs	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001744:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <HAL_SPI_TransmitReceive+0x23c>
 800174a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800174c:	0019      	movs	r1, r3
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	4299      	cmp	r1, r3
 8001754:	d104      	bne.n	8001760 <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	6813      	ldr	r3, [r2, #0]
 800175a:	0149      	lsls	r1, r1, #5
 800175c:	430b      	orrs	r3, r1
 800175e:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	0020      	movs	r0, r4
 8001768:	f7ff fd96 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 800176c:	2800      	cmp	r0, #0
 800176e:	d000      	beq.n	8001772 <HAL_SPI_TransmitReceive+0x24e>
 8001770:	e76e      	b.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	63a2      	str	r2, [r4, #56]	; 0x38
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	68d2      	ldr	r2, [r2, #12]
 800177c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800177e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001780:	3b01      	subs	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8001786:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1c8      	bne.n	800171e <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	2a00      	cmp	r2, #0
 8001790:	d000      	beq.n	8001794 <HAL_SPI_TransmitReceive+0x270>
 8001792:	e74a      	b.n	800162a <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001796:	2101      	movs	r1, #1
 8001798:	0020      	movs	r0, r4
 800179a:	f7ff fd7d 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d000      	beq.n	80017a4 <HAL_SPI_TransmitReceive+0x280>
 80017a2:	e755      	b.n	8001650 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80017a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	63a2      	str	r2, [r4, #56]	; 0x38
 80017aa:	6822      	ldr	r2, [r4, #0]
 80017ac:	68d2      	ldr	r2, [r2, #12]
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e737      	b.n	8001622 <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	9a01      	ldr	r2, [sp, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 80017bc:	0013      	movs	r3, r2
 80017be:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80017c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017c2:	2201      	movs	r2, #1
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0020      	movs	r0, r4
 80017c8:	f7ff fd66 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017d2:	2320      	movs	r3, #32
 80017d4:	e73a      	b.n	800164c <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 80017d6:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 80017dc:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d111      	bne.n	8001808 <HAL_SPI_TransmitReceive+0x2e4>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	06c9      	lsls	r1, r1, #27
 80017ea:	d50d      	bpl.n	8001808 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80017ec:	2102      	movs	r1, #2
 80017ee:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80017f0:	4329      	orrs	r1, r5
 80017f2:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	4c06      	ldr	r4, [pc, #24]	; (8001810 <HAL_SPI_TransmitReceive+0x2ec>)
 80017f8:	4021      	ands	r1, r4
 80017fa:	6019      	str	r1, [r3, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8001802:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 8001804:	0038      	movs	r0, r7
 8001806:	e724      	b.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 8001808:	2300      	movs	r3, #0
 800180a:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 800180c:	e721      	b.n	8001652 <HAL_SPI_TransmitReceive+0x12e>
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	ffffdfff 	.word	0xffffdfff

08001814 <HAL_SPI_Receive>:
{
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 8001818:	200e      	movs	r0, #14
{
 800181a:	001e      	movs	r6, r3
  __IO uint16_t tmpreg = 0U;
 800181c:	2300      	movs	r3, #0
{
 800181e:	b087      	sub	sp, #28
 8001820:	9202      	str	r2, [sp, #8]
  __IO uint16_t tmpreg = 0U;
 8001822:	aa02      	add	r2, sp, #8
 8001824:	1880      	adds	r0, r0, r2
 8001826:	8003      	strh	r3, [r0, #0]
  if(hspi->State == HAL_SPI_STATE_READY)
 8001828:	0020      	movs	r0, r4
 800182a:	3051      	adds	r0, #81	; 0x51
 800182c:	9003      	str	r0, [sp, #12]
 800182e:	7800      	ldrb	r0, [r0, #0]
    return HAL_BUSY;
 8001830:	2502      	movs	r5, #2
  if(hspi->State == HAL_SPI_STATE_READY)
 8001832:	b2c0      	uxtb	r0, r0
 8001834:	2801      	cmp	r0, #1
 8001836:	d171      	bne.n	800191c <HAL_SPI_Receive+0x108>
      return  HAL_ERROR;
 8001838:	0005      	movs	r5, r0
    if((pData == NULL ) || (Size == 0U)) 
 800183a:	4299      	cmp	r1, r3
 800183c:	d06e      	beq.n	800191c <HAL_SPI_Receive+0x108>
 800183e:	9a02      	ldr	r2, [sp, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	d06b      	beq.n	800191c <HAL_SPI_Receive+0x108>
    __HAL_LOCK(hspi);
 8001844:	0027      	movs	r7, r4
 8001846:	3750      	adds	r7, #80	; 0x50
 8001848:	783d      	ldrb	r5, [r7, #0]
 800184a:	46ac      	mov	ip, r5
 800184c:	4662      	mov	r2, ip
    return HAL_BUSY;
 800184e:	2502      	movs	r5, #2
    __HAL_LOCK(hspi);
 8001850:	2a01      	cmp	r2, #1
 8001852:	d063      	beq.n	800191c <HAL_SPI_Receive+0x108>
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001854:	9a03      	ldr	r2, [sp, #12]
    __HAL_LOCK(hspi);
 8001856:	7038      	strb	r0, [r7, #0]
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001858:	3021      	adds	r0, #33	; 0x21
 800185a:	7010      	strb	r0, [r2, #0]
    hspi->RxXferSize  = Size;
 800185c:	466a      	mov	r2, sp
 800185e:	8912      	ldrh	r2, [r2, #8]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001860:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferSize  = Size;
 8001862:	87a2      	strh	r2, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8001864:	466a      	mov	r2, sp
 8001866:	8912      	ldrh	r2, [r2, #8]
    hspi->RxISR = 0U;
 8001868:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->RxXferCount = Size;
 800186a:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->TxISR = 0U;
 800186c:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->pTxBuffPtr  = NULL;
 800186e:	6323      	str	r3, [r4, #48]	; 0x30
    hspi->TxXferSize  = 0U;
 8001870:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = 0U;
 8001872:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	68a5      	ldr	r5, [r4, #8]
    hspi->pRxBuffPtr  = pData;
 8001878:	63a1      	str	r1, [r4, #56]	; 0x38
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	429d      	cmp	r5, r3
 800187e:	d104      	bne.n	800188a <HAL_SPI_Receive+0x76>
      SPI_1LINE_RX(hspi);
 8001880:	6820      	ldr	r0, [r4, #0]
 8001882:	4f67      	ldr	r7, [pc, #412]	; (8001a20 <HAL_SPI_Receive+0x20c>)
 8001884:	6803      	ldr	r3, [r0, #0]
 8001886:	403b      	ands	r3, r7
 8001888:	6003      	str	r3, [r0, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800188e:	019b      	lsls	r3, r3, #6
 8001890:	4298      	cmp	r0, r3
 8001892:	d107      	bne.n	80018a4 <HAL_SPI_Receive+0x90>
      SPI_RESET_CRC(hspi);
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_SPI_Receive+0x210>)
 8001898:	681f      	ldr	r7, [r3, #0]
 800189a:	4017      	ands	r7, r2
 800189c:	601f      	str	r7, [r3, #0]
 800189e:	681f      	ldr	r7, [r3, #0]
 80018a0:	4338      	orrs	r0, r7
 80018a2:	6018      	str	r0, [r3, #0]
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80018a4:	2382      	movs	r3, #130	; 0x82
 80018a6:	6862      	ldr	r2, [r4, #4]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d10c      	bne.n	80018c8 <HAL_SPI_Receive+0xb4>
 80018ae:	2d00      	cmp	r5, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_SPI_Receive+0xb4>
      __HAL_UNLOCK(hspi);
 80018b2:	0023      	movs	r3, r4
 80018b4:	3350      	adds	r3, #80	; 0x50
 80018b6:	701d      	strb	r5, [r3, #0]
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80018b8:	000a      	movs	r2, r1
 80018ba:	9600      	str	r6, [sp, #0]
 80018bc:	9b02      	ldr	r3, [sp, #8]
 80018be:	0020      	movs	r0, r4
 80018c0:	f7ff fe30 	bl	8001524 <HAL_SPI_TransmitReceive>
      return HAL_ERROR; 
 80018c4:	0005      	movs	r5, r0
 80018c6:	e029      	b.n	800191c <HAL_SPI_Receive+0x108>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	4219      	tst	r1, r3
 80018d0:	d102      	bne.n	80018d8 <HAL_SPI_Receive+0xc4>
      __HAL_SPI_ENABLE(hspi);
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6013      	str	r3, [r2, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80018d8:	68e3      	ldr	r3, [r4, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d02b      	beq.n	8001936 <HAL_SPI_Receive+0x122>
      while(hspi->RxXferCount > 1U)
 80018de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d92b      	bls.n	800193c <HAL_SPI_Receive+0x128>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80018e4:	0033      	movs	r3, r6
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	0020      	movs	r0, r4
 80018ec:	f7ff fcd4 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d112      	bne.n	800191a <HAL_SPI_Receive+0x106>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80018f4:	6822      	ldr	r2, [r4, #0]
 80018f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f8:	68d2      	ldr	r2, [r2, #12]
 80018fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2U;
 80018fc:	3302      	adds	r3, #2
 80018fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001900:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001908:	e7e9      	b.n	80018de <HAL_SPI_Receive+0xca>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800190a:	0033      	movs	r3, r6
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	0020      	movs	r0, r4
 8001912:	f7ff fcc1 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001916:	2800      	cmp	r0, #0
 8001918:	d003      	beq.n	8001922 <HAL_SPI_Receive+0x10e>
        return HAL_TIMEOUT;
 800191a:	2503      	movs	r5, #3
}
 800191c:	0028      	movs	r0, r5
 800191e:	b007      	add	sp, #28
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	63a2      	str	r2, [r4, #56]	; 0x38
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	68d2      	ldr	r2, [r2, #12]
 800192c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800192e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001930:	3b01      	subs	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	87e3      	strh	r3, [r4, #62]	; 0x3e
      while(hspi->RxXferCount > 1U)
 8001936:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001938:	2b01      	cmp	r3, #1
 800193a:	d8e6      	bhi.n	800190a <HAL_SPI_Receive+0xf6>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	429a      	cmp	r2, r3
 8001944:	d105      	bne.n	8001952 <HAL_SPI_Receive+0x13e>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	6811      	ldr	r1, [r2, #0]
 800194e:	430b      	orrs	r3, r1
 8001950:	6013      	str	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001952:	0033      	movs	r3, r6
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	0020      	movs	r0, r4
 800195a:	f7ff fc9d 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 800195e:	1e05      	subs	r5, r0, #0
 8001960:	d1db      	bne.n	800191a <HAL_SPI_Receive+0x106>
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001962:	68e1      	ldr	r1, [r4, #12]
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001968:	2900      	cmp	r1, #0
 800196a:	d119      	bne.n	80019a0 <HAL_SPI_Receive+0x18c>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800196c:	68d2      	ldr	r2, [r2, #12]
 800196e:	1c59      	adds	r1, r3, #1
 8001970:	63a1      	str	r1, [r4, #56]	; 0x38
 8001972:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8001974:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->RxXferCount--;
 8001978:	3b01      	subs	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	429a      	cmp	r2, r3
 8001984:	d119      	bne.n	80019ba <HAL_SPI_Receive+0x1a6>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001986:	0033      	movs	r3, r6
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	0020      	movs	r0, r4
 800198e:	f7ff fc83 	bl	8001298 <SPI_WaitOnFlagUntilTimeout>
 8001992:	2800      	cmp	r0, #0
 8001994:	d009      	beq.n	80019aa <HAL_SPI_Receive+0x196>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001996:	2302      	movs	r3, #2
 8001998:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800199a:	4313      	orrs	r3, r2
 800199c:	6563      	str	r3, [r4, #84]	; 0x54
 800199e:	e7bc      	b.n	800191a <HAL_SPI_Receive+0x106>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80019a0:	68d2      	ldr	r2, [r2, #12]
 80019a2:	801a      	strh	r2, [r3, #0]
      hspi->pRxBuffPtr+=2U;
 80019a4:	3302      	adds	r3, #2
 80019a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80019a8:	e7e4      	b.n	8001974 <HAL_SPI_Receive+0x160>
      tmpreg = hspi->Instance->DR;
 80019aa:	220e      	movs	r2, #14
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	a902      	add	r1, sp, #8
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	1852      	adds	r2, r2, r1
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 80019b8:	8813      	ldrh	r3, [r2, #0]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ba:	2382      	movs	r3, #130	; 0x82
 80019bc:	6862      	ldr	r2, [r4, #4]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10d      	bne.n	80019e0 <HAL_SPI_Receive+0x1cc>
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	68a3      	ldr	r3, [r4, #8]
 80019c8:	0212      	lsls	r2, r2, #8
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d003      	beq.n	80019d6 <HAL_SPI_Receive+0x1c2>
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d104      	bne.n	80019e0 <HAL_SPI_Receive+0x1cc>
      __HAL_SPI_DISABLE(hspi);
 80019d6:	2140      	movs	r1, #64	; 0x40
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	438b      	bics	r3, r1
 80019de:	6013      	str	r3, [r2, #0]
    hspi->State = HAL_SPI_STATE_READY;
 80019e0:	2001      	movs	r0, #1
 80019e2:	9b03      	ldr	r3, [sp, #12]
 80019e4:	0026      	movs	r6, r4
 80019e6:	7018      	strb	r0, [r3, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	3650      	adds	r6, #80	; 0x50
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d111      	bne.n	8001a18 <HAL_SPI_Receive+0x204>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	06c9      	lsls	r1, r1, #27
 80019fa:	d50d      	bpl.n	8001a18 <HAL_SPI_Receive+0x204>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80019fc:	2102      	movs	r1, #2
 80019fe:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001a00:	4329      	orrs	r1, r5
 8001a02:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	4c07      	ldr	r4, [pc, #28]	; (8001a24 <HAL_SPI_Receive+0x210>)
 8001a08:	4021      	ands	r1, r4
 8001a0a:	6019      	str	r1, [r3, #0]
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8001a12:	2300      	movs	r3, #0
 8001a14:	7033      	strb	r3, [r6, #0]
 8001a16:	e755      	b.n	80018c4 <HAL_SPI_Receive+0xb0>
    __HAL_UNLOCK(hspi);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 8001a1c:	e77e      	b.n	800191c <HAL_SPI_Receive+0x108>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	ffffbfff 	.word	0xffffbfff
 8001a24:	ffffdfff 	.word	0xffffdfff

08001a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a2c:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a2e:	6882      	ldr	r2, [r0, #8]
 8001a30:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a32:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a34:	4302      	orrs	r2, r0
 8001a36:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a38:	4e82      	ldr	r6, [pc, #520]	; (8001c44 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	69e8      	ldr	r0, [r5, #28]
 8001a3e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a40:	4881      	ldr	r0, [pc, #516]	; (8001c48 <UART_SetConfig+0x220>)
 8001a42:	4001      	ands	r1, r0
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4980      	ldr	r1, [pc, #512]	; (8001c4c <UART_SetConfig+0x224>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	68e9      	ldr	r1, [r5, #12]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a54:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a56:	42b3      	cmp	r3, r6
 8001a58:	d001      	beq.n	8001a5e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001a5a:	6a2a      	ldr	r2, [r5, #32]
 8001a5c:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	487b      	ldr	r0, [pc, #492]	; (8001c50 <UART_SetConfig+0x228>)
 8001a62:	4002      	ands	r2, r0
 8001a64:	430a      	orrs	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a68:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <UART_SetConfig+0x22c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d117      	bne.n	8001a9e <UART_SetConfig+0x76>
 8001a6e:	2203      	movs	r2, #3
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <UART_SetConfig+0x230>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4013      	ands	r3, r2
 8001a76:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <UART_SetConfig+0x234>)
 8001a78:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f7ff fb0e 	bl	800109c <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a80:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8001a82:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a84:	42b7      	cmp	r7, r6
 8001a86:	d166      	bne.n	8001b56 <UART_SetConfig+0x12e>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 8001a88:	2c08      	cmp	r4, #8
 8001a8a:	d900      	bls.n	8001a8e <UART_SetConfig+0x66>
 8001a8c:	e0d7      	b.n	8001c3e <UART_SetConfig+0x216>
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7fe fb42 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001a94:	d539d531 	.word	0xd539d531
 8001a98:	d5d5d559 	.word	0xd5d5d559
 8001a9c:	5c          	.byte	0x5c
 8001a9d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a9e:	4a70      	ldr	r2, [pc, #448]	; (8001c60 <UART_SetConfig+0x238>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d105      	bne.n	8001ab0 <UART_SetConfig+0x88>
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <UART_SetConfig+0x230>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a6d      	ldr	r2, [pc, #436]	; (8001c64 <UART_SetConfig+0x23c>)
 8001aae:	e7e3      	b.n	8001a78 <UART_SetConfig+0x50>
 8001ab0:	4a6d      	ldr	r2, [pc, #436]	; (8001c68 <UART_SetConfig+0x240>)
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d0e0      	beq.n	8001a7a <UART_SetConfig+0x52>
 8001ab8:	4a6c      	ldr	r2, [pc, #432]	; (8001c6c <UART_SetConfig+0x244>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d0dd      	beq.n	8001a7a <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001abe:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ac0:	42b3      	cmp	r3, r6
 8001ac2:	d1da      	bne.n	8001a7a <UART_SetConfig+0x52>
 8001ac4:	22c0      	movs	r2, #192	; 0xc0
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <UART_SetConfig+0x230>)
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	00c9      	lsls	r1, r1, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	3c0c      	subs	r4, #12
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d0d0      	beq.n	8001a7a <UART_SetConfig+0x52>
 8001ad8:	d804      	bhi.n	8001ae4 <UART_SetConfig+0xbc>
 8001ada:	2400      	movs	r4, #0
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d0cc      	beq.n	8001a7a <UART_SetConfig+0x52>
 8001ae0:	2410      	movs	r4, #16
 8001ae2:	e7ca      	b.n	8001a7a <UART_SetConfig+0x52>
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	2402      	movs	r4, #2
 8001ae8:	0109      	lsls	r1, r1, #4
 8001aea:	428b      	cmp	r3, r1
 8001aec:	d0c5      	beq.n	8001a7a <UART_SetConfig+0x52>
 8001aee:	3406      	adds	r4, #6
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d0c2      	beq.n	8001a7a <UART_SetConfig+0x52>
 8001af4:	e7f4      	b.n	8001ae0 <UART_SetConfig+0xb8>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001af6:	f7ff f9c7 	bl	8000e88 <HAL_RCC_GetPCLK1Freq>
 8001afa:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001afc:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8001afe:	42a0      	cmp	r0, r4
 8001b00:	d106      	bne.n	8001b10 <UART_SetConfig+0xe8>
    }
  }

  return ret;

}
 8001b02:	0020      	movs	r0, r4
 8001b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <UART_SetConfig+0x230>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	06db      	lsls	r3, r3, #27
 8001b0c:	d421      	bmi.n	8001b52 <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001b10:	2103      	movs	r1, #3
 8001b12:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8001b14:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001b16:	4351      	muls	r1, r2
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	d8f2      	bhi.n	8001b02 <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8001b1c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d3ef      	bcc.n	8001b02 <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8001b22:	2700      	movs	r7, #0
 8001b24:	0856      	lsrs	r6, r2, #1
 8001b26:	0e19      	lsrs	r1, r3, #24
 8001b28:	0218      	lsls	r0, r3, #8
 8001b2a:	1980      	adds	r0, r0, r6
 8001b2c:	4179      	adcs	r1, r7
 8001b2e:	003b      	movs	r3, r7
 8001b30:	f7fe fb88 	bl	8000244 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <UART_SetConfig+0x24c>)
 8001b36:	18c2      	adds	r2, r0, r3
 8001b38:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <UART_SetConfig+0x250>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d8e1      	bhi.n	8001b02 <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b42:	2400      	movs	r4, #0
      break;
 8001b44:	e7dd      	b.n	8001b02 <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001b46:	f7ff f8a5 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8001b4a:	e7d6      	b.n	8001afa <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	e7de      	b.n	8001b10 <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <UART_SetConfig+0x254>)
 8001b54:	e7dc      	b.n	8001b10 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	69e9      	ldr	r1, [r5, #28]
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	4291      	cmp	r1, r2
 8001b5e:	d13f      	bne.n	8001be0 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8001b60:	2c08      	cmp	r4, #8
 8001b62:	d83a      	bhi.n	8001bda <UART_SetConfig+0x1b2>
 8001b64:	0020      	movs	r0, r4
 8001b66:	f7fe fad7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001b6a:	0f05      	.short	0x0f05
 8001b6c:	38303817 	.word	0x38303817
 8001b70:	3838      	.short	0x3838
 8001b72:	33          	.byte	0x33
 8001b73:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8001b74:	686a      	ldr	r2, [r5, #4]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	0011      	movs	r1, r2
 8001b7a:	0850      	lsrs	r0, r2, #1
 8001b7c:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b7e:	f7fe fad5 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b82:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b84:	b280      	uxth	r0, r0
      break;
 8001b86:	e016      	b.n	8001bb6 <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b88:	f7ff f98e 	bl	8000ea8 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b8c:	686b      	ldr	r3, [r5, #4]
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b92:	18c0      	adds	r0, r0, r3
 8001b94:	6869      	ldr	r1, [r5, #4]
 8001b96:	e7f2      	b.n	8001b7e <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <UART_SetConfig+0x230>)
 8001b9a:	6869      	ldr	r1, [r5, #4]
 8001b9c:	681c      	ldr	r4, [r3, #0]
 8001b9e:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ba0:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ba2:	401c      	ands	r4, r3
 8001ba4:	d002      	beq.n	8001bac <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <UART_SetConfig+0x258>)
 8001ba8:	18c0      	adds	r0, r0, r3
 8001baa:	e7e8      	b.n	8001b7e <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <UART_SetConfig+0x25c>)
 8001bae:	18c0      	adds	r0, r0, r3
 8001bb0:	f7fe fabc 	bl	800012c <__udivsi3>
 8001bb4:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	0002      	movs	r2, r0
 8001bba:	439a      	bics	r2, r3
 8001bbc:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001bbe:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8001bc0:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001bc2:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8001bc4:	4318      	orrs	r0, r3
 8001bc6:	60d0      	str	r0, [r2, #12]
 8001bc8:	e79b      	b.n	8001b02 <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bca:	f7ff f863 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8001bce:	e7dd      	b.n	8001b8c <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bd0:	686b      	ldr	r3, [r5, #4]
 8001bd2:	0858      	lsrs	r0, r3, #1
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	025b      	lsls	r3, r3, #9
 8001bd8:	e7db      	b.n	8001b92 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8001bda:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e7ea      	b.n	8001bb6 <UART_SetConfig+0x18e>
    switch (clocksource)
 8001be0:	2c08      	cmp	r4, #8
 8001be2:	d82c      	bhi.n	8001c3e <UART_SetConfig+0x216>
 8001be4:	0020      	movs	r0, r4
 8001be6:	f7fe fa97 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001bea:	0f05      	.short	0x0f05
 8001bec:	2a222a12 	.word	0x2a222a12
 8001bf0:	2a2a      	.short	0x2a2a
 8001bf2:	25          	.byte	0x25
 8001bf3:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bf4:	f7ff f948 	bl	8000e88 <HAL_RCC_GetPCLK1Freq>
 8001bf8:	6869      	ldr	r1, [r5, #4]
 8001bfa:	084b      	lsrs	r3, r1, #1
 8001bfc:	1818      	adds	r0, r3, r0
 8001bfe:	f7fe fa95 	bl	800012c <__udivsi3>
 8001c02:	b280      	uxth	r0, r0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	e79c      	b.n	8001b42 <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c08:	f7ff f94e 	bl	8000ea8 <HAL_RCC_GetPCLK2Freq>
 8001c0c:	e7f4      	b.n	8001bf8 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <UART_SetConfig+0x230>)
 8001c10:	6869      	ldr	r1, [r5, #4]
 8001c12:	681c      	ldr	r4, [r3, #0]
 8001c14:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001c16:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c18:	401c      	ands	r4, r3
 8001c1a:	d001      	beq.n	8001c20 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <UART_SetConfig+0x254>)
 8001c1e:	e7ed      	b.n	8001bfc <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <UART_SetConfig+0x248>)
 8001c22:	18c0      	adds	r0, r0, r3
 8001c24:	f7fe fa82 	bl	800012c <__udivsi3>
 8001c28:	b280      	uxth	r0, r0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	e769      	b.n	8001b02 <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c2e:	f7ff f831 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8001c32:	e7e1      	b.n	8001bf8 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	6869      	ldr	r1, [r5, #4]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	0848      	lsrs	r0, r1, #1
 8001c3c:	e7de      	b.n	8001bfc <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 8001c3e:	2401      	movs	r4, #1
 8001c40:	e75f      	b.n	8001b02 <UART_SetConfig+0xda>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40004800 	.word	0x40004800
 8001c48:	efff69f3 	.word	0xefff69f3
 8001c4c:	ffffcfff 	.word	0xffffcfff
 8001c50:	fffff4ff 	.word	0xfffff4ff
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	0800264a 	.word	0x0800264a
 8001c60:	40004400 	.word	0x40004400
 8001c64:	0800264e 	.word	0x0800264e
 8001c68:	40004c00 	.word	0x40004c00
 8001c6c:	40005000 	.word	0x40005000
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	fffffd00 	.word	0xfffffd00
 8001c78:	000ffcff 	.word	0x000ffcff
 8001c7c:	003d0900 	.word	0x003d0900
 8001c80:	007a1200 	.word	0x007a1200
 8001c84:	01e84800 	.word	0x01e84800

08001c88 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001c8a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c8c:	07da      	lsls	r2, r3, #31
 8001c8e:	d506      	bpl.n	8001c9e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c90:	6801      	ldr	r1, [r0, #0]
 8001c92:	4c28      	ldr	r4, [pc, #160]	; (8001d34 <UART_AdvFeatureConfig+0xac>)
 8001c94:	684a      	ldr	r2, [r1, #4]
 8001c96:	4022      	ands	r2, r4
 8001c98:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c9e:	079a      	lsls	r2, r3, #30
 8001ca0:	d506      	bpl.n	8001cb0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ca2:	6801      	ldr	r1, [r0, #0]
 8001ca4:	4c24      	ldr	r4, [pc, #144]	; (8001d38 <UART_AdvFeatureConfig+0xb0>)
 8001ca6:	684a      	ldr	r2, [r1, #4]
 8001ca8:	4022      	ands	r2, r4
 8001caa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cac:	4322      	orrs	r2, r4
 8001cae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cb0:	075a      	lsls	r2, r3, #29
 8001cb2:	d506      	bpl.n	8001cc2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001cb4:	6801      	ldr	r1, [r0, #0]
 8001cb6:	4c21      	ldr	r4, [pc, #132]	; (8001d3c <UART_AdvFeatureConfig+0xb4>)
 8001cb8:	684a      	ldr	r2, [r1, #4]
 8001cba:	4022      	ands	r2, r4
 8001cbc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001cbe:	4322      	orrs	r2, r4
 8001cc0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cc2:	071a      	lsls	r2, r3, #28
 8001cc4:	d506      	bpl.n	8001cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cc6:	6801      	ldr	r1, [r0, #0]
 8001cc8:	4c1d      	ldr	r4, [pc, #116]	; (8001d40 <UART_AdvFeatureConfig+0xb8>)
 8001cca:	684a      	ldr	r2, [r1, #4]
 8001ccc:	4022      	ands	r2, r4
 8001cce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cd0:	4322      	orrs	r2, r4
 8001cd2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cd4:	06da      	lsls	r2, r3, #27
 8001cd6:	d506      	bpl.n	8001ce6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cd8:	6801      	ldr	r1, [r0, #0]
 8001cda:	4c1a      	ldr	r4, [pc, #104]	; (8001d44 <UART_AdvFeatureConfig+0xbc>)
 8001cdc:	688a      	ldr	r2, [r1, #8]
 8001cde:	4022      	ands	r2, r4
 8001ce0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ce6:	069a      	lsls	r2, r3, #26
 8001ce8:	d506      	bpl.n	8001cf8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cea:	6801      	ldr	r1, [r0, #0]
 8001cec:	4c16      	ldr	r4, [pc, #88]	; (8001d48 <UART_AdvFeatureConfig+0xc0>)
 8001cee:	688a      	ldr	r2, [r1, #8]
 8001cf0:	4022      	ands	r2, r4
 8001cf2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cf4:	4322      	orrs	r2, r4
 8001cf6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cf8:	065a      	lsls	r2, r3, #25
 8001cfa:	d510      	bpl.n	8001d1e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cfc:	6801      	ldr	r1, [r0, #0]
 8001cfe:	4d13      	ldr	r5, [pc, #76]	; (8001d4c <UART_AdvFeatureConfig+0xc4>)
 8001d00:	684a      	ldr	r2, [r1, #4]
 8001d02:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d04:	402a      	ands	r2, r5
 8001d06:	4322      	orrs	r2, r4
 8001d08:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0352      	lsls	r2, r2, #13
 8001d0e:	4294      	cmp	r4, r2
 8001d10:	d105      	bne.n	8001d1e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d12:	684a      	ldr	r2, [r1, #4]
 8001d14:	4c0e      	ldr	r4, [pc, #56]	; (8001d50 <UART_AdvFeatureConfig+0xc8>)
 8001d16:	4022      	ands	r2, r4
 8001d18:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d1a:	4322      	orrs	r2, r4
 8001d1c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	d506      	bpl.n	8001d30 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d22:	6802      	ldr	r2, [r0, #0]
 8001d24:	490b      	ldr	r1, [pc, #44]	; (8001d54 <UART_AdvFeatureConfig+0xcc>)
 8001d26:	6853      	ldr	r3, [r2, #4]
 8001d28:	400b      	ands	r3, r1
 8001d2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6053      	str	r3, [r2, #4]
  }
}
 8001d30:	bd30      	pop	{r4, r5, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	fffdffff 	.word	0xfffdffff
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	fffbffff 	.word	0xfffbffff
 8001d40:	ffff7fff 	.word	0xffff7fff
 8001d44:	ffffefff 	.word	0xffffefff
 8001d48:	ffffdfff 	.word	0xffffdfff
 8001d4c:	ffefffff 	.word	0xffefffff
 8001d50:	ff9fffff 	.word	0xff9fffff
 8001d54:	fff7ffff 	.word	0xfff7ffff

08001d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	0004      	movs	r4, r0
 8001d5c:	000e      	movs	r6, r1
 8001d5e:	0015      	movs	r5, r2
 8001d60:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	69d3      	ldr	r3, [r2, #28]
 8001d66:	4033      	ands	r3, r6
 8001d68:	1b9b      	subs	r3, r3, r6
 8001d6a:	4259      	negs	r1, r3
 8001d6c:	414b      	adcs	r3, r1
 8001d6e:	42ab      	cmp	r3, r5
 8001d70:	d001      	beq.n	8001d76 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	e018      	b.n	8001da8 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001d76:	9b06      	ldr	r3, [sp, #24]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	d0f3      	beq.n	8001d64 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d7c:	9b06      	ldr	r3, [sp, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d113      	bne.n	8001daa <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001d86:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001d88:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	31a3      	adds	r1, #163	; 0xa3
 8001d92:	31ff      	adds	r1, #255	; 0xff
 8001d94:	438a      	bics	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d98:	0022      	movs	r2, r4
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	3269      	adds	r2, #105	; 0x69
 8001d9e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001da0:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001da2:	2300      	movs	r3, #0
 8001da4:	3468      	adds	r4, #104	; 0x68
 8001da6:	7023      	strb	r3, [r4, #0]
}
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001daa:	f7fe fb81 	bl	80004b0 <HAL_GetTick>
 8001dae:	9b06      	ldr	r3, [sp, #24]
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4283      	cmp	r3, r0
 8001db4:	d2d5      	bcs.n	8001d62 <UART_WaitOnFlagUntilTimeout+0xa>
 8001db6:	e7e4      	b.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001db8:	fffffe5f 	.word	0xfffffe5f

08001dbc <UART_CheckIdleState>:
{
 8001dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	2600      	movs	r6, #0
{
 8001dc0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001dc4:	f7fe fb74 	bl	80004b0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dc8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001dca:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	071b      	lsls	r3, r3, #28
 8001dd0:	d417      	bmi.n	8001e02 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	075b      	lsls	r3, r3, #29
 8001dd8:	d50a      	bpl.n	8001df0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <UART_CheckIdleState+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	03c9      	lsls	r1, r1, #15
 8001de4:	002b      	movs	r3, r5
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7ff ffb6 	bl	8001d58 <UART_WaitOnFlagUntilTimeout>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d113      	bne.n	8001e18 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8001df0:	0022      	movs	r2, r4
 8001df2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001df4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001df6:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001df8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001dfa:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001dfe:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001e00:	e00b      	b.n	8001e1a <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <UART_CheckIdleState+0x60>)
 8001e06:	0032      	movs	r2, r6
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	0389      	lsls	r1, r1, #14
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	0020      	movs	r0, r4
 8001e10:	f7ff ffa2 	bl	8001d58 <UART_WaitOnFlagUntilTimeout>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d0dc      	beq.n	8001dd2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e18:	2003      	movs	r0, #3
}
 8001e1a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001e1c:	01ffffff 	.word	0x01ffffff

08001e20 <HAL_UART_Init>:
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
}
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e2a:	0005      	movs	r5, r0
 8001e2c:	3569      	adds	r5, #105	; 0x69
 8001e2e:	782b      	ldrb	r3, [r5, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001e36:	0002      	movs	r2, r0
 8001e38:	3268      	adds	r2, #104	; 0x68
 8001e3a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001e3c:	f000 fb74 	bl	8002528 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e40:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e42:	2101      	movs	r1, #1
 8001e44:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e46:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001e48:	6813      	ldr	r3, [r2, #0]
 8001e4a:	438b      	bics	r3, r1
 8001e4c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8001e54:	0020      	movs	r0, r4
 8001e56:	f7ff ff17 	bl	8001c88 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e5a:	0020      	movs	r0, r4
 8001e5c:	f7ff fde4 	bl	8001a28 <UART_SetConfig>
 8001e60:	2801      	cmp	r0, #1
 8001e62:	d0e0      	beq.n	8001e26 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <HAL_UART_Init+0x68>)
 8001e68:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001e6a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	438a      	bics	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001e80:	f7ff ff9c 	bl	8001dbc <UART_CheckIdleState>
 8001e84:	e7d0      	b.n	8001e28 <HAL_UART_Init+0x8>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	ffffb7ff 	.word	0xffffb7ff

08001e8c <SX1238_SPI_Select>:
}

void SX1238_SPI_Select()
{
	//pull ce low to activate spi
	HAL_GPIO_WritePin(SX1238_CE_PORT, SX1238_CE_PIN, GPIO_PIN_RESET);
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	20a0      	movs	r0, #160	; 0xa0
{
 8001e90:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SX1238_CE_PORT, SX1238_CE_PIN, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	00c9      	lsls	r1, r1, #3
 8001e96:	05c0      	lsls	r0, r0, #23
 8001e98:	f7fe fc40 	bl	800071c <HAL_GPIO_WritePin>
}
 8001e9c:	bd10      	pop	{r4, pc}

08001e9e <SX1238_SPI_Unselect>:

void SX1238_SPI_Unselect()
{
	//bring ce high to deactivate
	HAL_GPIO_WritePin(SX1238_CE_PORT, SX1238_CE_PIN, GPIO_PIN_SET);
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	20a0      	movs	r0, #160	; 0xa0
{
 8001ea2:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SX1238_CE_PORT, SX1238_CE_PIN, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	00c9      	lsls	r1, r1, #3
 8001ea8:	05c0      	lsls	r0, r0, #23
 8001eaa:	f7fe fc37 	bl	800071c <HAL_GPIO_WritePin>
}
 8001eae:	bd10      	pop	{r4, pc}

08001eb0 <SX1238_Reset>:
{
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8001eb2:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET); //low gain mode for now
 8001eb4:	2780      	movs	r7, #128	; 0x80
 8001eb6:	24a0      	movs	r4, #160	; 0xa0
	HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8001eb8:	4e16      	ldr	r6, [pc, #88]	; (8001f14 <SX1238_Reset+0x64>)
 8001eba:	00ad      	lsls	r5, r5, #2
	SX1238_SPI_Unselect(); //SPI NSS setup
 8001ebc:	f7ff ffef 	bl	8001e9e <SX1238_SPI_Unselect>
	HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET); //low gain mode for now
 8001ec0:	05e4      	lsls	r4, r4, #23
	HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8001ec2:	0029      	movs	r1, r5
 8001ec4:	0030      	movs	r0, r6
	HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET); //low gain mode for now
 8001ec6:	007f      	lsls	r7, r7, #1
	HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f7fe fc27 	bl	800071c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET); //low gain mode for now
 8001ece:	0039      	movs	r1, r7
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f7fe fc22 	bl	800071c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SX1238_TXEN_PORT, SX1238_TXEN_PIN, GPIO_PIN_RESET); //disable power amp transmitter
 8001ed8:	0039      	movs	r1, r7
 8001eda:	0030      	movs	r0, r6
 8001edc:	2200      	movs	r2, #0
 8001ede:	f7fe fc1d 	bl	800071c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SX1238_RESET_PORT, SX1238_RESET_PIN, GPIO_PIN_RESET);
 8001ee2:	0029      	movs	r1, r5
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	f7fe fc18 	bl	800071c <HAL_GPIO_WritePin>
	HAL_Delay(10); //delay for 10ms.
 8001eec:	200a      	movs	r0, #10
 8001eee:	f7fe fae5 	bl	80004bc <HAL_Delay>
	HAL_GPIO_WritePin(SX1238_RESET_PORT, SX1238_RESET_PIN, GPIO_PIN_SET);
 8001ef2:	0029      	movs	r1, r5
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	0020      	movs	r0, r4
 8001ef8:	f7fe fc10 	bl	800071c <HAL_GPIO_WritePin>
	HAL_Delay(10); //delay for 10ms.
 8001efc:	200a      	movs	r0, #10
 8001efe:	f7fe fadd 	bl	80004bc <HAL_Delay>
	HAL_GPIO_WritePin(SX1238_RESET_PORT, SX1238_RESET_PIN, GPIO_PIN_RESET);
 8001f02:	0029      	movs	r1, r5
 8001f04:	2200      	movs	r2, #0
 8001f06:	0020      	movs	r0, r4
 8001f08:	f7fe fc08 	bl	800071c <HAL_GPIO_WritePin>
	HAL_Delay(10); //delay for 10ms.
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f7fe fad5 	bl	80004bc <HAL_Delay>
}
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f14:	50000800 	.word	0x50000800

08001f18 <SX1238_Read_Register>:

/*Reads a register at the specified address and returns its value*/
void SX1238_Read_Register(uint8_t addr, uint8_t *pOut)
{
 8001f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f1a:	000d      	movs	r5, r1
 8001f1c:	0004      	movs	r4, r0
	unsigned char TempBuffer2;

	//1. pull cs low to activate spi
	SX1238_SPI_Select();
 8001f1e:	f7ff ffb5 	bl	8001e8c <SX1238_SPI_Select>

	//2. transmit register address
	TempBuffer2 = addr & 0x7F;
 8001f22:	466b      	mov	r3, sp
 8001f24:	1dd9      	adds	r1, r3, #7
 8001f26:	237f      	movs	r3, #127	; 0x7f
 8001f28:	401c      	ands	r4, r3
 8001f2a:	700c      	strb	r4, [r1, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer2, 1, 10);
 8001f2c:	4c07      	ldr	r4, [pc, #28]	; (8001f4c <SX1238_Read_Register+0x34>)
 8001f2e:	3b75      	subs	r3, #117	; 0x75
 8001f30:	2201      	movs	r2, #1
 8001f32:	0020      	movs	r0, r4
 8001f34:	f7ff fa3a 	bl	80013ac <HAL_SPI_Transmit>

	//3. read
	HAL_SPI_Receive(HSPI_INSTANCE, pOut, 1, 10);
 8001f38:	0029      	movs	r1, r5
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	0020      	movs	r0, r4
 8001f40:	f7ff fc68 	bl	8001814 <HAL_SPI_Receive>

	//4. bring cs high to deactivate
	SX1238_SPI_Unselect();
 8001f44:	f7ff ffab 	bl	8001e9e <SX1238_SPI_Unselect>
}
 8001f48:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000028 	.word	0x20000028

08001f50 <SX1238_Write_Register>:

/*Writes a value to the register at the given address*/
void SX1238_Write_Register(uint8_t addr, unsigned char value)
{
 8001f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned char regVal1 = 0;
 8001f52:	466b      	mov	r3, sp
	unsigned char regAddr1 = 0;
 8001f54:	466a      	mov	r2, sp
	unsigned char regVal1 = 0;
 8001f56:	1d9c      	adds	r4, r3, #6
 8001f58:	2300      	movs	r3, #0
	unsigned char regAddr1 = 0;
 8001f5a:	1dd5      	adds	r5, r2, #7
{
 8001f5c:	000e      	movs	r6, r1
 8001f5e:	0007      	movs	r7, r0
	unsigned char regVal1 = 0;
 8001f60:	7023      	strb	r3, [r4, #0]
	unsigned char regAddr1 = 0;
 8001f62:	71d3      	strb	r3, [r2, #7]
	//1. pull cs low to activate spi
	SX1238_SPI_Select();
 8001f64:	f7ff ff92 	bl	8001e8c <SX1238_SPI_Select>

	//2. transmit register address
	regAddr1 = addr | 0x80;
 8001f68:	2080      	movs	r0, #128	; 0x80
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	4338      	orrs	r0, r7
	HAL_SPI_Transmit(HSPI_INSTANCE, &regAddr1, 1, 10);
 8001f6e:	4f09      	ldr	r7, [pc, #36]	; (8001f94 <SX1238_Write_Register+0x44>)
	regAddr1 = addr | 0x80;
 8001f70:	7028      	strb	r0, [r5, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &regAddr1, 1, 10);
 8001f72:	0029      	movs	r1, r5
 8001f74:	0038      	movs	r0, r7
 8001f76:	230a      	movs	r3, #10
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f7ff fa17 	bl	80013ac <HAL_SPI_Transmit>

	//3. transmit register address
	regVal1 = value;
	HAL_SPI_Transmit(HSPI_INSTANCE, &regVal1, 1, 10);
 8001f7e:	230a      	movs	r3, #10
 8001f80:	2201      	movs	r2, #1
 8001f82:	0021      	movs	r1, r4
 8001f84:	0038      	movs	r0, r7
	regVal1 = value;
 8001f86:	7026      	strb	r6, [r4, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &regVal1, 1, 10);
 8001f88:	f7ff fa10 	bl	80013ac <HAL_SPI_Transmit>

	//4. bring cs high to deactivate
	SX1238_SPI_Unselect();
 8001f8c:	f7ff ff87 	bl	8001e9e <SX1238_SPI_Unselect>
}
 8001f90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	20000028 	.word	0x20000028

08001f98 <SX1238_Set_Mode>:
{
 8001f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	unsigned char rcv1 = 0;
 8001f9a:	466b      	mov	r3, sp
 8001f9c:	1ddd      	adds	r5, r3, #7
 8001f9e:	2300      	movs	r3, #0
	if(newMode == _mode) //if it's the same mode, just return.
 8001fa0:	4e20      	ldr	r6, [pc, #128]	; (8002024 <SX1238_Set_Mode+0x8c>)
	unsigned char rcv1 = 0;
 8001fa2:	702b      	strb	r3, [r5, #0]
	if(newMode == _mode) //if it's the same mode, just return.
 8001fa4:	7833      	ldrb	r3, [r6, #0]
{
 8001fa6:	0004      	movs	r4, r0
	if(newMode == _mode) //if it's the same mode, just return.
 8001fa8:	4283      	cmp	r3, r0
 8001faa:	d028      	beq.n	8001ffe <SX1238_Set_Mode+0x66>
	SX1238_Write_Register(REG_OPMODE, regVal); //adding gausian filter too...
 8001fac:	2108      	movs	r1, #8
 8001fae:	4301      	orrs	r1, r0
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff ffcd 	bl	8001f50 <SX1238_Write_Register>
	while ((rcv1 & RF_IRQFLAGS1_MODEREADY) == 0x00) // wait for ModeReady
 8001fb6:	782b      	ldrb	r3, [r5, #0]
 8001fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001fba:	d908      	bls.n	8001fce <SX1238_Set_Mode+0x36>
	_mode = newMode;
 8001fbc:	7034      	strb	r4, [r6, #0]
	switch (newMode) {
 8001fbe:	2c05      	cmp	r4, #5
 8001fc0:	d81d      	bhi.n	8001ffe <SX1238_Set_Mode+0x66>
 8001fc2:	0020      	movs	r0, r4
 8001fc4:	f7fe f8a8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001fc8:	081b2b2b 	.word	0x081b2b2b
 8001fcc:	1c1b      	.short	0x1c1b
		SX1238_Read_Register(REG_IRQFLAGS1, &rcv1);
 8001fce:	0029      	movs	r1, r5
 8001fd0:	203e      	movs	r0, #62	; 0x3e
 8001fd2:	f7ff ffa1 	bl	8001f18 <SX1238_Read_Register>
 8001fd6:	e7ee      	b.n	8001fb6 <SX1238_Set_Mode+0x1e>
		HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	2200      	movs	r2, #0
 8001fdc:	0089      	lsls	r1, r1, #2
 8001fde:	4812      	ldr	r0, [pc, #72]	; (8002028 <SX1238_Set_Mode+0x90>)
 8001fe0:	f7fe fb9c 	bl	800071c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET);
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	20a0      	movs	r0, #160	; 0xa0
 8001fe8:	2200      	movs	r2, #0
 8001fea:	0049      	lsls	r1, r1, #1
 8001fec:	05c0      	lsls	r0, r0, #23
 8001fee:	f7fe fb95 	bl	800071c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SX1238_TXEN_PORT, SX1238_TXEN_PIN, GPIO_PIN_SET);   //enable power amp transmitter
 8001ff2:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(SX1238_TXEN_PORT, SX1238_TXEN_PIN, GPIO_PIN_RESET); //disable power amp transmitter
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <SX1238_Set_Mode+0x90>)
 8001ff8:	0049      	lsls	r1, r1, #1
 8001ffa:	f7fe fb8f 	bl	800071c <HAL_GPIO_WritePin>
}
 8001ffe:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_SET);   //enable rx
 8002000:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <SX1238_Set_Mode+0x90>)
 8002006:	0089      	lsls	r1, r1, #2
 8002008:	f7fe fb88 	bl	800071c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SX1238_MODE_PORT, SX1238_MODE_PIN, GPIO_PIN_RESET); //low gain mode for now
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	20a0      	movs	r0, #160	; 0xa0
 8002010:	2200      	movs	r2, #0
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	05c0      	lsls	r0, r0, #23
 8002016:	f7fe fb81 	bl	800071c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SX1238_TXEN_PORT, SX1238_TXEN_PIN, GPIO_PIN_RESET); //disable power amp transmitter
 800201a:	2200      	movs	r2, #0
 800201c:	e7ea      	b.n	8001ff4 <SX1238_Set_Mode+0x5c>
		HAL_GPIO_WritePin(SX1238_RXEN_PORT, SX1238_RXEN_PIN, GPIO_PIN_RESET); //disable rx
 800201e:	2200      	movs	r2, #0
 8002020:	e7ef      	b.n	8002002 <SX1238_Set_Mode+0x6a>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000024 	.word	0x20000024
 8002028:	50000800 	.word	0x50000800

0800202c <SX1238_Handle_Interrupt>:
{
 800202c:	b513      	push	{r0, r1, r4, lr}
	SX1238_Read_Register(REG_IRQFLAGS2, &irqflags2);
 800202e:	466b      	mov	r3, sp
 8002030:	1ddc      	adds	r4, r3, #7
 8002032:	0021      	movs	r1, r4
 8002034:	203f      	movs	r0, #63	; 0x3f
 8002036:	f7ff ff6f 	bl	8001f18 <SX1238_Read_Register>
	if (_mode == SX1238_MODE_TX && (irqflags2 & RF_IRQFLAGS2_PACKETSENT))
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SX1238_Handle_Interrupt+0x24>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d105      	bne.n	800204e <SX1238_Handle_Interrupt+0x22>
 8002042:	7823      	ldrb	r3, [r4, #0]
 8002044:	071b      	lsls	r3, r3, #28
 8002046:	d502      	bpl.n	800204e <SX1238_Handle_Interrupt+0x22>
		SX1238_Set_Mode(SX1238_MODE_STANDBY);
 8002048:	2001      	movs	r0, #1
 800204a:	f7ff ffa5 	bl	8001f98 <SX1238_Set_Mode>
}
 800204e:	bd13      	pop	{r0, r1, r4, pc}
 8002050:	20000024 	.word	0x20000024

08002054 <SX1238_Send_Frame>:
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	0017      	movs	r7, r2
 8002058:	b085      	sub	sp, #20
 800205a:	0006      	movs	r6, r0
 800205c:	001c      	movs	r4, r3
	SX1238_Set_Mode(SX1238_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 800205e:	2001      	movs	r0, #1
{
 8002060:	ab0a      	add	r3, sp, #40	; 0x28
 8002062:	781d      	ldrb	r5, [r3, #0]
 8002064:	9101      	str	r1, [sp, #4]
	SX1238_Set_Mode(SX1238_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 8002066:	f7ff ff97 	bl	8001f98 <SX1238_Set_Mode>
	SX1238_Write_Register(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 800206a:	2100      	movs	r1, #0
 800206c:	2040      	movs	r0, #64	; 0x40
 800206e:	f7ff ff6f 	bl	8001f50 <SX1238_Write_Register>
 8002072:	1c3b      	adds	r3, r7, #0
 8002074:	2f3d      	cmp	r7, #61	; 0x3d
 8002076:	d900      	bls.n	800207a <SX1238_Send_Frame+0x26>
 8002078:	233d      	movs	r3, #61	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	9300      	str	r3, [sp, #0]
		CTLbyte = CTL_SENDACK;
 800207e:	2780      	movs	r7, #128	; 0x80
	if (sendACK)
 8002080:	2d00      	cmp	r5, #0
 8002082:	d103      	bne.n	800208c <SX1238_Send_Frame+0x38>
		CTLbyte = CTL_REQACK;
 8002084:	0027      	movs	r7, r4
 8002086:	1e7c      	subs	r4, r7, #1
 8002088:	41a7      	sbcs	r7, r4
 800208a:	01bf      	lsls	r7, r7, #6
	SX1238_SPI_Select();
 800208c:	f7ff fefe 	bl	8001e8c <SX1238_SPI_Select>
	TempBuffer1 = REG_FIFO | 0x80;
 8002090:	ab02      	add	r3, sp, #8
 8002092:	1ddc      	adds	r4, r3, #7
 8002094:	2380      	movs	r3, #128	; 0x80
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 8002096:	4d1e      	ldr	r5, [pc, #120]	; (8002110 <SX1238_Send_Frame+0xbc>)
	TempBuffer1 = REG_FIFO | 0x80;
 8002098:	7023      	strb	r3, [r4, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 800209a:	2201      	movs	r2, #1
 800209c:	3b76      	subs	r3, #118	; 0x76
 800209e:	0021      	movs	r1, r4
 80020a0:	0028      	movs	r0, r5
 80020a2:	f7ff f983 	bl	80013ac <HAL_SPI_Transmit>
	TempBuffer1 = bufferSize + 3;
 80020a6:	9b00      	ldr	r3, [sp, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020a8:	2201      	movs	r2, #1
	TempBuffer1 = bufferSize + 3;
 80020aa:	3303      	adds	r3, #3
 80020ac:	7023      	strb	r3, [r4, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020ae:	0021      	movs	r1, r4
 80020b0:	230a      	movs	r3, #10
 80020b2:	0028      	movs	r0, r5
 80020b4:	f7ff f97a 	bl	80013ac <HAL_SPI_Transmit>
	TempBuffer1 = toAddress;
 80020b8:	7026      	strb	r6, [r4, #0]
	TempBuffer1 = NODE_ADDRESS;
 80020ba:	260a      	movs	r6, #10
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020bc:	230a      	movs	r3, #10
 80020be:	2201      	movs	r2, #1
 80020c0:	0021      	movs	r1, r4
 80020c2:	0028      	movs	r0, r5
 80020c4:	f7ff f972 	bl	80013ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020c8:	0033      	movs	r3, r6
 80020ca:	2201      	movs	r2, #1
 80020cc:	0021      	movs	r1, r4
 80020ce:	0028      	movs	r0, r5
	TempBuffer1 = NODE_ADDRESS;
 80020d0:	7026      	strb	r6, [r4, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020d2:	f7ff f96b 	bl	80013ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020d6:	0033      	movs	r3, r6
 80020d8:	2201      	movs	r2, #1
 80020da:	0021      	movs	r1, r4
 80020dc:	0028      	movs	r0, r5
	TempBuffer1 = CTLbyte;
 80020de:	7027      	strb	r7, [r4, #0]
	HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020e0:	f7ff f964 	bl	80013ac <HAL_SPI_Transmit>
 80020e4:	9e01      	ldr	r6, [sp, #4]
 80020e6:	9b00      	ldr	r3, [sp, #0]
 80020e8:	18f7      	adds	r7, r6, r3
	for (uint8_t i = 0; i < bufferSize; i++)
 80020ea:	42be      	cmp	r6, r7
 80020ec:	d106      	bne.n	80020fc <SX1238_Send_Frame+0xa8>
	SX1238_SPI_Unselect();
 80020ee:	f7ff fed6 	bl	8001e9e <SX1238_SPI_Unselect>
	SX1238_Set_Mode(SX1238_MODE_TX);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f7ff ff50 	bl	8001f98 <SX1238_Set_Mode>
}
 80020f8:	b005      	add	sp, #20
 80020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		TempBuffer1 = ((uint8_t*) buffer)[i];
 80020fc:	7833      	ldrb	r3, [r6, #0]
		HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 80020fe:	2201      	movs	r2, #1
		TempBuffer1 = ((uint8_t*) buffer)[i];
 8002100:	7023      	strb	r3, [r4, #0]
		HAL_SPI_Transmit(HSPI_INSTANCE, &TempBuffer1, 1, 10);
 8002102:	0021      	movs	r1, r4
 8002104:	230a      	movs	r3, #10
 8002106:	0028      	movs	r0, r5
 8002108:	f7ff f950 	bl	80013ac <HAL_SPI_Transmit>
 800210c:	3601      	adds	r6, #1
 800210e:	e7ec      	b.n	80020ea <SX1238_Send_Frame+0x96>
 8002110:	20000028 	.word	0x20000028

08002114 <SX1238_Init>:


/*Initialize SX1238 TRX*/
void SX1238_Init(void)
{
 8002114:	b510      	push	{r4, lr}
	//reset
	SX1238_Reset();
 8002116:	f7ff fecb 	bl	8001eb0 <SX1238_Reset>

	//initialize registers
	//unsigned char rcv2;

	SX1238_Write_Register(REG_PACONFIG, 0x01); //output power to default
 800211a:	2101      	movs	r1, #1
 800211c:	2009      	movs	r0, #9
 800211e:	f7ff ff17 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_PACONFIG, &rcv2);

	SX1238_Write_Register(REG_FIFOTHRESH, 0x8f); //fifo start condition not empty
 8002122:	218f      	movs	r1, #143	; 0x8f
 8002124:	2035      	movs	r0, #53	; 0x35
 8002126:	f7ff ff13 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FIFOTHRESH, &rcv2);

	SX1238_Write_Register(REG_PACKETCONFIG1, 0x80); //turn off crc
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	2030      	movs	r0, #48	; 0x30
 800212e:	f7ff ff0f 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_PACKETCONFIG1, &rcv2);

	SX1238_Write_Register(REG_PACKETCONFIG2, 0x40); //packet mode
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	2031      	movs	r0, #49	; 0x31
 8002136:	f7ff ff0b 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_PACKETCONFIG2, &rcv2);

	SX1238_Write_Register(REG_PREAMBLEMSB, 0x00); //preamble length
 800213a:	2100      	movs	r1, #0
 800213c:	2025      	movs	r0, #37	; 0x25
 800213e:	f7ff ff07 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_PREAMBLEMSB, &rcv2);

	SX1238_Write_Register(REG_PREAMBLELSB, 0x03);
 8002142:	2103      	movs	r1, #3
 8002144:	2026      	movs	r0, #38	; 0x26
 8002146:	f7ff ff03 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_PREAMBLELSB, &rcv2);

	SX1238_Write_Register(REG_FRFMSB, 0xe4); //frequency 915MHz
 800214a:	21e4      	movs	r1, #228	; 0xe4
 800214c:	2006      	movs	r0, #6
 800214e:	f7ff feff 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FRFMSB, &rcv2);

	SX1238_Write_Register(REG_FRFMID, 0xc0);
 8002152:	21c0      	movs	r1, #192	; 0xc0
 8002154:	2007      	movs	r0, #7
 8002156:	f7ff fefb 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FRFMID, &rcv2);

	SX1238_Write_Register(REG_FRFLSB, 0x00);
 800215a:	2100      	movs	r1, #0
 800215c:	2008      	movs	r0, #8
 800215e:	f7ff fef7 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FRFLSB, &rcv2);

	SX1238_Write_Register(REG_SYNCCONFIG, 0x91); //auto restart, sync on, fill auto, sync size 2 bytes
 8002162:	2191      	movs	r1, #145	; 0x91
 8002164:	2027      	movs	r0, #39	; 0x27
 8002166:	f7ff fef3 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_SYNCCONFIG, &rcv2);

	SX1238_Write_Register(REG_SYNCVALUE1, 0x5A);
 800216a:	215a      	movs	r1, #90	; 0x5a
 800216c:	2028      	movs	r0, #40	; 0x28
 800216e:	f7ff feef 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_SYNCVALUE1, &rcv2);

	SX1238_Write_Register(REG_SYNCVALUE2, 0x5A);
 8002172:	215a      	movs	r1, #90	; 0x5a
 8002174:	2029      	movs	r0, #41	; 0x29
 8002176:	f7ff feeb 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_SYNCVALUE2, &rcv2);

	SX1238_Write_Register(REG_BITRATEMSB, 0x1a); //bit rates etc...
 800217a:	211a      	movs	r1, #26
 800217c:	2002      	movs	r0, #2
 800217e:	f7ff fee7 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_BITRATEMSB, &rcv2);

	SX1238_Write_Register(REG_BITRATELSB, 0x0b);
 8002182:	210b      	movs	r1, #11
 8002184:	2003      	movs	r0, #3
 8002186:	f7ff fee3 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_BITRATELSB, &rcv2);

	SX1238_Write_Register(REG_FDEVMSB, 0x00); //frequency deviation (deviation in Hz = fdev * 61)
 800218a:	2100      	movs	r1, #0
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fedf 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FDEVMSB, &rcv2);

	SX1238_Write_Register(REG_FDEVLSB, 0x52); //see datasheet for max fdev limits (https://www.semtech.com/uploads/documents/sx1238.pdf page 22)
 8002192:	2152      	movs	r1, #82	; 0x52
 8002194:	2005      	movs	r0, #5
 8002196:	f7ff fedb 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_FDEVLSB, &rcv2);

	SX1238_Write_Register(REG_RXBW, 0x05);
 800219a:	2105      	movs	r1, #5
 800219c:	2012      	movs	r0, #18
 800219e:	f7ff fed7 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_RXBW, &rcv2);

	SX1238_Write_Register(REG_NODEADRS, NODE_ADDRESS); //setting node address
 80021a2:	210a      	movs	r1, #10
 80021a4:	2033      	movs	r0, #51	; 0x33
 80021a6:	f7ff fed3 	bl	8001f50 <SX1238_Write_Register>
	//SX1238_Read_Register(REG_NODEADRS, &rcv2);

	SX1238_Set_Mode(SX1238_MODE_STANDBY); //enter standby mode
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fef4 	bl	8001f98 <SX1238_Set_Mode>

}
 80021b0:	bd10      	pop	{r4, pc}
	...

080021b4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b4:	2004      	movs	r0, #4
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <MX_GPIO_Init+0xc8>)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	4301      	orrs	r1, r0
 80021c0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 80021c4:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4002      	ands	r2, r0
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	307c      	adds	r0, #124	; 0x7c
 80021d0:	4301      	orrs	r1, r0
 80021d2:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 80021d8:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	4002      	ands	r2, r0
 80021dc:	9202      	str	r2, [sp, #8]
 80021de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 80021e2:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	432a      	orrs	r2, r5
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80021e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 80021ea:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	402a      	ands	r2, r5
 80021ee:	9203      	str	r2, [sp, #12]
 80021f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1238_TXEN_Pin|SX1238_RXEN_Pin, GPIO_PIN_RESET);
 80021f4:	4e22      	ldr	r6, [pc, #136]	; (8002280 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 8002200:	21e4      	movs	r1, #228	; 0xe4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 8002204:	00c9      	lsls	r1, r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin, GPIO_PIN_RESET);
 8002208:	f7fe fa88 	bl	800071c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SX1238_TXEN_Pin|SX1238_RXEN_Pin, GPIO_PIN_RESET);
 800220c:	21c0      	movs	r1, #192	; 0xc0
 800220e:	2200      	movs	r2, #0
 8002210:	0030      	movs	r0, r6
 8002212:	0089      	lsls	r1, r1, #2
 8002214:	f7fe fa82 	bl	800071c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002218:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_GPIO_Init+0xd0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002222:	a905      	add	r1, sp, #20
 8002224:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002226:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800222a:	f7fe f9bb 	bl	80005a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin;
 800222e:	23e4      	movs	r3, #228	; 0xe4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin;
 8002232:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = LD2_Pin|SX1238_MODE_Pin|RESET_Pin|CE1_Pin;
 8002236:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f7fe f9b1 	bl	80005a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PIR1_Pin|SX1238_IRQ_Pin;
 8002242:	23c0      	movs	r3, #192	; 0xc0
 8002244:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_GPIO_Init+0xd0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	a905      	add	r1, sp, #20
 800224a:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f7fe f9a8 	bl	80005a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1238_TXEN_Pin|SX1238_RXEN_Pin;
 8002254:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SX1238_TXEN_Pin|SX1238_RXEN_Pin;
 8002258:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SX1238_TXEN_Pin|SX1238_RXEN_Pin;
 800225c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f7fe f99e 	bl	80005a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002268:	0022      	movs	r2, r4
 800226a:	0021      	movs	r1, r4
 800226c:	2007      	movs	r0, #7
 800226e:	f7fe f931 	bl	80004d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002272:	2007      	movs	r0, #7
 8002274:	f7fe f95e 	bl	8000534 <HAL_NVIC_EnableIRQ>

}
 8002278:	b00b      	add	sp, #44	; 0x2c
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	50000800 	.word	0x50000800
 8002284:	10110000 	.word	0x10110000

08002288 <SystemClock_Config>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	4924      	ldr	r1, [pc, #144]	; (800231c <SystemClock_Config+0x94>)
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <SystemClock_Config+0x98>)
 800228c:	680b      	ldr	r3, [r1, #0]
{
 800228e:	b530      	push	{r4, r5, lr}
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002290:	401a      	ands	r2, r3
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800229a:	23a0      	movs	r3, #160	; 0xa0
{
 800229c:	b09f      	sub	sp, #124	; 0x7c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800229e:	02db      	lsls	r3, r3, #11
 80022a0:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	931b      	str	r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	035b      	lsls	r3, r3, #13
 80022ac:	931c      	str	r3, [sp, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80022ae:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b0:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80022b4:	041b      	lsls	r3, r3, #16
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	a810      	add	r0, sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b8:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ba:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80022bc:	931d      	str	r3, [sp, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022be:	f7fe fa79 	bl	80007b4 <HAL_RCC_OscConfig>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d000      	beq.n	80022c8 <SystemClock_Config+0x40>
 80022c6:	e7fe      	b.n	80022c6 <SystemClock_Config+0x3e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c8:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022cc:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022ce:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d0:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d2:	9005      	str	r0, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022d4:	0029      	movs	r1, r5
 80022d6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d8:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022da:	f7fe fd17 	bl	8000d0c <HAL_RCC_ClockConfig>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d000      	beq.n	80022e4 <SystemClock_Config+0x5c>
 80022e2:	e7fe      	b.n	80022e2 <SystemClock_Config+0x5a>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022e4:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e6:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022e8:	9406      	str	r4, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	f7fe fded 	bl	8000ec8 <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	1e04      	subs	r4, r0, #0
 80022f0:	d000      	beq.n	80022f4 <SystemClock_Config+0x6c>
 80022f2:	e7fe      	b.n	80022f2 <SystemClock_Config+0x6a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80022f4:	f7fe fdc2 	bl	8000e7c <HAL_RCC_GetHCLKFreq>
 80022f8:	21fa      	movs	r1, #250	; 0xfa
 80022fa:	0089      	lsls	r1, r1, #2
 80022fc:	f7fd ff16 	bl	800012c <__udivsi3>
 8002300:	f7fe f922 	bl	8000548 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002304:	2004      	movs	r0, #4
 8002306:	f7fe f939 	bl	800057c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800230a:	2001      	movs	r0, #1
 800230c:	0022      	movs	r2, r4
 800230e:	0021      	movs	r1, r4
 8002310:	4240      	negs	r0, r0
 8002312:	f7fe f8df 	bl	80004d4 <HAL_NVIC_SetPriority>
}
 8002316:	b01f      	add	sp, #124	; 0x7c
 8002318:	bd30      	pop	{r4, r5, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	40007000 	.word	0x40007000
 8002320:	ffffe7ff 	.word	0xffffe7ff

08002324 <main>:
{
 8002324:	b510      	push	{r4, lr}
	HAL_Init();
 8002326:	f7fe f8ab 	bl	8000480 <HAL_Init>
	SystemClock_Config();
 800232a:	f7ff ffad 	bl	8002288 <SystemClock_Config>
	MX_GPIO_Init();
 800232e:	f7ff ff41 	bl	80021b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002332:	f000 f8d9 	bl	80024e8 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8002336:	f000 f821 	bl	800237c <MX_SPI1_Init>
	SX1238_Init(); //Initialize SX1238 Trx
 800233a:	f7ff feeb 	bl	8002114 <SX1238_Init>
 800233e:	e7fe      	b.n	800233e <main+0x1a>

08002340 <HAL_GPIO_EXTI_Callback>:
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002340:	b500      	push	{lr}
 8002342:	b08b      	sub	sp, #44	; 0x2c
	if (GPIO_Pin == PIR1_Pin)//if from motion sensor
 8002344:	2840      	cmp	r0, #64	; 0x40
 8002346:	d110      	bne.n	800236a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		char radiopacket[25] = "Driveway Alarm Triggered!";
 8002348:	2219      	movs	r2, #25
 800234a:	490a      	ldr	r1, [pc, #40]	; (8002374 <HAL_GPIO_EXTI_Callback+0x34>)
 800234c:	a803      	add	r0, sp, #12
 800234e:	f000 f959 	bl	8002604 <memcpy>

		//transmit packets
		SX1238_Send_Frame(NODE_TO_ADDR, radiopacket, strlen(radiopacket), false, false);
 8002352:	a803      	add	r0, sp, #12
 8002354:	f7fd fed8 	bl	8000108 <strlen>
 8002358:	2300      	movs	r3, #0
 800235a:	b2c2      	uxtb	r2, r0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	a903      	add	r1, sp, #12
 8002360:	2014      	movs	r0, #20
 8002362:	f7ff fe77 	bl	8002054 <SX1238_Send_Frame>
	}else if(GPIO_Pin == SX1238_IRQ_Pin)//if from trx
	{
		//let SX1238 driver handle from here
		SX1238_Handle_Interrupt();
	}
}
 8002366:	b00b      	add	sp, #44	; 0x2c
 8002368:	bd00      	pop	{pc}
	}else if(GPIO_Pin == SX1238_IRQ_Pin)//if from trx
 800236a:	2880      	cmp	r0, #128	; 0x80
 800236c:	d1fb      	bne.n	8002366 <HAL_GPIO_EXTI_Callback+0x26>
		SX1238_Handle_Interrupt();
 800236e:	f7ff fe5d 	bl	800202c <SX1238_Handle_Interrupt>
}
 8002372:	e7f8      	b.n	8002366 <HAL_GPIO_EXTI_Callback+0x26>
 8002374:	08002630 	.word	0x08002630

08002378 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8002378:	e7fe      	b.n	8002378 <_Error_Handler>
	...

0800237c <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <MX_SPI1_Init+0x40>)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_SPI1_Init+0x44>)
{
 8002380:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8002382:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002384:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002386:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800238c:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002392:	3af9      	subs	r2, #249	; 0xf9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002394:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002396:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002398:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800239a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800239c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800239e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023a4:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023a6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80023a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023aa:	f7fe ffbf 	bl	800132c <HAL_SPI_Init>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d003      	beq.n	80023ba <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023b2:	2145      	movs	r1, #69	; 0x45
 80023b4:	4803      	ldr	r0, [pc, #12]	; (80023c4 <MX_SPI1_Init+0x48>)
 80023b6:	f7ff ffdf 	bl	8002378 <_Error_Handler>
  }

}
 80023ba:	bd10      	pop	{r4, pc}
 80023bc:	20000028 	.word	0x20000028
 80023c0:	40013000 	.word	0x40013000
 80023c4:	0800265b 	.word	0x0800265b

080023c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_SPI_MspInit+0x50>)
 80023cc:	6802      	ldr	r2, [r0, #0]
{
 80023ce:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d11e      	bne.n	8002412 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_SPI_MspInit+0x54>)
 80023d8:	015b      	lsls	r3, r3, #5
 80023da:	6b51      	ldr	r1, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023de:	430b      	orrs	r3, r1
 80023e0:	6353      	str	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023e2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023ea:	015b      	lsls	r3, r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	a901      	add	r1, sp, #4
 80023ee:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80023f8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f7fe f8d3 	bl	80005a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023fe:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	a901      	add	r1, sp, #4
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <HAL_SPI_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002404:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800240c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f7fe f8c9 	bl	80005a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002412:	b006      	add	sp, #24
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	40013000 	.word	0x40013000
 800241c:	40021000 	.word	0x40021000
 8002420:	50000400 	.word	0x50000400

08002424 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	2201      	movs	r2, #1
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_MspInit+0x3c>)
{
 8002428:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800242c:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	430a      	orrs	r2, r1
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002436:	0552      	lsls	r2, r2, #21
 8002438:	430a      	orrs	r2, r1
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	4240      	negs	r0, r0
 8002440:	0011      	movs	r1, r2
 8002442:	f7fe f847 	bl	80004d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2002      	movs	r0, #2
 800244a:	0011      	movs	r1, r2
 800244c:	4240      	negs	r0, r0
 800244e:	f7fe f841 	bl	80004d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2001      	movs	r0, #1
 8002456:	0011      	movs	r1, r2
 8002458:	4240      	negs	r0, r0
 800245a:	f7fe f83b 	bl	80004d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245e:	bd10      	pop	{r4, pc}
 8002460:	40021000 	.word	0x40021000

08002464 <SVC_Handler>:
 8002464:	4770      	bx	lr

08002466 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002468:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246a:	f7fe f819 	bl	80004a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800246e:	f7fe f894 	bl	800059a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	bd10      	pop	{r4, pc}

08002474 <EXTI4_15_IRQHandler>:

/**
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
 8002474:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002476:	2040      	movs	r0, #64	; 0x40
 8002478:	f7fe f956 	bl	8000728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800247c:	2080      	movs	r0, #128	; 0x80
 800247e:	f7fe f953 	bl	8000728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002482:	2080      	movs	r0, #128	; 0x80
 8002484:	0180      	lsls	r0, r0, #6
 8002486:	f7fe f94f 	bl	8000728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800248a:	bd10      	pop	{r4, pc}

0800248c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <SystemInit+0x44>)
 8002490:	0052      	lsls	r2, r2, #1
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	490e      	ldr	r1, [pc, #56]	; (80024d4 <SystemInit+0x48>)
 800249c:	400a      	ands	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	490d      	ldr	r1, [pc, #52]	; (80024d8 <SystemInit+0x4c>)
 80024a4:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024a6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80024a8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	438a      	bics	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <SystemInit+0x50>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4909      	ldr	r1, [pc, #36]	; (80024e0 <SystemInit+0x54>)
 80024bc:	400a      	ands	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <SystemInit+0x58>)
 80024c8:	0512      	lsls	r2, r2, #20
 80024ca:	609a      	str	r2, [r3, #8]
#endif
}
 80024cc:	4770      	bx	lr
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	88ff400c 	.word	0x88ff400c
 80024d8:	fef6fff6 	.word	0xfef6fff6
 80024dc:	fffbffff 	.word	0xfffbffff
 80024e0:	ff02ffff 	.word	0xff02ffff
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <MX_USART2_UART_Init+0x34>)
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <MX_USART2_UART_Init+0x38>)
{
 80024ec:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80024ee:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80024f0:	23e1      	movs	r3, #225	; 0xe1
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f6:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024fa:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024fc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024fe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002500:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002506:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002508:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800250a:	f7ff fc89 	bl	8001e20 <HAL_UART_Init>
 800250e:	2800      	cmp	r0, #0
 8002510:	d003      	beq.n	800251a <MX_USART2_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002512:	2144      	movs	r1, #68	; 0x44
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <MX_USART2_UART_Init+0x3c>)
 8002516:	f7ff ff2f 	bl	8002378 <_Error_Handler>
  }

}
 800251a:	bd10      	pop	{r4, pc}
 800251c:	20000080 	.word	0x20000080
 8002520:	40004400 	.word	0x40004400
 8002524:	08002689 	.word	0x08002689

08002528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_UART_MspInit+0x38>)
 800252c:	6802      	ldr	r2, [r0, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d114      	bne.n	800255c <HAL_UART_MspInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <HAL_UART_MspInit+0x3c>)
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	6b91      	ldr	r1, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800253c:	430b      	orrs	r3, r1
 800253e:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002540:	230c      	movs	r3, #12
 8002542:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	3b0a      	subs	r3, #10
 8002546:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	3303      	adds	r3, #3
 800254e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002552:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002556:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f7fe f824 	bl	80005a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800255c:	b007      	add	sp, #28
 800255e:	bd00      	pop	{pc}
 8002560:	40004400 	.word	0x40004400
 8002564:	40021000 	.word	0x40021000

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800256a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800256c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800256e:	e003      	b.n	8002578 <LoopCopyDataInit>

08002570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002576:	3104      	adds	r1, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002578:	480b      	ldr	r0, [pc, #44]	; (80025a8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <LoopForever+0xe>)
  adds  r2, r0, r1
 800257c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800257e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002580:	d3f6      	bcc.n	8002570 <CopyDataInit>
  ldr  r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002584:	e002      	b.n	800258c <LoopFillZerobss>

08002586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002586:	2300      	movs	r3, #0
  str  r3, [r2]
 8002588:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258a:	3204      	adds	r2, #4

0800258c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <LoopForever+0x16>)
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002590:	d3f9      	bcc.n	8002586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002592:	f7ff ff7b 	bl	800248c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f000 f811 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7ff fec3 	bl	8002324 <main>

0800259e <LoopForever>:

LoopForever:
    b LoopForever
 800259e:	e7fe      	b.n	800259e <LoopForever>
   ldr   r0, =_estack
 80025a0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80025a4:	080026a8 	.word	0x080026a8
  ldr  r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025ac:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80025b0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80025b4:	200000f0 	.word	0x200000f0

080025b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC1_COMP_IRQHandler>
	...

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	2600      	movs	r6, #0
 80025c0:	4d0c      	ldr	r5, [pc, #48]	; (80025f4 <__libc_init_array+0x38>)
 80025c2:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c4:	1b64      	subs	r4, r4, r5
 80025c6:	10a4      	asrs	r4, r4, #2
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	2600      	movs	r6, #0
 80025ce:	f000 f823 	bl	8002618 <_init>
 80025d2:	4d0a      	ldr	r5, [pc, #40]	; (80025fc <__libc_init_array+0x40>)
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <__libc_init_array+0x44>)
 80025d6:	1b64      	subs	r4, r4, r5
 80025d8:	10a4      	asrs	r4, r4, #2
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	00b3      	lsls	r3, r6, #2
 80025e2:	58eb      	ldr	r3, [r5, r3]
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	00b3      	lsls	r3, r6, #2
 80025ec:	58eb      	ldr	r3, [r5, r3]
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	080026a0 	.word	0x080026a0
 80025f8:	080026a0 	.word	0x080026a0
 80025fc:	080026a0 	.word	0x080026a0
 8002600:	080026a4 	.word	0x080026a4

08002604 <memcpy>:
 8002604:	2300      	movs	r3, #0
 8002606:	b510      	push	{r4, lr}
 8002608:	429a      	cmp	r2, r3
 800260a:	d100      	bne.n	800260e <memcpy+0xa>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	5ccc      	ldrb	r4, [r1, r3]
 8002610:	54c4      	strb	r4, [r0, r3]
 8002612:	3301      	adds	r3, #1
 8002614:	e7f8      	b.n	8002608 <memcpy+0x4>
	...

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
